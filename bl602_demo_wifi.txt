1:typedef unsigned char   undefined;
3:typedef unsigned char    bool;
4:typedef unsigned char    byte;
5:typedef unsigned int    dword;
6:typedef long long    longlong;
7:typedef unsigned long long    qword;
8:typedef unsigned char    uchar;
9:typedef unsigned int    uint;
10:typedef unsigned long    ulong;
11:typedef unsigned long long    ulonglong;
12:typedef unsigned char    undefined1;
13:typedef unsigned short    undefined2;
14:typedef unsigned int    undefined3;
15:typedef unsigned int    undefined4;
16:typedef unsigned long long    undefined5;
17:typedef unsigned long long    undefined6;
18:typedef unsigned long long    undefined7;
19:typedef unsigned long long    undefined8;
20:typedef unsigned short    ushort;
21:typedef unsigned short    word;
22:typedef struct stat stat, *Pstat;
24:typedef ulonglong __u_quad_t;
26:typedef __u_quad_t __dev_t;
28:typedef ulong __ino_t;
30:typedef uint __mode_t;
32:typedef uint __nlink_t;
34:typedef uint __uid_t;
36:typedef uint __gid_t;
38:typedef long __off_t;
40:typedef long __blksize_t;
42:typedef long __blkcnt_t;
44:typedef struct timespec timespec, *Ptimespec;
46:typedef long __time_t;
48:struct timespec {
53:struct stat {
73:typedef ulong size_t;
75:typedef struct __locale_data __locale_data, *P__locale_data;
77:struct __locale_data {
80:typedef struct __locale_struct __locale_struct, *P__locale_struct;
82:struct __locale_struct {
90:typedef struct __locale_struct * __locale_t;
92:typedef bool _Bool;
94:typedef undefined complex long double[32];
96:typedef qword complex float;
98:typedef undefined complex double[16];
100:typedef struct trpc_env_tag trpc_env_tag, *Ptrpc_env_tag;
102:typedef char int8_t;
104:typedef short __int16_t;
106:typedef __int16_t int16_t;
108:struct trpc_env_tag {
118:typedef enum wiphy_flags {
141:typedef struct ieee80211_dot_d ieee80211_dot_d, *Pieee80211_dot_d;
143:typedef struct ieee80211_channel ieee80211_channel, *Pieee80211_channel;
145:typedef enum nl80211_band {
152:typedef ushort uint16_t;
154:typedef uint16_t u16;
156:typedef ulong uint32_t;
158:typedef uint32_t u32.conflict;
160:typedef enum nl80211_dfs_state {
166:struct ieee80211_dot_d {
172:struct ieee80211_channel {
198:typedef struct cfg80211_bss_select_adjust cfg80211_bss_select_adjust, *Pcfg80211_bss_select_adjust;
200:typedef int8_t s8;
202:struct cfg80211_bss_select_adjust {
207:typedef enum ieee80211_channel_flags {
222:typedef union anon_union.conflict13d8a5 anon_union.conflict13d8a5, *Panon_union.conflict13d8a5;
224:union anon_union.conflict13d8a5 {
229:typedef struct cfg80211_connect_params cfg80211_connect_params, *Pcfg80211_connect_params;
231:typedef uchar u8;
236:typedef enum nl80211_auth_type {
250:typedef enum nl80211_mfp {
255:typedef struct cfg80211_crypto_settings cfg80211_crypto_settings, *Pcfg80211_crypto_settings;
257:typedef struct ieee80211_ht_cap ieee80211_ht_cap, *Pieee80211_ht_cap;
259:typedef struct cfg80211_bss_selection cfg80211_bss_selection, *Pcfg80211_bss_selection;
261:typedef uint16_t __be16;
263:typedef struct key_params key_params, *Pkey_params;
265:typedef uint16_t __le16;
267:typedef struct ieee80211_mcs_info ieee80211_mcs_info, *Pieee80211_mcs_info;
269:typedef uint32_t __le32;
271:typedef enum nl80211_bss_select_attr {
280:typedef union anon_union.conflict13d8a5_for_param anon_union.conflict13d8a5_for_param, *Panon_union.conflict13d8a5_for_param;
282:union anon_union.conflict13d8a5_for_param {
287:struct cfg80211_bss_selection {
292:struct cfg80211_crypto_settings {
310:struct ieee80211_mcs_info {
317:struct ieee80211_ht_cap {
332:struct cfg80211_connect_params {
365:struct key_params {
373:typedef struct ieee80211_sta_ht_cap ieee80211_sta_ht_cap, *Pieee80211_sta_ht_cap;
375:struct ieee80211_sta_ht_cap {
384:typedef struct ke_evt_tag ke_evt_tag, *Pke_evt_tag;
386:struct ke_evt_tag {
391:typedef struct netconn netconn, *Pnetconn;
393:typedef enum netconn_evt {
401:typedef uint16_t u16_t;
403:typedef enum netconn_type {
412:typedef enum netconn_state {
420:typedef union anon_union.conflict1c7c2b_for_pcb anon_union.conflict1c7c2b_for_pcb, *Panon_union.conflict1c7c2b_for_pcb;
422:typedef int8_t s8_t;
424:typedef s8_t err_t;
426:typedef struct QueueDefinition QueueDefinition, *PQueueDefinition;
428:typedef struct QueueDefinition * QueueHandle_t;
430:typedef QueueHandle_t SemaphoreHandle_t;
432:typedef SemaphoreHandle_t sys_sem_t;
434:typedef QueueHandle_t sys_mbox_t;
436:typedef long int32_t;
438:typedef int32_t s32_t;
440:typedef uint32_t u32_t;
442:typedef uchar uint8_t;
444:typedef uint8_t u8_t;
446:typedef struct api_msg api_msg, *Papi_msg;
448:typedef struct ip_pcb ip_pcb, *Pip_pcb;
450:typedef struct tcp_pcb tcp_pcb, *Ptcp_pcb;
452:typedef struct pbuf pbuf, *Ppbuf;
454:typedef struct udp_pcb udp_pcb, *Pudp_pcb;
456:typedef struct ip4_addr ip4_addr, *Pip4_addr;
458:typedef struct ip4_addr ip4_addr_t;
460:typedef ip4_addr_t ip_addr_t;
462:typedef struct raw_pcb raw_pcb, *Praw_pcb;
464:typedef union anon_union.conflict18e1c3_for_u anon_union.conflict18e1c3_for_u, *Panon_union.conflict18e1c3_for_u;
466:typedef struct xLIST xLIST, *PxLIST;
468:typedef struct xLIST List_t;
470:typedef uint32_t UBaseType_t;
472:typedef union anon_union.conflict20568c_for_msg anon_union.conflict20568c_for_msg, *Panon_union.conflict20568c_for_msg;
474:typedef enum tcp_state {
488:typedef u16_t tcpflags_t;
490:typedef u16_t tcpwnd_size_t;
492:typedef int16_t s16_t;
494:typedef struct tcp_seg tcp_seg, *Ptcp_seg;
496:typedef struct tcp_pcb_listen tcp_pcb_listen, *Ptcp_pcb_listen;
498:typedef err_t (* tcp_connected_fn)(void *, struct tcp_pcb *, err_t);
500:typedef struct QueuePointers QueuePointers, *PQueuePointers;
502:typedef struct QueuePointers QueuePointers_t;
504:typedef struct SemaphoreData SemaphoreData, *PSemaphoreData;
506:typedef struct SemaphoreData SemaphoreData_t;
508:typedef struct xLIST_ITEM xLIST_ITEM, *PxLIST_ITEM;
510:typedef struct xLIST_ITEM ListItem_t;
512:typedef struct xMINI_LIST_ITEM xMINI_LIST_ITEM, *PxMINI_LIST_ITEM;
514:typedef struct xMINI_LIST_ITEM MiniListItem_t;
516:typedef struct netbuf netbuf, *Pnetbuf;
518:typedef struct anon_struct.conflict14aecf anon_struct.conflict14aecf, *Panon_struct.conflict14aecf;
520:typedef struct anon_struct.conflict202123 anon_struct.conflict202123, *Panon_struct.conflict202123;
522:typedef struct anon_struct.conflict202154 anon_struct.conflict202154, *Panon_struct.conflict202154;
524:typedef struct anon_struct.conflict202191 anon_struct.conflict202191, *Panon_struct.conflict202191;
526:typedef struct anon_struct.conflict2021fc anon_struct.conflict2021fc, *Panon_struct.conflict2021fc;
528:typedef struct anon_struct.conflict202213 anon_struct.conflict202213, *Panon_struct.conflict202213;
530:typedef struct anon_struct.conflict202237 anon_struct.conflict202237, *Panon_struct.conflict202237;
532:typedef struct tcp_hdr tcp_hdr, *Ptcp_hdr;
534:typedef err_t (* tcp_accept_fn)(void *, struct tcp_pcb *, err_t);
536:typedef struct tskTaskControlBlock tskTaskControlBlock, *PtskTaskControlBlock;
538:typedef struct tskTaskControlBlock * TaskHandle_t;
540:typedef uint32_t TickType_t;
542:typedef struct netvector netvector, *Pnetvector;
544:typedef enum netconn_igmp {
549:typedef uint32_t StackType_t;
551:struct xMINI_LIST_ITEM {
557:struct tcp_hdr {
568:struct anon_struct.conflict2021fc {
572:struct anon_struct.conflict202123 {
579:struct netvector {
584:struct ip4_addr {
588:struct netbuf {
600:union anon_union.conflict1c7c2b_for_pcb {
607:struct netconn {
631:struct xLIST_ITEM {
639:struct anon_struct.conflict202154 {
648:struct anon_struct.conflict14aecf {
653:struct anon_struct.conflict202237 {
662:struct anon_struct.conflict202191 {
677:struct anon_struct.conflict202213 {
685:union anon_union.conflict20568c_for_msg {
696:struct api_msg {
705:struct tcp_pcb_listen {
720:struct SemaphoreData {
725:struct tskTaskControlBlock {
744:struct QueuePointers {
749:union anon_union.conflict18e1c3_for_u {
754:struct xLIST {
760:struct QueueDefinition {
780:struct udp_pcb {
803:struct tcp_pcb {
868:struct tcp_seg {
880:struct ip_pcb {
889:struct pbuf {
900:struct raw_pcb {
916:typedef union anon_union.conflict1c7c2b anon_union.conflict1c7c2b, *Panon_union.conflict1c7c2b;
918:union anon_union.conflict1c7c2b {
925:typedef struct netconn.conflict1 netconn.conflict1, *Pnetconn.conflict1;
927:struct netconn.conflict1 {
951:typedef struct netconn.conflict netconn.conflict, *Pnetconn.conflict;
953:struct netconn.conflict {
977:typedef union MQTT_Connect_Header_Flags MQTT_Connect_Header_Flags, *PMQTT_Connect_Header_Flags;
979:typedef struct anon_struct.conflict248c12 anon_struct.conflict248c12, *Panon_struct.conflict248c12;
981:struct anon_struct.conflict248c12 {
993:union MQTT_Connect_Header_Flags {
998:typedef union MQTT_Connack_Header_Flags MQTT_Connack_Header_Flags, *PMQTT_Connack_Header_Flags;
1000:union MQTT_Connack_Header_Flags {
1005:typedef enum bl_sha_type_t {
1011:typedef struct bl_sha_ctx bl_sha_ctx, *Pbl_sha_ctx;
1013:typedef struct _bl_sha_SEC_Eng_SHA256_Ctx_t _bl_sha_SEC_Eng_SHA256_Ctx_t, *P_bl_sha_SEC_Eng_SHA256_Ctx_t;
1015:struct _bl_sha_SEC_Eng_SHA256_Ctx_t {
1025:struct bl_sha_ctx {
1031:typedef struct bl_sha_ctx bl_sha_ctx_t;
1033:typedef struct cipher_key_buf cipher_key_buf, *Pcipher_key_buf;
1035:typedef struct cipher_key_buf cipher_key_buf_t;
1037:typedef struct cipher_key_t cipher_key_t, *Pcipher_key_t;
1039:typedef union ckd ckd, *Pckd;
1041:typedef struct eapolHskData_t eapolHskData_t, *PeapolHskData_t;
1043:typedef uchar UINT8;
1045:typedef struct KeyData_t KeyData_t, *PKeyData_t;
1047:typedef ulong UINT32;
1049:typedef ushort UINT16;
1051:struct KeyData_t {
1060:struct eapolHskData_t {
1065:union ckd {
1069:struct cipher_key_t {
1073:struct cipher_key_buf {
1077:typedef void * __gnuc_va_list;
1079:typedef __gnuc_va_list va_list;
1081:typedef struct Efuse_Device_Info_Type Efuse_Device_Info_Type, *PEfuse_Device_Info_Type;
1083:struct Efuse_Device_Info_Type {
1093:typedef enum EF_Ctrl_SF_AES_Type {
1100:typedef struct Efuse_ADC_Gain_Coeff_Type Efuse_ADC_Gain_Coeff_Type, *PEfuse_ADC_Gain_Coeff_Type;
1102:struct Efuse_ADC_Gain_Coeff_Type {
1109:typedef struct Efuse_Ana_RC32M_Trim_Type Efuse_Ana_RC32M_Trim_Type, *PEfuse_Ana_RC32M_Trim_Type;
1111:struct Efuse_Ana_RC32M_Trim_Type {
1118:typedef struct EF_Ctrl_Sec_Param_Type EF_Ctrl_Sec_Param_Type, *PEF_Ctrl_Sec_Param_Type;
1120:typedef enum EF_Ctrl_Dbg_Mode_Type {
1126:struct EF_Ctrl_Sec_Param_Type {
1133:typedef struct Efuse_Ana_RC32K_Trim_Type Efuse_Ana_RC32K_Trim_Type, *PEfuse_Ana_RC32K_Trim_Type;
1135:struct Efuse_Ana_RC32K_Trim_Type {
1142:typedef struct Efuse_Capcode_Info_Type Efuse_Capcode_Info_Type, *PEfuse_Capcode_Info_Type;
1144:struct Efuse_Capcode_Info_Type {
1151:typedef enum EF_Ctrl_Sign_Type {
1157:typedef struct Efuse_TSEN_Refcode_Corner_Type Efuse_TSEN_Refcode_Corner_Type, *PEfuse_TSEN_Refcode_Corner_Type;
1159:struct Efuse_TSEN_Refcode_Corner_Type {
1167:typedef struct _TLSDataParams _TLSDataParams, *P_TLSDataParams;
1169:typedef struct _TLSDataParams TLSDataParams;
1171:typedef struct mbedtls_entropy_context mbedtls_entropy_context, *Pmbedtls_entropy_context;
1173:typedef struct mbedtls_ctr_drbg_context mbedtls_ctr_drbg_context, *Pmbedtls_ctr_drbg_context;
1175:typedef struct mbedtls_ssl_context mbedtls_ssl_context, *Pmbedtls_ssl_context;
1177:typedef struct mbedtls_ssl_config mbedtls_ssl_config, *Pmbedtls_ssl_config;
1179:typedef struct mbedtls_ssl_session mbedtls_ssl_session, *Pmbedtls_ssl_session;
1181:typedef struct mbedtls_x509_crt mbedtls_x509_crt, *Pmbedtls_x509_crt;
1183:typedef struct mbedtls_pk_context mbedtls_pk_context, *Pmbedtls_pk_context;
1185:typedef struct mbedtls_net_context mbedtls_net_context, *Pmbedtls_net_context;
1187:typedef struct mbedtls_sha256_context mbedtls_sha256_context, *Pmbedtls_sha256_context;
1189:typedef struct mbedtls_entropy_source_state mbedtls_entropy_source_state, *Pmbedtls_entropy_source_state;
1191:typedef struct mbedtls_aes_context mbedtls_aes_context, *Pmbedtls_aes_context;
1193:typedef struct mbedtls_ssl_config.conflict mbedtls_ssl_config.conflict, *Pmbedtls_ssl_config.conflict;
1195:typedef struct mbedtls_ssl_handshake_params mbedtls_ssl_handshake_params, *Pmbedtls_ssl_handshake_params;
1197:typedef struct mbedtls_ssl_transform mbedtls_ssl_transform, *Pmbedtls_ssl_transform;
1199:typedef struct mbedtls_asn1_buf mbedtls_asn1_buf, *Pmbedtls_asn1_buf;
1201:typedef struct mbedtls_asn1_buf mbedtls_x509_buf;
1203:typedef struct mbedtls_asn1_named_data mbedtls_asn1_named_data, *Pmbedtls_asn1_named_data;
1205:typedef struct mbedtls_asn1_named_data mbedtls_x509_name;
1207:typedef struct mbedtls_x509_time mbedtls_x509_time, *Pmbedtls_x509_time;
1209:typedef struct mbedtls_asn1_sequence mbedtls_asn1_sequence, *Pmbedtls_asn1_sequence;
1211:typedef struct mbedtls_asn1_sequence mbedtls_x509_sequence;
1213:typedef enum mbedtls_md_type_t {
1226:typedef enum mbedtls_pk_type_t {
1236:typedef struct mbedtls_x509_crt_profile mbedtls_x509_crt_profile, *Pmbedtls_x509_crt_profile;
1238:typedef struct mbedtls_ssl_key_cert mbedtls_ssl_key_cert, *Pmbedtls_ssl_key_cert;
1240:typedef struct mbedtls_x509_crl mbedtls_x509_crl, *Pmbedtls_x509_crl;
1242:typedef enum mbedtls_ecp_group_id {
1258:typedef struct mbedtls_pk_info_t mbedtls_pk_info_t, *Pmbedtls_pk_info_t;
1260:typedef struct mbedtls_pk_debug_item mbedtls_pk_debug_item, *Pmbedtls_pk_debug_item;
1262:typedef struct mbedtls_ssl_flight_item mbedtls_ssl_flight_item, *Pmbedtls_ssl_flight_item;
1264:typedef struct mbedtls_ssl_ciphersuite_t mbedtls_ssl_ciphersuite_t, *Pmbedtls_ssl_ciphersuite_t;
1266:typedef struct mbedtls_md_context_t mbedtls_md_context_t, *Pmbedtls_md_context_t;
1268:typedef struct mbedtls_cipher_context_t mbedtls_cipher_context_t, *Pmbedtls_cipher_context_t;
1270:typedef struct mbedtls_x509_crl_entry mbedtls_x509_crl_entry, *Pmbedtls_x509_crl_entry;
1272:typedef enum mbedtls_pk_debug_type {
1278:typedef enum mbedtls_cipher_type_t {
1330:typedef enum mbedtls_key_exchange_type_t {
1345:typedef struct mbedtls_md_info_t mbedtls_md_info_t, *Pmbedtls_md_info_t;
1347:typedef struct mbedtls_cipher_info_t mbedtls_cipher_info_t, *Pmbedtls_cipher_info_t;
1349:typedef enum mbedtls_operation_t {
1355:typedef enum mbedtls_cipher_mode_t {
1367:typedef struct mbedtls_cipher_base_t mbedtls_cipher_base_t, *Pmbedtls_cipher_base_t;
1369:typedef enum mbedtls_cipher_id_t {
1380:struct mbedtls_ssl_config.conflict {
1420:struct mbedtls_asn1_buf {
1426:struct mbedtls_asn1_named_data {
1436:struct mbedtls_aes_context {
1442:struct mbedtls_ssl_session {
1459:struct mbedtls_x509_time {
1468:struct mbedtls_x509_crl_entry {
1476:struct mbedtls_x509_crl {
1497:struct mbedtls_ctr_drbg_context {
1508:struct mbedtls_ssl_context {
1561:struct mbedtls_md_info_t {
1579:struct mbedtls_ssl_config {
1619:struct mbedtls_md_context_t {
1625:struct mbedtls_cipher_context_t {
1641:struct mbedtls_ssl_transform {
1656:struct mbedtls_sha256_context {
1665:struct mbedtls_asn1_sequence {
1670:struct mbedtls_cipher_base_t {
1685:struct mbedtls_entropy_source_state {
1693:struct mbedtls_net_context {
1697:struct mbedtls_ssl_ciphersuite_t {
1714:struct mbedtls_cipher_info_t {
1727:struct mbedtls_pk_debug_item {
1736:struct mbedtls_pk_context {
1741:struct mbedtls_x509_crt {
1776:struct mbedtls_ssl_flight_item {
1786:struct mbedtls_ssl_key_cert {
1792:struct mbedtls_pk_info_t {
1810:struct mbedtls_entropy_context {
1816:struct mbedtls_x509_crt_profile {
1823:struct mbedtls_ssl_handshake_params {
1864:struct _TLSDataParams {
1876:typedef enum anon_enum_16.conflict18251 {
2100:typedef struct stats_mem stats_mem, *Pstats_mem;
2102:typedef u16_t mem_size_t;
2104:struct stats_mem {
2112:typedef struct stats_proto stats_proto, *Pstats_proto;
2114:struct stats_proto {
2129:typedef struct stats_sys stats_sys, *Pstats_sys;
2131:typedef struct stats_syselem stats_syselem, *Pstats_syselem;
2133:struct stats_syselem {
2139:struct stats_sys {
2145:typedef struct stats_ stats_, *Pstats_;
2147:typedef struct stats_igmp stats_igmp, *Pstats_igmp;
2149:struct stats_igmp {
2166:struct stats_ {
2183:typedef struct anon_struct.conflict1c95 anon_struct.conflict1c95, *Panon_struct.conflict1c95;
2185:struct anon_struct.conflict1c95 {
2192:typedef union anon_union.conflict1cd3 anon_union.conflict1cd3, *Panon_union.conflict1cd3;
2194:union anon_union.conflict1cd3 {
2199:typedef struct loop_timer loop_timer, *Ploop_timer;
2201:typedef struct loop_ctx loop_ctx, *Ploop_ctx;
2203:typedef struct utils_dlist_s utils_dlist_s, *Putils_dlist_s;
2205:typedef struct utils_dlist_s utils_dlist_t;
2207:typedef struct utils_list utils_list, *Putils_list;
2209:typedef struct loop_evt_handler_statistic loop_evt_handler_statistic, *Ploop_evt_handler_statistic;
2211:typedef struct loop_evt_handler loop_evt_handler, *Ploop_evt_handler;
2213:typedef struct loop_msg loop_msg, *Ploop_msg;
2215:typedef struct utils_list_hdr utils_list_hdr, *Putils_list_hdr;
2217:typedef union anon_union.conflict1cd3_for_u anon_union.conflict1cd3_for_u, *Panon_union.conflict1cd3_for_u;
2219:struct utils_dlist_s {
2224:struct utils_list_hdr {
2228:struct utils_list {
2233:struct loop_evt_handler {
2239:struct loop_timer {
2253:struct loop_evt_handler_statistic {
2260:struct loop_ctx {
2274:union anon_union.conflict1cd3_for_u {
2279:struct loop_msg {
2288:typedef struct xSTATIC_QUEUE xSTATIC_QUEUE, *PxSTATIC_QUEUE;
2290:typedef union anon_union.conflict18de60_for_u anon_union.conflict18de60_for_u, *Panon_union.conflict18de60_for_u;
2292:typedef struct xSTATIC_LIST xSTATIC_LIST, *PxSTATIC_LIST;
2294:typedef struct xSTATIC_LIST StaticList_t;
2296:typedef struct xSTATIC_MINI_LIST_ITEM xSTATIC_MINI_LIST_ITEM, *PxSTATIC_MINI_LIST_ITEM;
2298:typedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;
2300:struct xSTATIC_MINI_LIST_ITEM {
2305:struct xSTATIC_LIST {
2311:union anon_union.conflict18de60_for_u {
2316:struct xSTATIC_QUEUE {
2331:typedef struct xSTATIC_TCB xSTATIC_TCB, *PxSTATIC_TCB;
2333:typedef struct xSTATIC_LIST_ITEM xSTATIC_LIST_ITEM, *PxSTATIC_LIST_ITEM;
2335:typedef struct xSTATIC_LIST_ITEM StaticListItem_t;
2337:struct xSTATIC_LIST_ITEM {
2342:struct xSTATIC_TCB {
2358:typedef struct xSTATIC_STREAM_BUFFER xSTATIC_STREAM_BUFFER, *PxSTATIC_STREAM_BUFFER;
2360:typedef struct xSTATIC_STREAM_BUFFER StaticStreamBuffer_t;
2362:struct xSTATIC_STREAM_BUFFER {
2372:typedef StaticStreamBuffer_t StaticMessageBuffer_t;
2374:typedef struct xSTATIC_TCB StaticTask_t;
2376:typedef struct xSTATIC_TIMER xSTATIC_TIMER, *PxSTATIC_TIMER;
2378:typedef struct xSTATIC_TIMER StaticTimer_t;
2380:struct xSTATIC_TIMER {
2393:typedef struct xSTATIC_EVENT_GROUP xSTATIC_EVENT_GROUP, *PxSTATIC_EVENT_GROUP;
2395:typedef struct xSTATIC_EVENT_GROUP StaticEventGroup_t;
2397:struct xSTATIC_EVENT_GROUP {
2407:typedef struct xSTATIC_QUEUE StaticQueue_t;
2409:typedef union anon_union.conflict18de60 anon_union.conflict18de60, *Panon_union.conflict18de60;
2411:union anon_union.conflict18de60 {
2416:typedef StaticQueue_t StaticSemaphore_t;
2418:typedef uchar uint8;
2420:typedef short SINT16;
2422:typedef char CHAR;
2424:typedef enum Status_e {
2429:typedef char SINT8;
2431:typedef void mdev_t;
2433:typedef ulong uint32;
2435:typedef ulonglong UINT64;
2437:typedef int BOOLEAN;
2439:typedef long SINT32;
2441:typedef enum wlan_security_type {
2452:typedef ushort uint16;
2454:typedef struct sm_reason_code sm_reason_code, *Psm_reason_code;
2456:struct sm_reason_code {
2463:typedef struct hw_rxhdr hw_rxhdr, *Phw_rxhdr;
2465:typedef struct hw_vect hw_vect, *Phw_vect;
2467:typedef int32_t s32;
2469:struct hw_vect {
2530:struct hw_rxhdr {
2552:typedef struct aos_hdl_t aos_hdl_t, *Paos_hdl_t;
2554:typedef struct aos_hdl_t aos_sem_t;
2556:struct aos_hdl_t {
2560:typedef struct aos_hdl_t aos_task_t;
2562:typedef struct aos_hdl_t aos_timer_t;
2564:typedef struct aos_hdl_t aos_queue_t;
2566:typedef uint aos_task_key_t;
2568:typedef struct aos_hdl_t aos_mutex_t;
2570:typedef struct aos_workqueue_t aos_workqueue_t, *Paos_workqueue_t;
2572:struct aos_workqueue_t {
2577:typedef struct aos_hdl_t aos_work_t;
2579:typedef struct sha256_state sha256_state, *Psha256_state;
2581:struct sha256_state {
2592:typedef uint16_t ke_state_t;
2594:typedef uint16_t ke_msg_id_t;
2596:typedef struct ke_msg ke_msg, *Pke_msg;
2598:typedef struct co_list_hdr co_list_hdr, *Pco_list_hdr;
2600:typedef uint16_t ke_task_id_t;
2602:struct co_list_hdr {
2606:struct ke_msg {
2615:typedef enum ke_msg_status_tag {
2621:typedef enum nl80211_iftype {
2639:typedef enum CFG_ELEMENT_TYPE_OPS {
2647:typedef enum CFG_ELEMENT_TYPE {
2659:typedef enum td_status_bit {
2666:typedef struct td_env_tag td_env_tag, *Ptd_env_tag;
2668:typedef struct mm_timer_tag mm_timer_tag, *Pmm_timer_tag;
2670:struct mm_timer_tag {
2677:struct td_env_tag {
2689:typedef struct RSNConfig_t RSNConfig_t, *PRSNConfig_t;
2691:typedef struct SecurityMode_t SecurityMode_t, *PSecurityMode_t;
2693:typedef struct Cipher_t Cipher_t, *PCipher_t;
2695:typedef struct AkmSuite_t AkmSuite_t, *PAkmSuite_t;
2697:typedef struct IEEEtypes_RSNCapability_t IEEEtypes_RSNCapability_t, *PIEEEtypes_RSNCapability_t;
2699:typedef enum AkmType_e {
2714:typedef enum AkmType_e AkmTypePacked_e;
2716:struct Cipher_t {
2724:struct AkmSuite_t {
2729:struct SecurityMode_t {
2742:struct IEEEtypes_RSNCapability_t {
2757:struct RSNConfig_t {
2772:typedef enum flag {
2783:typedef enum ranks {
2791:typedef enum anon_enum_8.conflict25d103 {
2799:typedef struct mac_addr.conflict mac_addr.conflict, *Pmac_addr.conflict;
2801:typedef uint8_t u8_l;
2803:struct mac_addr.conflict {
2807:typedef struct tmrTimerControl tmrTimerControl, *PtmrTimerControl;
2809:typedef struct tmrTimerControl * TimerHandle_t;
2811:struct tmrTimerControl {
2824:typedef struct scanu_env_tag scanu_env_tag, *Pscanu_env_tag;
2826:typedef struct scanu_start_req scanu_start_req, *Pscanu_start_req;
2828:typedef struct hal_dma_desc_tag hal_dma_desc_tag, *Phal_dma_desc_tag;
2830:typedef struct mac_scan_result mac_scan_result, *Pmac_scan_result;
2832:typedef struct mac_addr mac_addr, *Pmac_addr;
2834:typedef struct mac_ssid mac_ssid, *Pmac_ssid;
2836:typedef struct scan_chan_tag scan_chan_tag, *Pscan_chan_tag;
2838:typedef uint32_t u32_l;
2840:typedef uint16_t u16_l;
2842:typedef struct dma_desc dma_desc, *Pdma_desc;
2844:struct hal_dma_desc_tag {
2851:struct dma_desc {
2859:struct mac_addr {
2863:struct mac_ssid {
2869:struct scan_chan_tag {
2877:struct scanu_start_req {
2893:struct mac_scan_result {
2908:struct scanu_env_tag {
2922:typedef struct scanu_add_ie_tag scanu_add_ie_tag, *Pscanu_add_ie_tag;
2924:struct scanu_add_ie_tag {
2929:typedef enum HBN_PIR_HPF_Type {
2935:typedef enum HBN_ROOT_CLK_Type {
2941:typedef enum HBN_OUT0_INT_Type {
2947:typedef enum HBN_LDO_LEVEL_Type {
2966:typedef enum HBN_XCLK_CLK_Type {
2971:typedef enum HBN_BOR_THRES_Type {
2976:typedef enum HBN_LEVEL_Type {
2983:typedef enum HBN_GPIO_INT_Trigger_Type {
2994:typedef enum HBN_UART_CLK_Type {
2999:typedef enum HBN_INT_Type {
3009:typedef enum HBN_OUT1_INT_Type {
3016:typedef struct HBN_APP_CFG_Type HBN_APP_CFG_Type, *PHBN_APP_CFG_Type;
3018:typedef struct SPI_Flash_Cfg_Type SPI_Flash_Cfg_Type, *PSPI_Flash_Cfg_Type;
3020:struct HBN_APP_CFG_Type {
3037:struct SPI_Flash_Cfg_Type {
3112:typedef struct HBN_BOR_CFG_Type HBN_BOR_CFG_Type, *PHBN_BOR_CFG_Type;
3114:struct HBN_BOR_CFG_Type {
3121:typedef enum HBN_PIR_LPF_Type {
3126:typedef struct HBN_PIR_INT_CFG_Type HBN_PIR_INT_CFG_Type, *PHBN_PIR_INT_CFG_Type;
3128:typedef enum BL_Fun_Type {
3133:struct HBN_PIR_INT_CFG_Type {
3138:typedef enum HBN_BOR_MODE_Type {
3143:typedef enum HBN_RTC_INT_Delay_Type {
3148:typedef enum HBN_32K_CLK_Type {
3154:typedef struct tmrTimerQueueMessage tmrTimerQueueMessage, *PtmrTimerQueueMessage;
3156:typedef struct tmrTimerQueueMessage DaemonTaskMessage_t;
3158:typedef int32_t BaseType_t;
3160:typedef union anon_union.conflict196a82_for_u anon_union.conflict196a82_for_u, *Panon_union.conflict196a82_for_u;
3162:typedef struct tmrTimerParameters tmrTimerParameters, *PtmrTimerParameters;
3164:typedef struct tmrTimerParameters TimerParameter_t;
3166:typedef struct tmrCallbackParameters tmrCallbackParameters, *PtmrCallbackParameters;
3168:typedef struct tmrCallbackParameters CallbackParameters_t;
3170:typedef struct tmrTimerControl xTIMER;
3172:typedef xTIMER Timer_t;
3174:struct tmrTimerParameters {
3179:struct tmrCallbackParameters {
3185:union anon_union.conflict196a82_for_u {
3190:struct tmrTimerQueueMessage {
3195:typedef union anon_union.conflict196a82 anon_union.conflict196a82, *Panon_union.conflict196a82;
3197:union anon_union.conflict196a82 {
3202:typedef enum ranks.conflict {
3211:typedef enum flag.conflict {
3218:typedef enum bail {
3224:typedef enum anon_enum_8.conflict25ef9d {
3234:typedef struct ADC_MIC_Type ADC_MIC_Type, *PADC_MIC_Type;
3236:typedef enum ADC_MICBOOST_DB_Type {
3241:typedef enum ADC_PGA2_GAIN_Type {
3248:typedef enum ADC_MIC_MODE_Type {
3253:struct ADC_MIC_Type {
3264:typedef enum ADC_TSEN_MOD_Type {
3269:typedef enum ADC_V11_SEL_Type {
3276:typedef enum ADC_SIG_INPUT_Type {
3281:typedef struct ADC_FIFO_Cfg_Type ADC_FIFO_Cfg_Type, *PADC_FIFO_Cfg_Type;
3283:typedef enum ADC_FIFO_Threshold_Type {
3290:struct ADC_FIFO_Cfg_Type {
3295:typedef enum ADC_Data_Width_Type {
3303:typedef enum ADC_CLK_Type {
3314:typedef enum ADC_Chan_Type {
3341:typedef enum ADC_CHOP_MOD_Type {
3348:typedef struct ADC_CFG_Type ADC_CFG_Type, *PADC_CFG_Type;
3350:typedef enum ADC_V18_SEL_Type {
3357:typedef enum ADC_PGA_GAIN_Type {
3367:typedef enum ADC_BIAS_SEL_Type {
3372:typedef enum ADC_PGA_VCM_Type {
3379:typedef enum ADC_VREF_Type {
3384:struct ADC_CFG_Type {
3400:typedef enum ADC_INT_Type {
3409:typedef struct ADC_Result_Type ADC_Result_Type, *PADC_Result_Type;
3411:struct ADC_Result_Type {
3418:typedef struct ADC_Gain_Coeff_Type ADC_Gain_Coeff_Type, *PADC_Gain_Coeff_Type;
3420:struct ADC_Gain_Coeff_Type {
3427:typedef struct ipc_a2e_msg ipc_a2e_msg, *Pipc_a2e_msg;
3429:struct ipc_a2e_msg {
3434:typedef struct ipc_e2a_msg ipc_e2a_msg, *Pipc_e2a_msg;
3436:struct ipc_e2a_msg {
3445:typedef struct ipc_shared_env_tag ipc_shared_env_tag, *Pipc_shared_env_tag;
3447:typedef struct txdesc_host txdesc_host, *Ptxdesc_host;
3449:typedef struct hostdesc hostdesc, *Phostdesc;
3451:struct hostdesc {
3473:struct txdesc_host {
3480:struct ipc_shared_env_tag {
3486:typedef struct anon_struct.conflict34b4e anon_struct.conflict34b4e, *Panon_struct.conflict34b4e;
3488:struct anon_struct.conflict34b4e {
3504:typedef struct regs_to_opti regs_to_opti, *Pregs_to_opti;
3506:struct regs_to_opti {
3522:typedef struct tx_pwr_index tx_pwr_index, *Ptx_pwr_index;
3524:struct tx_pwr_index {
3529:typedef struct anon_struct.conflict34ac0 anon_struct.conflict34ac0, *Panon_struct.conflict34ac0;
3531:struct anon_struct.conflict34ac0 {
3536:typedef struct notch_param notch_param, *Pnotch_param;
3538:struct notch_param {
3543:typedef struct anon_struct.conflict2d12e6 anon_struct.conflict2d12e6, *Panon_struct.conflict2d12e6;
3545:struct anon_struct.conflict2d12e6 {
3552:typedef union _FP_UNION_D _FP_UNION_D, *P_FP_UNION_D;
3554:typedef double DFtype;
3556:union _FP_UNION_D {
3561:typedef enum __fdlibm_version {
3566:typedef struct dump_data_t dump_data_t, *Pdump_data_t;
3568:struct dump_data_t {
3585:typedef struct HWStateMachineReg HWStateMachineReg, *PHWStateMachineReg;
3587:struct HWStateMachineReg {
3595:typedef struct tcal_tag tcal_tag, *Ptcal_tag;
3597:struct tcal_tag {
3610:typedef struct mem mem, *Pmem;
3612:struct mem {
3619:typedef union _reg_t _reg_t, *P_reg_t;
3621:union _reg_t {
3626:typedef struct mbedtls_ecp_keypair mbedtls_ecp_keypair, *Pmbedtls_ecp_keypair;
3628:typedef struct mbedtls_ecp_group mbedtls_ecp_group, *Pmbedtls_ecp_group;
3630:typedef struct mbedtls_mpi mbedtls_mpi, *Pmbedtls_mpi;
3632:typedef struct mbedtls_ecp_point mbedtls_ecp_point, *Pmbedtls_ecp_point;
3634:typedef uint32_t mbedtls_mpi_uint;
3636:struct mbedtls_mpi {
3642:struct mbedtls_ecp_point {
3648:struct mbedtls_ecp_group {
3669:struct mbedtls_ecp_keypair {
3675:typedef struct mbedtls_ecp_curve_info mbedtls_ecp_curve_info, *Pmbedtls_ecp_curve_info;
3677:struct mbedtls_ecp_curve_info {
3687:typedef enum lwip_iana_hwtype {
3691:typedef enum lwip_iana_port_number {
3708:typedef enum ecp_curve_type {
3714:typedef struct event event, *Pevent;
3716:struct event {
3721:typedef struct state state, *Pstate;
3723:typedef struct transition transition, *Ptransition;
3725:struct state {
3735:struct transition {
3743:typedef struct stateMachine stateMachine, *PstateMachine;
3745:struct stateMachine {
3751:typedef enum stateM_handleEventRetVals {
3760:typedef struct _romfs_file_buf _romfs_file_buf, *P_romfs_file_buf;
3762:struct _romfs_file_buf {
3767:typedef struct _romfs_file_buf romfs_filebuf_t;
3769:typedef enum netifapi_arp_entry {
3773:typedef struct rxl_hwdesc_env_tag rxl_hwdesc_env_tag, *Prxl_hwdesc_env_tag;
3775:typedef struct rx_pbd rx_pbd, *Prx_pbd;
3777:struct rxl_hwdesc_env_tag {
3782:struct rx_pbd {
3791:typedef struct sntp_msg sntp_msg, *Psntp_msg;
3793:struct sntp_msg {
3807:typedef struct sntp_time sntp_time, *Psntp_time;
3809:struct sntp_time {
3814:typedef struct sntp_timestamps sntp_timestamps, *Psntp_timestamps;
3816:struct sntp_timestamps {
3820:typedef struct sntp_server sntp_server, *Psntp_server;
3822:struct sntp_server {
3831:typedef struct KDE_t KDE_t, *PKDE_t;
3833:struct KDE_t {
3841:typedef struct Hdr_8021x_t Hdr_8021x_t, *PHdr_8021x_t;
3843:typedef enum IEEEtypes_8021x_PacketType_e {
3851:struct Hdr_8021x_t {
3857:typedef struct EAPOL_KeyMsg_t EAPOL_KeyMsg_t, *PEAPOL_KeyMsg_t;
3859:typedef struct key_info_t key_info_t, *Pkey_info_t;
3861:struct key_info_t {
3875:struct EAPOL_KeyMsg_t {
3890:typedef struct EAPOL_KeyMsg_Tx_t EAPOL_KeyMsg_Tx_t, *PEAPOL_KeyMsg_Tx_t;
3892:typedef struct ether_hdr_t ether_hdr_t, *Pether_hdr_t;
3894:typedef UINT8 IEEEtypes_Addr_t;
3896:typedef IEEEtypes_Addr_t IEEEtypes_MacAddr_t[6];
3898:struct ether_hdr_t {
3904:struct EAPOL_KeyMsg_Tx_t {
3909:typedef struct GTK_KDE_t GTK_KDE_t, *PGTK_KDE_t;
3911:struct GTK_KDE_t {
3919:typedef struct EAP_PacketMsg_t EAP_PacketMsg_t, *PEAP_PacketMsg_t;
3921:typedef enum IEEEtypes_8021x_CodeType_e {
3928:struct EAP_PacketMsg_t {
3936:typedef struct Timer Timer, *PTimer;
3938:struct Timer {
3944:typedef struct event_dev_t event_dev_t, *Pevent_dev_t;
3946:typedef struct pollfd pollfd, *Ppollfd;
3948:typedef struct dlist_s dlist_s, *Pdlist_s;
3950:typedef struct dlist_s dlist_t;
3952:struct dlist_s {
3957:struct pollfd {
3963:struct event_dev_t {
3974:typedef struct dev_event_t dev_event_t, *Pdev_event_t;
3976:struct dev_event_t {
3982:typedef struct BL_ENDECRYPT_t BL_ENDECRYPT_t, *PBL_ENDECRYPT_t;
3984:struct BL_ENDECRYPT_t {
3992:typedef struct sta_mgmt_ba_info sta_mgmt_ba_info, *Psta_mgmt_ba_info;
3994:struct sta_mgmt_ba_info {
4003:typedef struct sta_info_tag sta_info_tag, *Psta_info_tag;
4005:typedef enum sta_ps_traffic {
4014:typedef int sta_ps_sp_t;
4016:typedef struct sta_mgmt_sec_info sta_mgmt_sec_info, *Psta_mgmt_sec_info;
4018:typedef struct mac_sta_info mac_sta_info, *Pmac_sta_info;
4020:typedef struct sta_pol_tbl_cntl sta_pol_tbl_cntl, *Psta_pol_tbl_cntl;
4022:typedef struct co_list co_list, *Pco_list;
4024:typedef struct key_info_tag key_info_tag, *Pkey_info_tag;
4026:typedef struct mac_rateset mac_rateset, *Pmac_rateset;
4028:typedef struct mac_htcapability mac_htcapability, *Pmac_htcapability;
4030:typedef struct mac_vhtcapability mac_vhtcapability, *Pmac_vhtcapability;
4032:typedef struct txl_buffer_control txl_buffer_control, *Ptxl_buffer_control;
4034:typedef struct rc_sta_stats rc_sta_stats, *Prc_sta_stats;
4036:typedef ulonglong __uint64_t;
4038:typedef __uint64_t uint64_t;
4040:typedef union anon_union.conflict97f3_for_u anon_union.conflict97f3_for_u, *Panon_union.conflict97f3_for_u;
4042:typedef union anon_union.conflictbf1b_for_field_0 anon_union.conflictbf1b_for_field_0, *Panon_union.conflictbf1b_for_field_0;
4044:typedef struct rc_rate_stats rc_rate_stats, *Prc_rate_stats;
4046:typedef struct step step, *Pstep;
4048:typedef union anon_union.conflictc3d7_for_rate_map anon_union.conflictc3d7_for_rate_map, *Panon_union.conflictc3d7_for_rate_map;
4050:typedef struct anon_struct.conflict9793 anon_struct.conflict9793, *Panon_struct.conflict9793;
4052:typedef struct anon_struct.conflict97ca anon_struct.conflict97ca, *Panon_struct.conflict97ca;
4054:typedef struct tx_policy_tbl tx_policy_tbl, *Ptx_policy_tbl;
4056:typedef struct tx_compressed_policy_tbl tx_compressed_policy_tbl, *Ptx_compressed_policy_tbl;
4058:struct rc_rate_stats {
4069:struct step {
4076:union anon_union.conflictc3d7_for_rate_map {
4080:struct rc_sta_stats {
4110:struct tx_compressed_policy_tbl {
4115:struct tx_policy_tbl {
4125:union anon_union.conflictbf1b_for_field_0 {
4130:struct sta_pol_tbl_cntl {
4139:struct mac_rateset {
4144:struct anon_struct.conflict9793 {
4149:struct anon_struct.conflict97ca {
4153:union anon_union.conflict97f3_for_u {
4158:struct key_info_tag {
4172:struct sta_mgmt_sec_info {
4178:struct co_list {
4183:struct mac_vhtcapability {
4191:struct mac_htcapability {
4206:struct mac_sta_info {
4224:struct sta_info_tag {
4277:struct txl_buffer_control {
4283:typedef struct sta_info_env_tag sta_info_env_tag, *Psta_info_env_tag;
4285:struct sta_info_env_tag {
4289:typedef enum sta_ps_sp {
4299:typedef enum sta_mgmt_pol_upd {
4308:typedef struct in_addr in_addr, *Pin_addr;
4310:typedef ulong __uint32_t;
4312:typedef __uint32_t in_addr_t;
4314:struct in_addr {
4318:typedef struct in6_addr in6_addr, *Pin6_addr;
4320:typedef union anon_union.conflict1547_for_un anon_union.conflict1547_for_un, *Panon_union.conflict1547_for_un;
4322:union anon_union.conflict1547_for_un {
4327:struct in6_addr {
4331:typedef union anon_union.conflict1547 anon_union.conflict1547, *Panon_union.conflict1547;
4333:union anon_union.conflict1547 {
4338:typedef struct machw_mib_tag machw_mib_tag, *Pmachw_mib_tag;
4340:struct machw_mib_tag {
4395:typedef struct scan_probe_req_ie_tag scan_probe_req_ie_tag, *Pscan_probe_req_ie_tag;
4397:typedef struct tx_pbd tx_pbd, *Ptx_pbd;
4399:struct tx_pbd {
4407:struct scan_probe_req_ie_tag {
4413:typedef struct scan_env_tag scan_env_tag, *Pscan_env_tag;
4415:typedef struct scan_start_req scan_start_req, *Pscan_start_req;
4417:struct scan_start_req {
4433:struct scan_env_tag {
4442:typedef uint32_t fdt32_t;
4444:typedef uint64_t fdt64_t;
4446:typedef struct SEC_Eng_SHA256_Link_Ctx SEC_Eng_SHA256_Link_Ctx, *PSEC_Eng_SHA256_Link_Ctx;
4448:struct SEC_Eng_SHA256_Link_Ctx {
4455:typedef enum SEC_ENG_AES_ID_Type {
4459:typedef enum SEC_ENG_AES_Key_Type {
4466:typedef struct SEC_Eng_SHA_Link_Config_Type SEC_Eng_SHA_Link_Config_Type, *PSEC_Eng_SHA_Link_Config_Type;
4468:struct SEC_Eng_SHA_Link_Config_Type {
4478:typedef struct SEC_Eng_AES_Link_Config_Type SEC_Eng_AES_Link_Config_Type, *PSEC_Eng_AES_Link_Config_Type;
4480:struct SEC_Eng_AES_Link_Config_Type {
4506:typedef struct SEC_Eng_SHA256_Ctx SEC_Eng_SHA256_Ctx, *PSEC_Eng_SHA256_Ctx;
4508:struct SEC_Eng_SHA256_Ctx {
4518:typedef enum SEC_ENG_SHA_Type {
4525:typedef enum SEC_ENG_PKA_OP_Type {
4555:typedef enum SEC_ENG_AES_Key_Src_Type {
4560:typedef struct SEC_Eng_AES_Ctx SEC_Eng_AES_Ctx, *PSEC_Eng_AES_Ctx;
4562:typedef enum SEC_ENG_AES_Type {
4568:struct SEC_Eng_AES_Ctx {
4573:typedef enum SEC_ENG_AES_EnDec_Type {
4578:typedef enum SEC_ENG_SHA_ID_Type {
4582:typedef enum SEC_ENG_AES_Counter_Type {
4589:typedef enum SEC_ENG_PKA_REG_SIZE_Type {
4602:typedef enum SEC_ENG_INT_Type {
4612:typedef ulong fd_mask;
4614:typedef struct _types_fd_set _types_fd_set, *P_types_fd_set;
4616:struct _types_fd_set {
4620:typedef struct poll_arg poll_arg, *Ppoll_arg;
4622:struct poll_arg {
4626:typedef enum lwip_ip_addr_type {
4632:typedef struct MIC_Error_t MIC_Error_t, *PMIC_Error_t;
4634:typedef enum MIC_Fail_State_e {
4640:struct MIC_Error_t {
4649:typedef struct TkipPtk_t TkipPtk_t, *PTkipPtk_t;
4651:struct TkipPtk_t {
4659:typedef struct customMIB_RSNStats_t customMIB_RSNStats_t, *PcustomMIB_RSNStats_t;
4661:struct customMIB_RSNStats_t {
4667:typedef struct keyMgmtInfoSta_t keyMgmtInfoSta_t, *PkeyMgmtInfoSta_t;
4669:typedef struct cm_ConnectionInfo cm_ConnectionInfo, *Pcm_ConnectionInfo;
4671:typedef struct supplicantData supplicantData, *PsupplicantData;
4673:typedef struct CommonMlmeData_t CommonMlmeData_t, *PCommonMlmeData_t;
4675:typedef union anon_union.conflictedae_for_specDat anon_union.conflictedae_for_specDat, *Panon_union.conflictedae_for_specDat;
4677:typedef struct IEEEtypes_SsIdElement_t IEEEtypes_SsIdElement_t, *PIEEEtypes_SsIdElement_t;
4679:typedef struct SecurityParams_t SecurityParams_t, *PSecurityParams_t;
4681:typedef UINT8 IEEEtypes_SsId_t[32];
4683:typedef UINT8 IEEEtypes_Len_t;
4685:typedef UINT8 IEEEtypes_DtimPeriod_t;
4687:typedef UINT16 IEEEtypes_BcnInterval_t;
4689:typedef struct apSpecificData_t apSpecificData_t, *PapSpecificData_t;
4691:typedef enum IEEEtypes_ElementId_e {
4814:typedef struct apInfo_t apInfo_t, *PapInfo_t;
4816:typedef struct BufferDesc BufferDesc, *PBufferDesc;
4818:typedef struct BufferDesc BufferDesc_t;
4820:typedef struct ChanBandInfo_t ChanBandInfo_t, *PChanBandInfo_t;
4822:typedef struct staData_t staData_t, *PstaData_t;
4824:typedef struct BssConfig_t BssConfig_t, *PBssConfig_t;
4826:typedef struct BssData_t BssData_t, *PBssData_t;
4828:typedef union anon_union.conflictd321_for_intf anon_union.conflictd321_for_intf, *Panon_union.conflictd321_for_intf;
4830:typedef struct BandConfig_t BandConfig_t, *PBandConfig_t;
4832:typedef struct _txQingInfo_t _txQingInfo_t, *P_txQingInfo_t;
4834:typedef struct _txQingInfo_t txQingInfo_t;
4836:typedef struct apKeyMgmtInfoSta_t apKeyMgmtInfoSta_t, *PapKeyMgmtInfoSta_t;
4838:typedef struct apRsnConfig_t apRsnConfig_t, *PapRsnConfig_t;
4840:typedef enum ChanBand_e {
4846:typedef enum ChanWidth_e {
4853:typedef enum Chan2Offset_e {
4859:typedef enum ScanMode_e {
4864:typedef enum IEEEtypes_PwrMgmtMode_e {
4869:typedef struct apKeyMgmtInfoStaRom_t apKeyMgmtInfoStaRom_t, *PapKeyMgmtInfoStaRom_t;
4871:typedef struct Operation_t Operation_t, *POperation_t;
4873:typedef enum keyMgmtState_e {
4887:struct SecurityParams_t {
4893:struct apKeyMgmtInfoStaRom_t {
4902:struct apKeyMgmtInfoSta_t {
4917:struct _txQingInfo_t {
4921:struct staData_t {
4929:struct Operation_t {
4935:struct apRsnConfig_t {
4956:struct CommonMlmeData_t {
4971:struct BssConfig_t {
4978:struct IEEEtypes_SsIdElement_t {
4984:struct BandConfig_t {
4991:struct ChanBandInfo_t {
4996:struct apSpecificData_t {
5005:struct BssData_t {
5014:struct apInfo_t {
5023:struct keyMgmtInfoSta_t {
5046:struct supplicantData {
5060:union anon_union.conflictedae_for_specDat {
5064:struct cm_ConnectionInfo {
5081:union anon_union.conflictd321_for_intf {
5085:struct BufferDesc {
5093:typedef struct pka0_bit_shift_op_cfg pka0_bit_shift_op_cfg, *Ppka0_bit_shift_op_cfg;
5095:typedef union anon_union.conflict2639fb_for_value anon_union.conflict2639fb_for_value, *Panon_union.conflict2639fb_for_value;
5097:typedef struct anon_struct.conflict2639d1 anon_struct.conflict2639d1, *Panon_struct.conflict2639d1;
5099:struct anon_struct.conflict2639d1 {
5104:union anon_union.conflict2639fb_for_value {
5109:struct pka0_bit_shift_op_cfg {
5113:typedef union anon_union.conflict263803 anon_union.conflict263803, *Panon_union.conflict263803;
5115:typedef struct anon_struct.conflict26379a anon_struct.conflict26379a, *Panon_struct.conflict26379a;
5117:struct anon_struct.conflict26379a {
5126:union anon_union.conflict263803 {
5131:typedef struct pka0_common_op_first_cfg pka0_common_op_first_cfg, *Ppka0_common_op_first_cfg;
5133:typedef union anon_union.conflict263803_for_value anon_union.conflict263803_for_value, *Panon_union.conflict263803_for_value;
5135:union anon_union.conflict263803_for_value {
5140:struct pka0_common_op_first_cfg {
5144:typedef union anon_union.conflict263889 anon_union.conflict263889, *Panon_union.conflict263889;
5146:typedef struct anon_struct.conflict26383f anon_struct.conflict26383f, *Panon_struct.conflict26383f;
5148:struct anon_struct.conflict26383f {
5155:union anon_union.conflict263889 {
5160:typedef struct pka0_pld_cfg pka0_pld_cfg, *Ppka0_pld_cfg;
5162:typedef union anon_union.conflict2636c9_for_value anon_union.conflict2636c9_for_value, *Panon_union.conflict2636c9_for_value;
5164:typedef struct anon_struct.conflict263670 anon_struct.conflict263670, *Panon_struct.conflict263670;
5166:struct anon_struct.conflict263670 {
5174:union anon_union.conflict2636c9_for_value {
5179:struct pka0_pld_cfg {
5183:typedef union anon_union.conflict2638ff anon_union.conflict2638ff, *Panon_union.conflict2638ff;
5185:typedef struct anon_struct.conflict2638c5 anon_struct.conflict2638c5, *Panon_struct.conflict2638c5;
5187:struct anon_struct.conflict2638c5 {
5193:union anon_union.conflict2638ff {
5198:typedef union anon_union.conflict2636c9 anon_union.conflict2636c9, *Panon_union.conflict2636c9;
5200:union anon_union.conflict2636c9 {
5205:typedef struct pka0_common_op_snd_cfg_S1_only pka0_common_op_snd_cfg_S1_only, *Ppka0_common_op_snd_cfg_S1_only;
5207:typedef union anon_union.conflict263889_for_value anon_union.conflict263889_for_value, *Panon_union.conflict263889_for_value;
5209:union anon_union.conflict263889_for_value {
5214:struct pka0_common_op_snd_cfg_S1_only {
5218:typedef union anon_union.conflict263995 anon_union.conflict263995, *Panon_union.conflict263995;
5220:typedef struct anon_struct.conflict26393b anon_struct.conflict26393b, *Panon_struct.conflict26393b;
5222:struct anon_struct.conflict26393b {
5230:union anon_union.conflict263995 {
5235:typedef union anon_union.conflict2639fb anon_union.conflict2639fb, *Panon_union.conflict2639fb;
5237:union anon_union.conflict2639fb {
5242:typedef struct pka0_pldi_cfg pka0_pldi_cfg, *Ppka0_pldi_cfg;
5244:typedef union anon_union.conflict26375e_for_value anon_union.conflict26375e_for_value, *Panon_union.conflict26375e_for_value;
5246:union anon_union.conflict26375e_for_value {
5251:struct pka0_pldi_cfg {
5255:typedef struct pka0_common_op_snd_cfg_S2_only pka0_common_op_snd_cfg_S2_only, *Ppka0_common_op_snd_cfg_S2_only;
5257:typedef union anon_union.conflict2638ff_for_value anon_union.conflict2638ff_for_value, *Panon_union.conflict2638ff_for_value;
5259:union anon_union.conflict2638ff_for_value {
5264:struct pka0_common_op_snd_cfg_S2_only {
5268:typedef struct pka0_common_op_snd_cfg_S1_S2 pka0_common_op_snd_cfg_S1_S2, *Ppka0_common_op_snd_cfg_S1_S2;
5270:typedef union anon_union.conflict263995_for_value anon_union.conflict263995_for_value, *Panon_union.conflict263995_for_value;
5272:union anon_union.conflict263995_for_value {
5277:struct pka0_common_op_snd_cfg_S1_S2 {
5281:typedef struct _ef_env _ef_env, *P_ef_env;
5283:typedef struct _ef_env ef_env;
5285:struct _ef_env {
5291:typedef enum EfErrCode {
5303:typedef struct env_node_obj env_node_obj, *Penv_node_obj;
5305:typedef struct env_node_obj * env_node_obj_t;
5307:typedef enum env_status {
5317:typedef enum env_status env_status_t;
5319:typedef struct anon_struct.conflict185468_for_addr anon_struct.conflict185468_for_addr, *Panon_struct.conflict185468_for_addr;
5321:struct anon_struct.conflict185468_for_addr {
5326:struct env_node_obj {
5338:typedef struct dbg_mem_write_req dbg_mem_write_req, *Pdbg_mem_write_req;
5340:struct dbg_mem_write_req {
5345:typedef struct dbg_set_sev_filter_req dbg_set_sev_filter_req, *Pdbg_set_sev_filter_req;
5347:struct dbg_set_sev_filter_req {
5351:typedef struct dbg_mem_write_cfm dbg_mem_write_cfm, *Pdbg_mem_write_cfm;
5353:struct dbg_mem_write_cfm {
5358:typedef struct dbg_get_sys_stat_cfm dbg_get_sys_stat_cfm, *Pdbg_get_sys_stat_cfm;
5360:struct dbg_get_sys_stat_cfm {
5366:typedef struct dbg_mem_read_cfm dbg_mem_read_cfm, *Pdbg_mem_read_cfm;
5368:struct dbg_mem_read_cfm {
5373:typedef struct dbg_set_mod_filter_req dbg_set_mod_filter_req, *Pdbg_set_mod_filter_req;
5375:struct dbg_set_mod_filter_req {
5379:typedef enum dbg_msg_tag {
5395:typedef struct dbg_mem_read_req dbg_mem_read_req, *Pdbg_mem_read_req;
5397:struct dbg_mem_read_req {
5401:typedef struct mbedtls_pk_rsassa_pss_options mbedtls_pk_rsassa_pss_options, *Pmbedtls_pk_rsassa_pss_options;
5403:struct mbedtls_pk_rsassa_pss_options {
5411:typedef _Bool bool_l;
5413:typedef uint64_t __le64;
5415:typedef int8_t s8_l;
5417:typedef struct targ targ, *Ptarg;
5419:typedef struct AosStaticTask_t AosStaticTask_t, *PAosStaticTask_t;
5421:struct targ {
5427:struct AosStaticTask_t {
5436:typedef struct work work, *Pwork;
5438:struct work {
5444:typedef struct getopt_env getopt_env, *Pgetopt_env;
5446:struct getopt_env {
5454:typedef struct getopt_env getopt_env_t;
5456:typedef struct mbedtls_gcm_context mbedtls_gcm_context, *Pmbedtls_gcm_context;
5458:struct mbedtls_gcm_context {
5474:typedef struct TLSConnectParams TLSConnectParams, *PTLSConnectParams;
5476:struct TLSConnectParams {
5491:typedef struct Network Network, *PNetwork;
5493:typedef enum IoT_Error_t {
5555:struct Network {
5566:typedef struct anon_struct.conflictcfd0 anon_struct.conflictcfd0, *Panon_struct.conflictcfd0;
5568:struct anon_struct.conflictcfd0 {
5573:typedef struct apm apm, *Papm;
5575:typedef struct apm_start_req apm_start_req, *Papm_start_req;
5577:struct apm {
5594:struct apm_start_req {
5624:typedef struct txl_cntrl_env_tag txl_cntrl_env_tag, *Ptxl_cntrl_env_tag;
5626:typedef struct txl_list txl_list, *Ptxl_list;
5628:typedef struct tx_hd tx_hd, *Ptx_hd;
5630:typedef union anon_union.conflict9ef7_for_field_3 anon_union.conflict9ef7_for_field_3, *Panon_union.conflict9ef7_for_field_3;
5632:typedef union anon_union.conflict9f1c_for_field_4 anon_union.conflict9f1c_for_field_4, *Panon_union.conflict9f1c_for_field_4;
5634:typedef union anon_union.conflict9f41_for_field_5 anon_union.conflict9f41_for_field_5, *Panon_union.conflict9f41_for_field_5;
5636:union anon_union.conflict9ef7_for_field_3 {
5641:union anon_union.conflict9f1c_for_field_4 {
5646:union anon_union.conflict9f41_for_field_5 {
5651:struct tx_hd {
5669:struct txl_list {
5677:struct txl_cntrl_env_tag {
5685:typedef ushort __uint16_t;
5687:typedef __uint16_t in_port_t;
5689:typedef int _ssize_t;
5691:typedef _ssize_t ssize_t;
5696:typedef __uid_t uid_t;
5701:typedef __ino_t ino_t;
5706:typedef __off_t off_t;
5711:typedef __nlink_t nlink_t;
5716:typedef __gid_t gid_t;
5718:typedef __blkcnt_t blkcnt_t;
5723:typedef __mode_t mode_t;
5728:typedef __dev_t dev_t;
5730:typedef __blksize_t blksize_t;
5732:typedef struct supplicantData supplicantData_t;
5734:typedef struct wifi_event_data_ind_scan_done wifi_event_data_ind_scan_done, *Pwifi_event_data_ind_scan_done;
5736:struct wifi_event_data_ind_scan_done {
5740:typedef struct wifi_event_sm_connect_ind wifi_event_sm_connect_ind, *Pwifi_event_sm_connect_ind;
5742:struct wifi_event_sm_connect_ind {
5760:typedef struct wifi_event_sm_disconnect_ind wifi_event_sm_disconnect_ind, *Pwifi_event_sm_disconnect_ind;
5762:struct wifi_event_sm_disconnect_ind {
5769:typedef struct wifi_apm_sta_info wifi_apm_sta_info, *Pwifi_apm_sta_info;
5771:struct wifi_apm_sta_info {
5784:typedef struct wifi_event_beacon_ind wifi_event_beacon_ind, *Pwifi_event_beacon_ind;
5786:typedef struct wifi_cipher_t wifi_cipher_t, *Pwifi_cipher_t;
5788:typedef struct wifi_secmode_t wifi_secmode_t, *Pwifi_secmode_t;
5790:struct wifi_cipher_t {
5798:struct wifi_secmode_t {
5810:struct wifi_event_beacon_ind {
5828:typedef struct wifi_event wifi_event, *Pwifi_event;
5830:struct wifi_event {
5835:typedef struct wifi_event_data_ind_channel_switch wifi_event_data_ind_channel_switch, *Pwifi_event_data_ind_channel_switch;
5837:struct wifi_event_data_ind_channel_switch {
5841:typedef struct phyif_utils_recvtable_t phyif_utils_recvtable_t, *Pphyif_utils_recvtable_t;
5843:struct phyif_utils_recvtable_t {
5852:typedef struct dhcp_msg dhcp_msg, *Pdhcp_msg;
5854:typedef struct ip4_addr_packed ip4_addr_packed, *Pip4_addr_packed;
5856:typedef struct ip4_addr_packed ip4_addr_p_t;
5858:struct ip4_addr_packed {
5862:struct dhcp_msg {
5881:typedef struct dhcp dhcp, *Pdhcp;
5883:struct dhcp {
5907:typedef enum dhcp_option_idx {
5921:typedef struct phyif_utils_recvtable_priv_t phyif_utils_recvtable_priv_t, *Pphyif_utils_recvtable_priv_t;
5923:struct phyif_utils_recvtable_priv_t {
5962:typedef struct ipc_emb_env_tag ipc_emb_env_tag, *Pipc_emb_env_tag;
5964:struct ipc_emb_env_tag {
5979:typedef struct romapi_freertos_map romapi_freertos_map, *Promapi_freertos_map;
5981:struct romapi_freertos_map {
5999:typedef struct mac_hdr_long mac_hdr_long, *Pmac_hdr_long;
6001:struct mac_hdr_long {
6011:typedef struct mac_hdr_qos mac_hdr_qos, *Pmac_hdr_qos;
6013:struct mac_hdr_qos {
6023:typedef struct mac_hdr mac_hdr, *Pmac_hdr;
6025:struct mac_hdr {
6034:typedef struct eth_hdr eth_hdr, *Peth_hdr;
6036:typedef struct eth_addr eth_addr, *Peth_addr;
6038:struct eth_addr {
6042:struct eth_hdr {
6048:typedef struct mac_hdr_long_qos mac_hdr_long_qos, *Pmac_hdr_long_qos;
6050:struct mac_hdr_long_qos {
6061:typedef struct mac_hdr_ctrl mac_hdr_ctrl, *Pmac_hdr_ctrl;
6063:struct mac_hdr_ctrl {
6070:typedef struct bcn_frame bcn_frame, *Pbcn_frame;
6072:struct bcn_frame {
6080:typedef struct preq_frame preq_frame, *Ppreq_frame;
6082:struct preq_frame {
6087:typedef union byte_array byte_array, *Pbyte_array;
6089:typedef uint uintptr_t;
6091:union byte_array {
6097:typedef enum BL_IRQ_EXCEPTION_TYPE_T {
6104:typedef struct xTIME_OUT xTIME_OUT, *PxTIME_OUT;
6106:typedef struct xTIME_OUT TimeOut_t;
6108:struct xTIME_OUT {
6113:typedef enum eNotifyAction {
6121:typedef struct xTASK_STATUS xTASK_STATUS, *PxTASK_STATUS;
6123:typedef enum eTaskState {
6132:struct xTASK_STATUS {
6149:typedef struct xMEMORY_REGION xMEMORY_REGION, *PxMEMORY_REGION;
6151:typedef struct xMEMORY_REGION MemoryRegion_t;
6153:struct xMEMORY_REGION {
6159:typedef struct xTASK_STATUS TaskStatus_t;
6161:typedef struct dma_env_tag dma_env_tag, *Pdma_env_tag;
6163:struct dma_env_tag {
6167:typedef struct sm_disconnect_req sm_disconnect_req, *Psm_disconnect_req;
6169:struct sm_disconnect_req {
6175:typedef struct sm_disconnect_ind sm_disconnect_ind, *Psm_disconnect_ind;
6177:struct sm_disconnect_ind {
6183:typedef struct sm_connect_ind sm_connect_ind, *Psm_connect_ind;
6185:struct sm_connect_ind {
6210:typedef struct sm_connect_cfm sm_connect_cfm, *Psm_connect_cfm;
6212:struct sm_connect_cfm {
6216:typedef struct sm_connect_req sm_connect_req, *Psm_connect_req;
6218:struct sm_connect_req {
6243:typedef enum sm_state_tag {
6256:typedef enum sm_msg_tag {
6267:typedef enum msgTypes {
6285:typedef union MQTTHeader MQTTHeader, *PMQTTHeader;
6287:union MQTTHeader {
6291:typedef enum msgTypes MessageTypes;
6293:typedef struct lwip_select_cb lwip_select_cb, *Plwip_select_cb;
6295:typedef uint nfds_t;
6297:struct lwip_select_cb {
6309:typedef union anon_union.conflict1c7a2c anon_union.conflict1c7a2c, *Panon_union.conflict1c7a2c;
6311:union anon_union.conflict1c7a2c {
6316:typedef struct lwip_setgetsockopt_data lwip_setgetsockopt_data, *Plwip_setgetsockopt_data;
6318:typedef union anon_union.conflict1c7a2c_for_optval anon_union.conflict1c7a2c_for_optval, *Panon_union.conflict1c7a2c_for_optval;
6320:typedef u32_t socklen_t;
6322:union anon_union.conflict1c7a2c_for_optval {
6327:struct lwip_setgetsockopt_data {
6337:typedef struct lwip_sock lwip_sock, *Plwip_sock;
6339:typedef union lwip_sock_lastdata lwip_sock_lastdata, *Plwip_sock_lastdata;
6341:union lwip_sock_lastdata {
6346:struct lwip_sock {
6356:typedef struct mm_csa_counter_ind mm_csa_counter_ind, *Pmm_csa_counter_ind;
6358:struct mm_csa_counter_ind {
6363:typedef struct mm_set_edca_req mm_set_edca_req, *Pmm_set_edca_req;
6365:struct mm_set_edca_req {
6373:typedef struct mm_remain_on_channel_req mm_remain_on_channel_req, *Pmm_remain_on_channel_req;
6375:struct mm_remain_on_channel_req {
6392:typedef struct mm_force_idle_req mm_force_idle_req, *Pmm_force_idle_req;
6394:struct mm_force_idle_req {
6398:typedef struct mm_set_bssid_req mm_set_bssid_req, *Pmm_set_bssid_req;
6400:struct mm_set_bssid_req {
6405:typedef struct mm_key_add_cfm mm_key_add_cfm, *Pmm_key_add_cfm;
6407:struct mm_key_add_cfm {
6412:typedef struct mm_monitor_channel_cfm mm_monitor_channel_cfm, *Pmm_monitor_channel_cfm;
6414:struct mm_monitor_channel_cfm {
6420:typedef struct mm_remain_on_channel_cfm mm_remain_on_channel_cfm, *Pmm_remain_on_channel_cfm;
6422:struct mm_remain_on_channel_cfm {
6428:typedef struct mm_rssi_status_ind mm_rssi_status_ind, *Pmm_rssi_status_ind;
6430:struct mm_rssi_status_ind {
6436:typedef struct mm_tim_update_req mm_tim_update_req, *Pmm_tim_update_req;
6438:struct mm_tim_update_req {
6444:typedef struct mm_sta_del_req mm_sta_del_req, *Pmm_sta_del_req;
6446:struct mm_sta_del_req {
6450:typedef enum mm_msg_tag {
6553:typedef struct mm_monitor_channel_req mm_monitor_channel_req, *Pmm_monitor_channel_req;
6555:struct mm_monitor_channel_req {
6561:typedef struct mm_set_channel_req mm_set_channel_req, *Pmm_set_channel_req;
6563:struct mm_set_channel_req {
6573:typedef struct mm_set_filter_req mm_set_filter_req, *Pmm_set_filter_req;
6575:struct mm_set_filter_req {
6579:typedef struct mm_key_add_req mm_key_add_req, *Pmm_key_add_req;
6581:typedef struct mac_sec_key mac_sec_key, *Pmac_sec_key;
6583:struct mac_sec_key {
6591:struct mm_key_add_req {
6603:typedef struct mm_sta_add_req mm_sta_add_req, *Pmm_sta_add_req;
6605:struct mm_sta_add_req {
6622:typedef struct mm_set_ps_mode_req mm_set_ps_mode_req, *Pmm_set_ps_mode_req;
6624:struct mm_set_ps_mode_req {
6628:typedef struct mm_set_power_cfm mm_set_power_cfm, *Pmm_set_power_cfm;
6630:struct mm_set_power_cfm {
6635:typedef struct mm_set_vif_state_req mm_set_vif_state_req, *Pmm_set_vif_state_req;
6637:struct mm_set_vif_state_req {
6643:typedef struct mm_set_mode_req mm_set_mode_req, *Pmm_set_mode_req;
6645:struct mm_set_mode_req {
6649:typedef struct mm_start_req mm_start_req, *Pmm_start_req;
6651:typedef struct phy_cfg_tag phy_cfg_tag, *Pphy_cfg_tag;
6653:struct phy_cfg_tag {
6657:struct mm_start_req {
6665:typedef enum mm_remain_on_channel_op {
6671:typedef struct mm_chan_ctxt_update_req mm_chan_ctxt_update_req, *Pmm_chan_ctxt_update_req;
6673:struct mm_chan_ctxt_update_req {
6685:typedef struct mm_remove_if_req mm_remove_if_req, *Pmm_remove_if_req;
6687:struct mm_remove_if_req {
6691:typedef struct mm_monitor_req mm_monitor_req, *Pmm_monitor_req;
6693:struct mm_monitor_req {
6697:typedef struct mm_cfg_rssi_req mm_cfg_rssi_req, *Pmm_cfg_rssi_req;
6699:struct mm_cfg_rssi_req {
6705:typedef struct mm_version_cfm mm_version_cfm, *Pmm_version_cfm;
6707:struct mm_version_cfm {
6716:typedef struct mm_set_beacon_int_req mm_set_beacon_int_req, *Pmm_set_beacon_int_req;
6718:struct mm_set_beacon_int_req {
6724:typedef struct mm_add_if_cfm mm_add_if_cfm, *Pmm_add_if_cfm;
6726:struct mm_add_if_cfm {
6731:typedef struct mm_traffic_req_ind mm_traffic_req_ind, *Pmm_traffic_req_ind;
6733:struct mm_traffic_req_ind {
6739:typedef struct mm_set_ps_options_req mm_set_ps_options_req, *Pmm_set_ps_options_req;
6741:struct mm_set_ps_options_req {
6749:typedef struct mm_set_power_req mm_set_power_req, *Pmm_set_power_req;
6751:struct mm_set_power_req {
6756:typedef struct mm_connection_loss_ind mm_connection_loss_ind, *Pmm_connection_loss_ind;
6758:struct mm_connection_loss_ind {
6762:typedef struct mm_set_dtim_req mm_set_dtim_req, *Pmm_set_dtim_req;
6764:struct mm_set_dtim_req {
6768:typedef struct mm_bcn_change_req mm_bcn_change_req, *Pmm_bcn_change_req;
6770:struct mm_bcn_change_req {
6780:typedef struct mm_key_del_req mm_key_del_req, *Pmm_key_del_req;
6782:struct mm_key_del_req {
6786:typedef struct mm_set_channel_cfm mm_set_channel_cfm, *Pmm_set_channel_cfm;
6788:struct mm_set_channel_cfm {
6793:typedef struct mm_add_if_req mm_add_if_req, *Pmm_add_if_req;
6795:struct mm_add_if_req {
6801:typedef struct mm_ba_add_req mm_ba_add_req, *Pmm_ba_add_req;
6803:struct mm_ba_add_req {
6811:typedef struct mm_monitor_cfm mm_monitor_cfm, *Pmm_monitor_cfm;
6813:struct mm_monitor_cfm {
6819:typedef struct mm_chan_ctxt_add_req mm_chan_ctxt_add_req, *Pmm_chan_ctxt_add_req;
6821:struct mm_chan_ctxt_add_req {
6831:typedef struct mm_csa_finish_ind mm_csa_finish_ind, *Pmm_csa_finish_ind;
6833:struct mm_csa_finish_ind {
6839:typedef struct mm_csa_traffic_ind mm_csa_traffic_ind, *Pmm_csa_traffic_ind;
6841:struct mm_csa_traffic_ind {
6846:typedef struct mm_set_slottime_req mm_set_slottime_req, *Pmm_set_slottime_req;
6848:struct mm_set_slottime_req {
6852:typedef struct mm_set_basic_rates_req mm_set_basic_rates_req, *Pmm_set_basic_rates_req;
6854:struct mm_set_basic_rates_req {
6862:typedef struct mm_set_idle_req mm_set_idle_req, *Pmm_set_idle_req;
6864:struct mm_set_idle_req {
6868:typedef struct mm_sta_add_cfm mm_sta_add_cfm, *Pmm_sta_add_cfm;
6870:struct mm_sta_add_cfm {
6876:typedef struct mm_ba_add_cfm mm_ba_add_cfm, *Pmm_ba_add_cfm;
6878:struct mm_ba_add_cfm {
6884:typedef struct mm_ps_change_ind mm_ps_change_ind, *Pmm_ps_change_ind;
6886:struct mm_ps_change_ind {
6891:typedef enum mm_state_tag {
6899:typedef struct ip_globals ip_globals, *Pip_globals;
6901:typedef struct netif netif, *Pnetif;
6903:typedef enum netif_mac_filter_action {
6908:typedef struct ip_hdr ip_hdr, *Pip_hdr;
6910:struct netif {
6935:struct ip_globals {
6946:struct ip_hdr {
6959:typedef struct ke_env_tag ke_env_tag, *Pke_env_tag;
6961:typedef uint32_t evt_field_t;
6963:typedef struct mblock_free mblock_free, *Pmblock_free;
6965:struct mblock_free {
6970:struct ke_env_tag {
6978:typedef struct list_head list_head, *Plist_head;
6980:struct list_head {
6985:typedef struct hal_dma_env_tag hal_dma_env_tag, *Phal_dma_env_tag;
6987:struct hal_dma_env_tag {
6993:typedef struct dns_hdr dns_hdr, *Pdns_hdr;
6995:struct dns_hdr {
7005:typedef struct mbedtls_cipher_definition_t mbedtls_cipher_definition_t, *Pmbedtls_cipher_definition_t;
7007:struct mbedtls_cipher_definition_t {
7015:typedef struct mblock_used mblock_used, *Pmblock_used;
7017:struct mblock_used {
7021:typedef enum lwip_ieee_eth_type {
7040:typedef struct phy_channel_info phy_channel_info, *Pphy_channel_info;
7042:struct phy_channel_info {
7047:typedef struct altcp_pcb altcp_pcb, *Paltcp_pcb;
7049:typedef u16_t (* altcp_mss_fn)(struct altcp_pcb *);
7051:typedef struct altcp_functions altcp_functions, *Paltcp_functions;
7053:typedef err_t (* altcp_connected_fn)(void *, struct altcp_pcb *, err_t);
7055:typedef err_t (* altcp_accept_fn)(void *, struct altcp_pcb *, err_t);
7057:typedef void (* altcp_set_poll_fn)(struct altcp_pcb *, u8_t);
7059:typedef void (* altcp_abort_fn)(struct altcp_pcb *);
7061:typedef err_t (* altcp_close_fn)(struct altcp_pcb *);
7063:typedef err_t (* altcp_output_fn)(struct altcp_pcb *);
7065:typedef u16_t (* altcp_sndbuf_fn)(struct altcp_pcb *);
7067:typedef u16_t (* altcp_sndqueuelen_fn)(struct altcp_pcb *);
7069:typedef void (* altcp_nagle_disable_fn)(struct altcp_pcb *);
7071:typedef void (* altcp_nagle_enable_fn)(struct altcp_pcb *);
7073:typedef void (* altcp_setprio_fn)(struct altcp_pcb *, u8_t);
7075:typedef void (* altcp_dealloc_fn)(struct altcp_pcb *);
7077:struct altcp_functions {
7101:struct altcp_pcb {
7118:typedef struct dns_table_entry.conflict dns_table_entry.conflict, *Pdns_table_entry.conflict;
7120:struct dns_table_entry.conflict {
7133:typedef struct dns_query dns_query, *Pdns_query;
7135:struct dns_query {
7140:typedef struct dns_req_entry dns_req_entry, *Pdns_req_entry;
7142:struct dns_req_entry {
7147:typedef struct dns_answer dns_answer, *Pdns_answer;
7149:struct dns_answer {
7158:typedef struct memp memp, *Pmemp;
7160:struct memp {
7164:typedef struct memp_desc memp_desc, *Pmemp_desc;
7166:struct memp_desc {
7174:typedef struct __sFILE __sFILE, *P__sFILE;
7176:typedef struct _reent _reent, *P_reent;
7178:typedef long _fpos_t;
7180:typedef struct __sFILE __FILE;
7182:typedef struct __sbuf __sbuf, *P__sbuf;
7187:typedef struct _Bigint _Bigint, *P_Bigint;
7189:typedef union anon_union.conflictad7_for__new anon_union.conflictad7_for__new, *Panon_union.conflictad7_for__new;
7191:typedef struct _atexit _atexit, *P_atexit;
7193:typedef struct _glue _glue, *P_glue;
7195:typedef long _off_t;
7197:typedef int _LOCK_RECURSIVE_T;
7199:typedef _LOCK_RECURSIVE_T _flock_t;
7201:typedef struct _mbstate_t _mbstate_t, *P_mbstate_t;
7203:typedef ulong __ULong;
7205:typedef struct anon_struct.conflict94b anon_struct.conflict94b, *Panon_struct.conflict94b;
7207:typedef struct anon_struct.conflicta90 anon_struct.conflicta90, *Panon_struct.conflicta90;
7209:typedef struct _on_exit_args _on_exit_args, *P_on_exit_args;
7211:typedef union anon_union.conflict311_for___value anon_union.conflict311_for___value, *Panon_union.conflict311_for___value;
7213:typedef struct __tm __tm, *P__tm;
7215:typedef struct _rand48 _rand48, *P_rand48;
7217:typedef uint wint_t;
7219:struct _rand48 {
7225:struct _glue {
7231:struct __tm {
7243:union anon_union.conflict311_for___value {
7248:struct _mbstate_t {
7253:struct anon_struct.conflict94b {
7283:struct anon_struct.conflicta90 {
7288:union anon_union.conflictad7_for__new {
7293:struct __sbuf {
7298:struct __sFILE {
7325:struct _on_exit_args {
7332:struct _atexit {
7339:struct _reent {
7371:struct _Bigint {
7380:typedef union anon_union.conflictad7 anon_union.conflictad7, *Panon_union.conflictad7;
7382:union anon_union.conflictad7 {
7387:typedef enum hal_uart_flow_control_t {
7394:typedef enum hal_uart_int_t {
7399:typedef enum hal_uart_parity_t {
7405:typedef struct uart_config_t uart_config_t, *Puart_config_t;
7407:typedef enum hal_uart_data_width_t {
7415:typedef enum hal_uart_stop_bits_t {
7420:typedef enum hal_uart_mode_t {
7426:struct uart_config_t {
7438:typedef struct uart_dev_t uart_dev_t, *Puart_dev_t;
7440:struct uart_dev_t {
7462:typedef struct sha256_link_item sha256_link_item, *Psha256_link_item;
7464:typedef struct sha256_link_item sha256_link_item_t;
7466:struct sha256_link_item {
7476:typedef struct pbuf_rom pbuf_rom, *Ppbuf_rom;
7478:struct pbuf_rom {
7483:typedef struct pbuf_custom pbuf_custom, *Ppbuf_custom;
7485:struct pbuf_custom {
7490:typedef enum pbuf_layer {
7498:typedef enum pbuf_type {
7505:typedef struct _IoT_Mutex_t _IoT_Mutex_t, *P_IoT_Mutex_t;
7507:struct _IoT_Mutex_t {
7511:typedef struct ip4_addr_wordaligned ip4_addr_wordaligned, *Pip4_addr_wordaligned;
7513:struct ip4_addr_wordaligned {
7517:typedef struct etharp_hdr etharp_hdr, *Petharp_hdr;
7519:struct etharp_hdr {
7531:typedef enum etharp_opcode {
7536:typedef struct bl_dma_item bl_dma_item, *Pbl_dma_item;
7538:struct bl_dma_item {
7548:typedef enum SF_Ctrl_Ahb2sif_Type {
7553:typedef enum SF_Ctrl_Dmy_Mode_Type {
7559:typedef enum SF_Ctrl_Sahb_Type {
7564:typedef enum SF_Ctrl_Mode_Type {
7569:typedef struct SF_Ctrl_Cfg_Type SF_Ctrl_Cfg_Type, *PSF_Ctrl_Cfg_Type;
7571:typedef enum SF_Ctrl_Owner_Type {
7576:struct SF_Ctrl_Cfg_Type {
7588:typedef enum SF_Ctrl_IO_Type {
7596:typedef enum SF_Ctrl_Data_Mode_Type {
7602:typedef struct SF_Ctrl_Cmd_Cfg_Type SF_Ctrl_Cmd_Cfg_Type, *PSF_Ctrl_Cmd_Cfg_Type;
7604:typedef enum SF_Ctrl_Cmd_Mode_Type {
7609:typedef enum SF_Ctrl_Addr_Mode_Type {
7615:struct SF_Ctrl_Cmd_Cfg_Type {
7628:typedef enum SF_Ctrl_Pad_Sel {
7634:typedef enum SF_Ctrl_AES_Key_Type {
7641:typedef struct dma_node dma_node, *Pdma_node;
7643:struct dma_node {
7651:typedef struct dma_ctx dma_ctx, *Pdma_ctx;
7653:struct dma_ctx {
7657:typedef struct mobility_domain mobility_domain, *Pmobility_domain;
7659:struct mobility_domain {
7665:typedef struct mac_bss_info mac_bss_info, *Pmac_bss_info;
7667:typedef struct mac_edca_param_set mac_edca_param_set, *Pmac_edca_param_set;
7669:struct mac_edca_param_set {
7677:struct mac_bss_info {
7726:typedef struct me_env_tag me_env_tag, *Pme_env_tag;
7728:typedef struct me_chan_config_req me_chan_config_req, *Pme_chan_config_req;
7730:struct me_chan_config_req {
7737:struct me_env_tag {
7756:typedef struct anon_struct.conflict14adb1 anon_struct.conflict14adb1, *Panon_struct.conflict14adb1;
7758:struct anon_struct.conflict14adb1 {
7765:typedef struct anon_struct.conflict14ae7d anon_struct.conflict14ae7d, *Panon_struct.conflict14ae7d;
7767:struct anon_struct.conflict14ae7d {
7774:typedef struct anon_struct.conflict14b237 anon_struct.conflict14b237, *Panon_struct.conflict14b237;
7776:struct anon_struct.conflict14b237 {
7787:typedef struct anon_struct.conflict14af7e anon_struct.conflict14af7e, *Panon_struct.conflict14af7e;
7789:struct anon_struct.conflict14af7e {
7797:typedef struct anon_struct.conflict14ac35 anon_struct.conflict14ac35, *Panon_struct.conflict14ac35;
7799:struct anon_struct.conflict14ac35 {
7806:typedef union anon_union.conflict14b2c1 anon_union.conflict14b2c1, *Panon_union.conflict14b2c1;
7808:typedef struct anon_struct.conflict14b020 anon_struct.conflict14b020, *Panon_struct.conflict14b020;
7810:typedef struct anon_struct.conflict14b0c1 anon_struct.conflict14b0c1, *Panon_struct.conflict14b0c1;
7812:typedef struct anon_struct.conflict14b0f8 anon_struct.conflict14b0f8, *Panon_struct.conflict14b0f8;
7814:typedef struct anon_struct.conflict14b146 anon_struct.conflict14b146, *Panon_struct.conflict14b146;
7816:typedef struct anon_struct.conflict14b1bf anon_struct.conflict14b1bf, *Panon_struct.conflict14b1bf;
7818:struct anon_struct.conflict14b0f8 {
7823:struct anon_struct.conflict14b1bf {
7829:struct anon_struct.conflict14b0c1 {
7834:struct anon_struct.conflict14b020 {
7840:struct anon_struct.conflict14b146 {
7847:union anon_union.conflict14b2c1 {
7867:typedef struct ieee80211_mgmt ieee80211_mgmt, *Pieee80211_mgmt;
7869:typedef union anon_union.conflict14b3ce_for_u anon_union.conflict14b3ce_for_u, *Panon_union.conflict14b3ce_for_u;
7871:typedef struct anon_struct.conflict14ac87 anon_struct.conflict14ac87, *Panon_struct.conflict14ac87;
7873:typedef struct anon_struct.conflict14aca0 anon_struct.conflict14aca0, *Panon_struct.conflict14aca0;
7875:typedef struct anon_struct.conflict14ad36 anon_struct.conflict14ad36, *Panon_struct.conflict14ad36;
7877:typedef struct anon_struct.conflict14b3a9 anon_struct.conflict14b3a9, *Panon_struct.conflict14b3a9;
7879:typedef union anon_union.conflict14b2c1_for_u anon_union.conflict14b2c1_for_u, *Panon_union.conflict14b2c1_for_u;
7881:union anon_union.conflict14b2c1_for_u {
7901:struct anon_struct.conflict14ac87 {
7905:struct anon_struct.conflict14b3a9 {
7910:struct anon_struct.conflict14aca0 {
7916:struct anon_struct.conflict14ad36 {
7923:union anon_union.conflict14b3ce_for_u {
7937:struct ieee80211_mgmt {
7947:typedef enum ieee80211_reasoncode {
7999:typedef union anon_union.conflict14b3ce anon_union.conflict14b3ce, *Panon_union.conflict14b3ce;
8001:union anon_union.conflict14b3ce {
8015:typedef struct ke_msg_handler ke_msg_handler, *Pke_msg_handler;
8017:struct ke_msg_handler {
8024:typedef struct ke_state_handler ke_state_handler, *Pke_state_handler;
8026:struct ke_state_handler {
8033:typedef struct ke_task_desc ke_task_desc, *Pke_task_desc;
8035:struct ke_task_desc {
8043:typedef union anon_union.conflict97f3 anon_union.conflict97f3, *Panon_union.conflict97f3;
8045:union anon_union.conflict97f3 {
8050:typedef struct _uart_ioctrl_config _uart_ioctrl_config, *P_uart_ioctrl_config;
8052:typedef struct _uart_ioctrl_config uart_ioc_config_t;
8054:typedef enum ioc_uart_parity_t {
8060:struct _uart_ioctrl_config {
8068:typedef struct _uart_ioctrl_wait_read _uart_ioctrl_wait_read, *P_uart_ioctrl_wait_read;
8070:struct _uart_ioctrl_wait_read {
8076:typedef struct _uart_ioctrl_wait_read uart_ioc_waitread_t;
8078:typedef struct aos_dirent_t aos_dirent_t, *Paos_dirent_t;
8080:struct aos_dirent_t { // Missing member d_name : char[1] at offset 0x5 [Unsupported interior flex array: char[1]]
8088:typedef struct aos_dir_t aos_dir_t, *Paos_dir_t;
8090:struct aos_dir_t {
8095:typedef struct statfs statfs, *Pstatfs;
8097:struct statfs {
8109:typedef struct etharp_entry etharp_entry, *Petharp_entry;
8111:struct etharp_entry {
8123:typedef enum etharp_state {
8131:typedef ushort UHWtype;
8133:typedef struct bl_custom_pbuf bl_custom_pbuf, *Pbl_custom_pbuf;
8135:struct bl_custom_pbuf {
8140:typedef struct bl_custom_pbuf bl_custom_pbuf_t;
8142:typedef struct anon_struct.conflict1ae139 anon_struct.conflict1ae139, *Panon_struct.conflict1ae139;
8144:typedef struct PtTable_Stuff_Config PtTable_Stuff_Config, *PPtTable_Stuff_Config;
8146:typedef struct PtTable_Config PtTable_Config, *PPtTable_Config;
8148:typedef struct PtTable_Entry_Config PtTable_Entry_Config, *PPtTable_Entry_Config;
8150:struct PtTable_Config {
8158:struct PtTable_Entry_Config {
8169:struct PtTable_Stuff_Config {
8175:struct anon_struct.conflict1ae139 {
8181:typedef struct la_mem_format la_mem_format, *Pla_mem_format;
8183:struct la_mem_format {
8187:typedef struct HALPartition_Entry_Config HALPartition_Entry_Config, *PHALPartition_Entry_Config;
8189:struct HALPartition_Entry_Config {
8200:typedef enum HAL_Err_Type {
8205:typedef struct mbedtls_asn1_bitstring mbedtls_asn1_bitstring, *Pmbedtls_asn1_bitstring;
8207:typedef struct mbedtls_asn1_bitstring mbedtls_x509_bitstring;
8209:struct mbedtls_asn1_bitstring {
8218:typedef enum bl_dev_flag {
8224:typedef struct NoHostSecurityParams_t NoHostSecurityParams_t, *PNoHostSecurityParams_t;
8226:struct NoHostSecurityParams_t {
8233:typedef ulonglong UDItype;
8235:typedef uchar UQItype;
8237:typedef int shift_count_type;
8239:typedef uint USItype;
8241:typedef struct DWstruct DWstruct, *PDWstruct;
8243:typedef int SItype;
8245:struct DWstruct {
8250:typedef longlong DItype;
8252:typedef union DWunion DWunion, *PDWunion;
8254:union DWunion {
8259:typedef float SFtype;
8261:typedef struct phy_hal_tag phy_hal_tag, *Pphy_hal_tag;
8263:struct phy_hal_tag {
8269:typedef struct QueueDefinition xQUEUE;
8271:typedef struct QUEUE_REGISTRY_ITEM QUEUE_REGISTRY_ITEM, *PQUEUE_REGISTRY_ITEM;
8273:typedef struct QUEUE_REGISTRY_ITEM xQueueRegistryItem;
8275:typedef xQueueRegistryItem QueueRegistryItem_t;
8277:struct QUEUE_REGISTRY_ITEM {
8282:typedef xQUEUE Queue_t;
8284:typedef union anon_union.conflict18e1c3 anon_union.conflict18e1c3, *Panon_union.conflict18e1c3;
8286:union anon_union.conflict18e1c3 {
8291:typedef struct event_list_node_t event_list_node_t, *Pevent_list_node_t;
8293:typedef struct input_event_t input_event_t, *Pinput_event_t;
8295:struct event_list_node_t {
8304:struct input_event_t {
8312:typedef struct anon_struct.conflict235c05 anon_struct.conflict235c05, *Panon_struct.conflict235c05;
8314:struct anon_struct.conflict235c05 {
8319:typedef enum ehttpc_parse_state {
8325:typedef enum ehttpc_parse_state httpc_parse_state_t;
8327:typedef struct _httpc_state _httpc_state, *P_httpc_state;
8329:typedef struct _httpc_connection.conflict _httpc_connection.conflict, *P_httpc_connection.conflict;
8331:typedef enum ehttpc_result {
8344:typedef enum ehttpc_result httpc_result_t;
8346:typedef struct _httpc_state httpc_state_t;
8348:typedef struct _httpc_connection.conflict httpc_connection_t.conflict;
8350:typedef struct altcp_allocator_s altcp_allocator_s, *Paltcp_allocator_s;
8352:typedef struct altcp_allocator_s altcp_allocator_t;
8354:struct _httpc_connection.conflict {
8369:struct altcp_allocator_s {
8374:struct _httpc_state {
8396:typedef enum BL_AHB_Slave1_Type {
8423:typedef struct Bl_MD5_CTX Bl_MD5_CTX, *PBl_MD5_CTX;
8425:struct Bl_MD5_CTX {
8432:typedef struct mbedtls_md5_context mbedtls_md5_context, *Pmbedtls_md5_context;
8434:struct mbedtls_md5_context {
8440:typedef struct _httpc_connection _httpc_connection, *P_httpc_connection;
8442:typedef struct _httpc_connection httpc_connection_t;
8444:struct _httpc_connection {
8459:typedef struct rvec_t rvec_t, *Prvec_t;
8461:struct rvec_t {
8501:typedef struct input_t input_t, *Pinput_t;
8503:struct input_t {
8515:typedef struct pa_state_t pa_state_t, *Ppa_state_t;
8517:struct pa_state_t {
8553:typedef struct sm_env_tag sm_env_tag, *Psm_env_tag;
8555:struct sm_env_tag {
8569:typedef struct dns_api_msg dns_api_msg, *Pdns_api_msg;
8571:struct dns_api_msg {
8578:typedef union anon_union.conflict202275 anon_union.conflict202275, *Panon_union.conflict202275;
8580:union anon_union.conflict202275 {
8591:typedef union anon_union.conflict1c5cf5 anon_union.conflict1c5cf5, *Panon_union.conflict1c5cf5;
8593:typedef struct anon_struct.conflict1c5c54 anon_struct.conflict1c5c54, *Panon_struct.conflict1c5c54;
8595:typedef struct anon_struct.conflict1c5cab anon_struct.conflict1c5cab, *Panon_struct.conflict1c5cab;
8597:typedef struct anon_struct.conflict1c5ccf anon_struct.conflict1c5ccf, *Panon_struct.conflict1c5ccf;
8599:typedef err_t (* netif_init_fn)(struct netif *);
8601:typedef void (* netifapi_void_fn)(struct netif *);
8603:typedef err_t (* netifapi_errt_fn)(struct netif *);
8605:struct anon_struct.conflict1c5c54 {
8614:struct anon_struct.conflict1c5cab {
8619:struct anon_struct.conflict1c5ccf {
8627:union anon_union.conflict1c5cf5 {
8633:typedef struct netifapi_msg netifapi_msg, *Pnetifapi_msg;
8635:typedef struct tcpip_api_call_data tcpip_api_call_data, *Ptcpip_api_call_data;
8637:typedef union anon_union.conflict1c5cf5_for_msg anon_union.conflict1c5cf5_for_msg, *Panon_union.conflict1c5cf5_for_msg;
8639:union anon_union.conflict1c5cf5_for_msg {
8645:struct tcpip_api_call_data {
8653:struct netifapi_msg {
8659:typedef struct jsonStruct jsonStruct, *PjsonStruct;
8661:typedef struct jsonStruct jsonStruct_t;
8663:typedef enum JsonPrimitiveType {
8677:struct jsonStruct {
8688:typedef struct utils_memp_node utils_memp_node, *Putils_memp_node;
8690:struct utils_memp_node {
8694:typedef struct pool pool, *Ppool;
8696:typedef struct pool utils_memp_pool_t;
8698:struct pool {
8712:typedef struct ke_timer ke_timer, *Pke_timer;
8714:struct ke_timer {
8721:typedef struct anon_struct.conflict1ba5ac anon_struct.conflict1ba5ac, *Panon_struct.conflict1ba5ac;
8723:struct anon_struct.conflict1ba5ac {
8728:typedef struct igmp_group igmp_group, *Pigmp_group;
8730:struct igmp_group {
8742:typedef struct igmp_msg igmp_msg, *Pigmp_msg;
8744:struct igmp_msg {
8751:typedef struct _rom_dir_t _rom_dir_t, *P_rom_dir_t;
8753:typedef struct _rom_dir_t romfs_dir_t;
8755:struct _rom_dir_t {
8763:typedef struct romfh romfh, *Promfh;
8765:struct romfh {
8772:typedef struct anon_struct.conflict1855c3 anon_struct.conflict1855c3, *Panon_struct.conflict1855c3;
8774:struct anon_struct.conflict1855c3 {
8779:typedef struct anon_struct.conflict185639 anon_struct.conflict185639, *Panon_struct.conflict185639;
8781:typedef enum sector_store_status {
8789:typedef enum sector_store_status sector_store_status_t;
8791:typedef enum sector_dirty_status {
8799:typedef enum sector_dirty_status sector_dirty_status_t;
8801:struct anon_struct.conflict185639 {
8806:typedef struct env_hdr_data env_hdr_data, *Penv_hdr_data;
8808:struct env_hdr_data {
8823:typedef struct env_hdr_data * env_hdr_data_t;
8825:typedef struct sector_meta_data sector_meta_data, *Psector_meta_data;
8827:typedef struct anon_struct.conflict185639_for_status anon_struct.conflict185639_for_status, *Panon_struct.conflict185639_for_status;
8829:struct anon_struct.conflict185639_for_status {
8834:struct sector_meta_data {
8845:typedef struct sector_cache_node sector_cache_node, *Psector_cache_node;
8847:struct sector_cache_node {
8852:typedef struct env_cache_node env_cache_node, *Penv_cache_node;
8854:struct env_cache_node {
8860:typedef struct sector_hdr_data sector_hdr_data, *Psector_hdr_data;
8862:typedef struct anon_struct.conflict1855c3_for_status_table anon_struct.conflict1855c3_for_status_table, *Panon_struct.conflict1855c3_for_status_table;
8864:struct anon_struct.conflict1855c3_for_status_table {
8869:struct sector_hdr_data {
8878:typedef struct sector_meta_data * sector_meta_data_t;
8880:typedef struct StreamBufferDef_t StreamBufferDef_t, *PStreamBufferDef_t;
8882:typedef struct StreamBufferDef_t * StreamBufferHandle_t;
8884:struct StreamBufferDef_t {
8899:typedef struct txdesc txdesc, *Ptxdesc;
8901:typedef struct umacdesc umacdesc, *Pumacdesc;
8903:typedef struct lmacdesc lmacdesc, *Plmacdesc;
8905:typedef struct tx_hw_desc tx_hw_desc, *Ptx_hw_desc;
8907:typedef struct tx_cfm_tag tx_cfm_tag, *Ptx_cfm_tag;
8909:typedef struct tx_agg_desc tx_agg_desc, *Ptx_agg_desc;
8911:typedef struct txl_buffer_tag txl_buffer_tag, *Ptxl_buffer_tag;
8913:struct txl_buffer_tag {
8934:struct umacdesc {
8946:struct lmacdesc {
8952:struct tx_cfm_tag {
8962:struct tx_hw_desc {
8967:struct txdesc {
8977:struct tx_agg_desc {
8981:typedef long __suseconds_t;
8983:typedef __suseconds_t suseconds_t;
8985:typedef struct timeval timeval, *Ptimeval;
8987:typedef longlong __int_least64_t;
8989:typedef __int_least64_t time_t;
8991:struct timeval {
9000:typedef enum bl_cmd_mgr_state {
9006:typedef struct bl_cmd_mgr bl_cmd_mgr, *Pbl_cmd_mgr;
9008:typedef struct bl_cmd bl_cmd, *Pbl_cmd;
9010:typedef struct bl_hw bl_hw, *Pbl_hw;
9012:typedef SemaphoreHandle_t os_mutex_t;
9014:typedef u16 lmac_msg_id_t;
9016:typedef struct lmac_msg lmac_msg, *Plmac_msg;
9018:typedef StaticEventGroup_t os_event_t;
9020:typedef struct ipc_host_env_tag ipc_host_env_tag, *Pipc_host_env_tag;
9022:typedef struct bl_stats bl_stats, *Pbl_stats;
9024:typedef struct bl_vif bl_vif, *Pbl_vif;
9026:typedef struct bl_sta bl_sta, *Pbl_sta;
9028:typedef struct bl_mod_params bl_mod_params, *Pbl_mod_params;
9030:typedef enum RWNX_INTERFACE_STATUS {
9035:typedef u16 lmac_task_id_t;
9037:typedef struct ipc_host_cb_tag ipc_host_cb_tag, *Pipc_host_cb_tag;
9039:typedef struct ipc_hostbuf ipc_hostbuf, *Pipc_hostbuf;
9041:typedef struct net_device_stats net_device_stats, *Pnet_device_stats;
9043:typedef union anon_union.conflict13e08d_for_field_13 anon_union.conflict13e08d_for_field_13, *Panon_union.conflict13e08d_for_field_13;
9045:typedef struct anon_struct.conflict13def8 anon_struct.conflict13def8, *Panon_struct.conflict13def8;
9047:typedef struct anon_struct.conflict13df24 anon_struct.conflict13df24, *Panon_struct.conflict13df24;
9049:typedef struct anon_struct.conflict13df9f anon_struct.conflict13df9f, *Panon_struct.conflict13df9f;
9051:typedef struct bl_bcn bl_bcn, *Pbl_bcn;
9053:struct bl_bcn {
9068:struct bl_mod_params {
9117:struct net_device_stats {
9143:struct anon_struct.conflict13df9f {
9148:struct anon_struct.conflict13def8 {
9153:struct anon_struct.conflict13df24 {
9172:union anon_union.conflict13e08d_for_field_13 {
9178:struct bl_vif {
9198:struct lmac_msg {
9206:struct bl_stats {
9217:struct ipc_host_cb_tag {
9228:struct ipc_hostbuf {
9233:struct bl_cmd {
9247:struct bl_cmd_mgr {
9264:struct ipc_host_env_tag {
9301:struct bl_sta {
9320:struct bl_hw {
9346:typedef struct uart_priv_data uart_priv_data, *Puart_priv_data;
9348:typedef struct uart_priv_data uart_priv_data_t;
9350:struct uart_priv_data {
9354:typedef struct _feature_pin _feature_pin, *P_feature_pin;
9356:struct _feature_pin {
9365:typedef struct bl_uart_notify bl_uart_notify, *Pbl_uart_notify;
9367:struct bl_uart_notify {
9374:typedef struct bl_uart_notify bl_uart_notify_t;
9376:typedef struct StreamBufferDef_t StreamBuffer_t;
9378:typedef struct apm_conf_max_sta_req apm_conf_max_sta_req, *Papm_conf_max_sta_req;
9380:struct apm_conf_max_sta_req {
9384:typedef struct apm_sta_del_ind apm_sta_del_ind, *Papm_sta_del_ind;
9386:struct apm_sta_del_ind {
9390:typedef struct apm_sta_del_req apm_sta_del_req, *Papm_sta_del_req;
9392:struct apm_sta_del_req {
9397:typedef struct apm_start_cac_req apm_start_cac_req, *Papm_start_cac_req;
9399:struct apm_start_cac_req {
9411:typedef struct apm_start_cfm apm_start_cfm, *Papm_start_cfm;
9413:struct apm_start_cfm {
9420:typedef struct apm_sta_add_ind apm_sta_add_ind, *Papm_sta_add_ind;
9422:struct apm_sta_add_ind {
9439:typedef struct apm_sta_del_cfm apm_sta_del_cfm, *Papm_sta_del_cfm;
9441:struct apm_sta_del_cfm {
9447:typedef struct apm_stop_req apm_stop_req, *Papm_stop_req;
9449:struct apm_stop_req {
9453:typedef enum apm_msg_tag {
9472:typedef enum apm_state_tag {
9479:typedef struct apm_start_cac_cfm apm_start_cac_cfm, *Papm_start_cac_cfm;
9481:struct apm_start_cac_cfm {
9486:typedef struct apm_stop_cac_req apm_stop_cac_req, *Papm_stop_cac_req;
9488:struct apm_stop_cac_req {
9492:typedef struct UART_CFG_Type UART_CFG_Type, *PUART_CFG_Type;
9494:typedef enum UART_DataBits_Type {
9501:typedef enum UART_StopBits_Type {
9507:typedef enum UART_Parity_Type {
9513:typedef enum UART_ByteBitInverse_Type {
9518:struct UART_CFG_Type {
9531:typedef enum UART_Overflow_Type {
9538:typedef struct UART_IrCfg_Type UART_IrCfg_Type, *PUART_IrCfg_Type;
9540:struct UART_IrCfg_Type {
9550:typedef struct UART_FifoCfg_Type UART_FifoCfg_Type, *PUART_FifoCfg_Type;
9552:struct UART_FifoCfg_Type {
9559:typedef enum UART_ID_Type {
9565:typedef enum UART_INT_Type {
9577:typedef enum UART_AutoBaudDetection_Type {
9582:typedef enum UART_Direction_Type {
9588:typedef union anon_union.conflict13e08d anon_union.conflict13e08d, *Panon_union.conflict13e08d;
9590:union anon_union.conflict13e08d {
9596:typedef struct ethhdr ethhdr, *Pethhdr;
9598:struct ethhdr {
9604:typedef enum ieee80211_vht_mcs_support {
9611:typedef struct txl_frame_desc_tag txl_frame_desc_tag, *Ptxl_frame_desc_tag;
9613:typedef struct txl_frame_cfm_tag txl_frame_cfm_tag, *Ptxl_frame_cfm_tag;
9615:struct txl_frame_cfm_tag {
9620:struct txl_frame_desc_tag {
9629:typedef struct txl_frame_env_tag txl_frame_env_tag, *Ptxl_frame_env_tag;
9631:struct txl_frame_env_tag {
9636:typedef struct chan_ctxt_tag chan_ctxt_tag, *Pchan_ctxt_tag;
9638:struct chan_ctxt_tag {
9653:typedef enum chan_tbtt_status {
9660:typedef struct chan_env_tag chan_env_tag, *Pchan_env_tag;
9662:struct chan_env_tag {
9681:typedef enum chan_env_status_bit {
9692:typedef struct chan_tbtt_tag chan_tbtt_tag, *Pchan_tbtt_tag;
9694:struct chan_tbtt_tag {
9703:typedef enum chan_ctxt_status {
9714:typedef struct txl_cfm_env_tag txl_cfm_env_tag, *Ptxl_cfm_env_tag;
9716:struct txl_cfm_env_tag {
9720:typedef struct icmp_echo_hdr icmp_echo_hdr, *Picmp_echo_hdr;
9722:struct icmp_echo_hdr {
9730:typedef enum icmp_dur_type {
9739:typedef enum rxu_msg_tag {
9744:typedef struct rxu_mgt_ind rxu_mgt_ind, *Prxu_mgt_ind;
9746:struct rxu_mgt_ind {
9764:typedef struct ota_header ota_header, *Pota_header;
9766:typedef union anon_union.conflict17c8f7_for_u anon_union.conflict17c8f7_for_u, *Panon_union.conflict17c8f7_for_u;
9768:typedef struct anon_struct.conflict17c862 anon_struct.conflict17c862, *Panon_struct.conflict17c862;
9770:struct anon_struct.conflict17c862 {
9780:union anon_union.conflict17c8f7_for_u {
9785:struct ota_header {
9789:typedef struct ota_header ota_header_t;
9791:typedef union anon_union.conflict17c8f7 anon_union.conflict17c8f7, *Panon_union.conflict17c8f7;
9793:union anon_union.conflict17c8f7 {
9798:typedef struct wifi_pkt wifi_pkt, *Pwifi_pkt;
9800:struct wifi_pkt {
9806:typedef struct llc_snap llc_snap, *Pllc_snap;
9808:struct llc_snap {
9815:typedef struct llc_snap_short llc_snap_short, *Pllc_snap_short;
9817:struct llc_snap_short {
9823:typedef struct yloop_ctx_t yloop_ctx_t, *Pyloop_ctx_t;
9825:typedef struct yloop_sock_t yloop_sock_t, *Pyloop_sock_t;
9827:struct yloop_ctx_t {
9841:struct yloop_sock_t {
9847:typedef void * aos_loop_t;
9849:typedef struct wifi_mgmr_ap_item wifi_mgmr_ap_item, *Pwifi_mgmr_ap_item;
9851:typedef struct wifi_mgmr_ap_item wifi_mgmr_ap_item_t;
9853:struct wifi_mgmr_ap_item {
9869:typedef enum WIFI_STATE_ENUM_LIST {
9887:typedef struct wifi_sta_basic_info wifi_sta_basic_info, *Pwifi_sta_basic_info;
9889:struct wifi_sta_basic_info {
9902:typedef struct wifi_conf wifi_conf, *Pwifi_conf;
9904:typedef struct wifi_conf wifi_conf_t;
9906:struct wifi_conf {
9912:typedef struct wifi_mgmr_sta_connect_ind_stat_info wifi_mgmr_sta_connect_ind_stat_info, *Pwifi_mgmr_sta_connect_ind_stat_info;
9914:typedef struct wifi_mgmr_sta_connect_ind_stat_info wifi_mgmr_sta_connect_ind_stat_info_t;
9916:struct wifi_mgmr_sta_connect_ind_stat_info {
9928:typedef void * wifi_interface_t;
9930:typedef enum WIFI_SCAN_DONE_EVENT_TYPE {
9935:typedef struct rx_cntrl_pm_mon rx_cntrl_pm_mon, *Prx_cntrl_pm_mon;
9937:struct rx_cntrl_pm_mon {
9943:typedef struct rx_cntrl_ipcdesc rx_cntrl_ipcdesc, *Prx_cntrl_ipcdesc;
9945:struct rx_cntrl_ipcdesc {
9949:typedef struct rxu_cntrl_env_tag rxu_cntrl_env_tag, *Prxu_cntrl_env_tag;
9951:typedef struct rx_cntrl_rx_status rx_cntrl_rx_status, *Prx_cntrl_rx_status;
9953:typedef struct rx_cntrl_dupli rx_cntrl_dupli, *Prx_cntrl_dupli;
9955:struct rx_cntrl_dupli {
9960:struct rx_cntrl_rx_status {
9990:struct rxu_cntrl_env_tag {
10007:typedef enum rx_status_bits {
10016:typedef struct rxu_mic_calc rxu_mic_calc, *Prxu_mic_calc;
10018:typedef struct mic_calc mic_calc, *Pmic_calc;
10020:struct mic_calc {
10030:struct rxu_mic_calc {
10035:typedef enum rxu_cntrl_frame_info_pos {
10041:typedef struct A_BLOCK_LINK A_BLOCK_LINK, *PA_BLOCK_LINK;
10043:struct A_BLOCK_LINK {
10048:typedef struct A_BLOCK_LINK BlockLink_t;
10050:typedef struct fdt_header fdt_header, *Pfdt_header;
10052:struct fdt_header {
10065:typedef struct fdt_reserve_entry fdt_reserve_entry, *Pfdt_reserve_entry;
10067:struct fdt_reserve_entry {
10072:typedef struct fdt_property fdt_property, *Pfdt_property;
10074:struct fdt_property {
10081:typedef struct fdt_node_header fdt_node_header, *Pfdt_node_header;
10083:struct fdt_node_header {
10088:typedef struct yloop_timeout_s yloop_timeout_s, *Pyloop_timeout_s;
10090:typedef struct yloop_timeout_s yloop_timeout_t;
10092:struct yloop_timeout_s {
10104:typedef struct mbedtls_rsa_context mbedtls_rsa_context, *Pmbedtls_rsa_context;
10106:struct mbedtls_rsa_context {
10126:typedef struct anon_struct.conflict1227f3 anon_struct.conflict1227f3, *Panon_struct.conflict1227f3;
10128:struct anon_struct.conflict1227f3 {
10133:typedef struct cfg_start_cfm cfg_start_cfm, *Pcfg_start_cfm;
10135:struct cfg_start_cfm {
10139:typedef struct anon_struct.conflict89a93 anon_struct.conflict89a93, *Panon_struct.conflict89a93;
10141:struct anon_struct.conflict89a93 {
10148:typedef union anon_union.conflict122886 anon_union.conflict122886, *Panon_union.conflict122886;
10150:union anon_union.conflict122886 {
10156:typedef enum cfg_msg_tag {
10162:typedef struct cfg_start_req cfg_start_req, *Pcfg_start_req;
10164:struct cfg_start_req { // Missing member u : anon_union.conflict122886_for_u at offset 0x4 [exceeds parent struct len]
10168:typedef struct anon_struct.conflict12283b anon_struct.conflict12283b, *Panon_struct.conflict12283b;
10170:struct anon_struct.conflict12283b {
10178:typedef enum cfg_state_tag {
10183:typedef void (* altcp_err_fn.conflict)(void *, err_t);
10185:typedef enum bam_state_tag {
10194:typedef union tcp_listen_pcbs_t tcp_listen_pcbs_t, *Ptcp_listen_pcbs_t;
10196:union tcp_listen_pcbs_t {
10201:typedef struct co_read16_struct co_read16_struct, *Pco_read16_struct;
10203:struct co_read16_struct {
10207:typedef struct co_read32_struct co_read32_struct, *Pco_read32_struct;
10209:struct co_read32_struct {
10213:typedef union anon_union.conflictd321 anon_union.conflictd321, *Panon_union.conflictd321;
10215:union anon_union.conflictd321 {
10220:typedef struct TIMER_CFG_Type TIMER_CFG_Type, *PTIMER_CFG_Type;
10222:typedef enum TIMER_Chan_Type {
10228:typedef enum TIMER_ClkSrc_Type {
10235:typedef enum TIMER_PreLoad_Trig_Type {
10242:typedef enum TIMER_CountMode_Type {
10247:struct TIMER_CFG_Type {
10262:typedef enum WDT_INT_Type {
10267:typedef enum TIMER_INT_Type {
10274:typedef enum TIMER_Comp_ID_Type {
10280:typedef struct DMA_LLI_Ctrl_Type DMA_LLI_Ctrl_Type, *PDMA_LLI_Ctrl_Type;
10282:typedef struct DMA_Control_Reg DMA_Control_Reg, *PDMA_Control_Reg;
10284:struct DMA_Control_Reg {
10298:struct DMA_LLI_Ctrl_Type {
10305:typedef struct DMA_LLI_Cfg_Type DMA_LLI_Cfg_Type, *PDMA_LLI_Cfg_Type;
10307:typedef enum DMA_Trans_Dir_Type {
10314:typedef enum DMA_Periph_Req_Type {
10328:struct DMA_LLI_Cfg_Type {
10334:typedef enum DMA_INT_Type {
10340:typedef enum DMA_Burst_Size_Type {
10347:typedef enum DMA_Chan_Type {
10355:typedef struct DMA_Channel_Cfg_Type DMA_Channel_Cfg_Type, *PDMA_Channel_Cfg_Type;
10357:typedef enum DMA_Trans_Width_Type {
10363:struct DMA_Channel_Cfg_Type {
10381:typedef struct DMA_LLI_PP_Buf DMA_LLI_PP_Buf, *PDMA_LLI_PP_Buf;
10383:struct DMA_LLI_PP_Buf {
10392:typedef struct DMA_LLI_PP_Struct DMA_LLI_PP_Struct, *PDMA_LLI_PP_Struct;
10394:struct DMA_LLI_PP_Struct {
10409:typedef struct tskTaskControlBlock tskTCB;
10411:typedef tskTCB TCB_t;
10413:typedef union _FP_UNION_S _FP_UNION_S, *P_FP_UNION_S;
10415:typedef struct anon_struct.conflict2d3f15 anon_struct.conflict2d3f15, *Panon_struct.conflict2d3f15;
10417:struct anon_struct.conflict2d3f15 {
10423:union _FP_UNION_S {
10428:typedef SemaphoreHandle_t sys_mutex_t;
10430:typedef TaskHandle_t sys_thread_t;
10432:typedef int sys_prot_t;
10434:typedef enum BL_Mask_Type {
10439:typedef enum BL_Sts_Type {
10444:typedef enum BL_Err_Type {
10450:typedef struct scan_cancel_cfm scan_cancel_cfm, *Pscan_cancel_cfm;
10452:struct scan_cancel_cfm {
10456:typedef struct scan_start_cfm scan_start_cfm, *Pscan_start_cfm;
10458:struct scan_start_cfm {
10462:typedef enum scan_state_tag {
10470:typedef enum scan_msg_tag {
10480:typedef struct rfc_status_tag rfc_status_tag, *Prfc_status_tag;
10482:struct rfc_status_tag {
10526:typedef struct utils_time_date_t utils_time_date_t, *Putils_time_date_t;
10528:struct utils_time_date_t {
10542:typedef enum mm_msg_tag.conflict {
10642:typedef struct mm_set_denoise_req mm_set_denoise_req, *Pmm_set_denoise_req;
10644:struct mm_set_denoise_req {
10648:typedef struct scanu_result_ind scanu_result_ind, *Pscanu_result_ind;
10650:struct scanu_result_ind {
10668:typedef enum tdls_msg_tag {
10681:typedef struct mm_channel_switch_ind mm_channel_switch_ind, *Pmm_channel_switch_ind;
10683:struct mm_channel_switch_ind {
10690:typedef enum mesh_msg_tag {
10711:typedef struct adc_ctx adc_ctx, *Padc_ctx;
10713:typedef struct adc_ctx adc_ctx_t;
10715:struct adc_ctx {
10725:typedef enum _ClientState {
10742:typedef enum _ClientState ClientState;
10744:typedef struct _MessageHandlers _MessageHandlers, *P_MessageHandlers;
10746:typedef struct _Client _Client, *P_Client;
10748:typedef struct _Client AWS_IoT_Client;
10750:typedef struct IoT_Publish_Message_Params IoT_Publish_Message_Params, *PIoT_Publish_Message_Params;
10752:typedef enum QoS {
10757:typedef struct _ClientStatus _ClientStatus, *P_ClientStatus;
10759:typedef struct _ClientStatus ClientStatus;
10761:typedef struct _ClientData _ClientData, *P_ClientData;
10763:typedef struct _ClientData ClientData;
10765:typedef struct _IoT_Mutex_t IoT_Mutex_t;
10767:typedef struct IoT_Client_Connect_Params IoT_Client_Connect_Params, *PIoT_Client_Connect_Params;
10769:typedef struct _MessageHandlers MessageHandlers;
10771:typedef enum MQTT_Ver_t {
10775:typedef struct IoT_MQTT_Will_Options IoT_MQTT_Will_Options, *PIoT_MQTT_Will_Options;
10777:struct _MessageHandlers {
10786:struct IoT_MQTT_Will_Options {
10798:struct IoT_Client_Connect_Params {
10822:struct _ClientData {
10851:struct IoT_Publish_Message_Params {
10863:struct _ClientStatus {
10869:struct _Client {
10878:typedef struct IoT_Client_Init_Params IoT_Client_Init_Params, *PIoT_Client_Init_Params;
10880:struct IoT_Client_Init_Params {
10907:typedef struct iot_sha256_context iot_sha256_context, *Piot_sha256_context;
10909:struct iot_sha256_context {
10916:typedef enum task_mm_cfg {
10922:typedef struct anon_struct.conflict181dab anon_struct.conflict181dab, *Panon_struct.conflict181dab;
10924:struct anon_struct.conflict181dab {
10933:typedef int ptrdiff_t;
10935:typedef struct cli_command cli_command, *Pcli_command;
10937:struct cli_command {
10943:typedef struct cli_st cli_st, *Pcli_st;
10945:struct cli_st {
10960:typedef struct file_ops file_ops, *Pfile_ops;
10962:typedef struct inode_t inode_t, *Pinode_t;
10964:typedef struct file_t file_t, *Pfile_t;
10966:typedef union inode_ops_t inode_ops_t, *Pinode_ops_t;
10968:typedef struct file_ops file_ops_t;
10970:typedef struct fs_ops fs_ops, *Pfs_ops;
10972:typedef struct fs_ops fs_ops_t;
10974:struct file_ops {
10984:union inode_ops_t {
10989:struct inode_t {
11000:struct fs_ops {
11023:struct file_t {
11029:typedef struct pmkElement_t pmkElement_t, *PpmkElement_t;
11031:typedef union anon_union.conflicte6b1_for_key anon_union.conflicte6b1_for_key, *Panon_union.conflicte6b1_for_key;
11033:union anon_union.conflicte6b1_for_key {
11038:struct pmkElement_t {
11046:typedef union anon_union.conflicte6b1 anon_union.conflicte6b1, *Panon_union.conflicte6b1;
11048:union anon_union.conflicte6b1 {
11053:typedef struct net_device net_device, *Pnet_device;
11055:struct net_device {
11059:typedef struct mm_timer_env_tag mm_timer_env_tag, *Pmm_timer_env_tag;
11061:struct mm_timer_env_tag {
11065:typedef struct rx_swdesc rx_swdesc, *Prx_swdesc;
11067:typedef struct rx_dmadesc rx_dmadesc, *Prx_dmadesc;
11069:typedef struct rx_payloaddesc rx_payloaddesc, *Prx_payloaddesc;
11071:typedef struct rx_hd rx_hd, *Prx_hd;
11073:struct rx_hd {
11094:struct rx_dmadesc {
11104:struct rx_swdesc {
11118:struct rx_payloaddesc {
11125:typedef enum dbg_sev_tag {
11136:typedef struct debug_env_tag debug_env_tag, *Pdebug_env_tag;
11138:struct debug_env_tag {
11143:typedef enum dbg_mod_tag {
11155:typedef struct bl_wifi_ap_info bl_wifi_ap_info, *Pbl_wifi_ap_info;
11157:typedef struct bl_wifi_ap_info bl_wifi_ap_info_t;
11159:struct bl_wifi_ap_info {
11165:typedef enum mbedtls_cipher_padding_t {
11173:typedef struct ShadowInitParameters_t ShadowInitParameters_t, *PShadowInitParameters_t;
11175:struct ShadowInitParameters_t {
11190:typedef enum ShadowActions_t {
11196:typedef struct ShadowConnectParameters_t ShadowConnectParameters_t, *PShadowConnectParameters_t;
11198:struct ShadowConnectParameters_t {
11207:typedef enum Shadow_Ack_Status_t {
11213:typedef struct anon_struct.conflictcb0a anon_struct.conflictcb0a, *Panon_struct.conflictcb0a;
11215:struct anon_struct.conflictcb0a {
11238:typedef struct vif_info_tag vif_info_tag, *Pvif_info_tag;
11240:typedef union anon_union.conflictcc05_for_u anon_union.conflictcc05_for_u, *Panon_union.conflictcc05_for_u;
11242:typedef struct anon_struct.conflictca3d anon_struct.conflictca3d, *Panon_struct.conflictca3d;
11244:struct anon_struct.conflictca3d {
11269:union anon_union.conflictcc05_for_u {
11274:struct vif_info_tag {
11311:typedef struct vif_mgmt_env_tag vif_mgmt_env_tag, *Pvif_mgmt_env_tag;
11313:struct vif_mgmt_env_tag {
11322:typedef enum VIF_AP_BCMC_STATUS {
11327:typedef union anon_union.conflictcc05 anon_union.conflictcc05, *Panon_union.conflictcc05;
11329:union anon_union.conflictcc05 {
11334:typedef struct tcpip_msg tcpip_msg, *Ptcpip_msg;
11336:typedef enum tcpip_msg_type {
11344:typedef union anon_union.conflict1cd63e_for_msg anon_union.conflict1cd63e_for_msg, *Panon_union.conflict1cd63e_for_msg;
11346:typedef struct anon_struct.conflict1cd590 anon_struct.conflict1cd590, *Panon_struct.conflict1cd590;
11348:typedef struct anon_struct.conflict1cd5b4 anon_struct.conflict1cd5b4, *Panon_struct.conflict1cd5b4;
11350:typedef struct anon_struct.conflict1cd5eb anon_struct.conflict1cd5eb, *Panon_struct.conflict1cd5eb;
11352:typedef void (* tcpip_callback_fn)(void *);
11354:struct anon_struct.conflict1cd5b4 {
11360:struct anon_struct.conflict1cd590 {
11365:struct anon_struct.conflict1cd5eb {
11371:union anon_union.conflict1cd63e_for_msg {
11378:struct tcpip_msg {
11386:typedef union anon_union.conflict1cd63e anon_union.conflict1cd63e, *Panon_union.conflict1cd63e;
11388:union anon_union.conflict1cd63e {
11395:typedef struct IEEEtypes_InfoElementHdr_t IEEEtypes_InfoElementHdr_t, *PIEEEtypes_InfoElementHdr_t;
11397:struct IEEEtypes_InfoElementHdr_t {
11402:typedef struct IEEEtypes_WPAElement_t IEEEtypes_WPAElement_t, *PIEEEtypes_WPAElement_t;
11404:struct IEEEtypes_WPAElement_t {
11416:typedef enum IEEEtypes_KDEDataType_e {
11429:typedef struct IEEEtypes_RSNElement_t IEEEtypes_RSNElement_t, *PIEEEtypes_RSNElement_t;
11431:struct IEEEtypes_RSNElement_t {
11446:typedef struct dns_ans_ans dns_ans_ans, *Pdns_ans_ans;
11448:struct dns_ans_ans {
11459:typedef struct dns_ans_hdr dns_ans_hdr, *Pdns_ans_hdr;
11461:struct dns_ans_hdr {
11470:typedef struct dns_server_ctx dns_server_ctx, *Pdns_server_ctx;
11472:struct dns_server_ctx {
11486:typedef struct dns_table_entry dns_table_entry, *Pdns_table_entry;
11488:struct dns_table_entry {
11505:typedef struct _bl_wifi_env _bl_wifi_env, *P_bl_wifi_env;
11507:struct _bl_wifi_env {
11519:typedef struct _bl_wifi_env bl_wifi_env_t;
11521:typedef struct dhcp_server dhcp_server, *Pdhcp_server;
11523:typedef struct dhcp_client_node dhcp_client_node, *Pdhcp_client_node;
11525:struct dhcp_server {
11535:struct dhcp_client_node {
11544:typedef struct tsen_reload_data tsen_reload_data, *Ptsen_reload_data;
11546:typedef struct tsen_reload_data tsen_reload_data_t;
11548:typedef StaticTimer_t os_timer_t;
11550:struct tsen_reload_data {
11555:typedef struct disconnectData disconnectData, *PdisconnectData;
11557:typedef struct wifi_mgmr_profile_msg wifi_mgmr_profile_msg, *Pwifi_mgmr_profile_msg;
11559:typedef struct wifi_mgmr_profile_msg wifi_mgmr_profile_msg_t;
11561:struct wifi_mgmr_profile_msg {
11577:struct disconnectData {
11586:typedef struct connectedIPNoData connectedIPNoData, *PconnectedIPNoData;
11588:typedef struct connectedIPNoData connectedIPNoData_t;
11590:struct connectedIPNoData {
11595:typedef struct disconnectData disconnectData_t;
11597:typedef enum ps_dpsm_state_bit_pos {
11605:typedef struct ps_env_tag ps_env_tag, *Pps_env_tag;
11607:struct ps_env_tag {
11628:typedef struct mbedtls_oid_descriptor_t mbedtls_oid_descriptor_t, *Pmbedtls_oid_descriptor_t;
11630:struct mbedtls_oid_descriptor_t {
11637:typedef void (* tcp_err_fn.conflict)(void *, err_t);
11639:typedef struct HeapRegion HeapRegion, *PHeapRegion;
11641:struct HeapRegion {
11646:typedef struct HeapRegion HeapRegion_t;
11648:typedef struct _IEEEtypes_Wpa_t _IEEEtypes_Wpa_t, *P_IEEEtypes_Wpa_t;
11650:typedef struct _IEEEtypes_Wpa_t IEEEtypes_Wpa_t;
11652:typedef struct _wpa_suite_t _wpa_suite_t, *P_wpa_suite_t;
11654:typedef struct _wpa_suite_t wpa_suite_mcast_t;
11656:typedef struct anon_struct.conflict943c6 anon_struct.conflict943c6, *Panon_struct.conflict943c6;
11658:typedef struct anon_struct.conflict943c6 wpa_suite_ucast_t;
11660:typedef struct anon_struct.conflict943c6 wpa_suite_auth_key_mgmt_t;
11662:typedef struct _wpa_suite_t wpa_suite;
11664:struct _wpa_suite_t {
11669:struct anon_struct.conflict943c6 {
11674:struct _IEEEtypes_Wpa_t {
11684:typedef struct _IEEEtypes_Rsn_t _IEEEtypes_Rsn_t, *P_IEEEtypes_Rsn_t;
11686:typedef struct _IEEEtypes_Rsn_t IEEEtypes_Rsn_t;
11688:struct _IEEEtypes_Rsn_t {
11697:typedef struct UDP_datagram UDP_datagram, *PUDP_datagram;
11699:struct UDP_datagram {
11705:typedef struct iperf_server_udp_ctx iperf_server_udp_ctx, *Piperf_server_udp_ctx;
11707:struct iperf_server_udp_ctx {
11727:typedef struct server_hdr_v1 server_hdr_v1, *Pserver_hdr_v1;
11729:struct server_hdr_v1 {
11742:typedef struct server_hdr_v1 server_hdr;
11744:typedef struct bam_baw bam_baw, *Pbam_baw;
11746:struct bam_baw {
11758:typedef struct bam_env_tag bam_env_tag, *Pbam_env_tag;
11760:struct bam_env_tag {
11776:typedef struct cm_ConnectionInfo cm_ConnectionInfo_t;
11778:typedef union anon_union.conflictedae anon_union.conflictedae, *Panon_union.conflictedae;
11780:union anon_union.conflictedae {
11784:typedef struct wifi_ap_data_rate wifi_ap_data_rate, *Pwifi_ap_data_rate;
11786:struct wifi_ap_data_rate {
11794:typedef uintptr_t mem_ptr_t;
11796:typedef uint64_t u64_t;
11798:typedef struct rc4_key rc4_key, *Prc4_key;
11800:struct rc4_key {
11806:typedef void (* netif_status_callback_fn.conflict)(struct netif *);
11808:typedef enum lwip_internal_netif_client_data_index {
11814:typedef u8_t netif_addr_idx_t;
11816:typedef struct me_set_ps_disable_req me_set_ps_disable_req, *Pme_set_ps_disable_req;
11818:struct me_set_ps_disable_req {
11823:typedef struct me_rc_stats_cfm me_rc_stats_cfm, *Pme_rc_stats_cfm;
11825:struct me_rc_stats_cfm {
11841:typedef struct me_set_control_port_req me_set_control_port_req, *Pme_set_control_port_req;
11843:struct me_set_control_port_req {
11848:typedef struct me_sta_del_req me_sta_del_req, *Pme_sta_del_req;
11850:struct me_sta_del_req {
11855:typedef struct me_traffic_ind_req me_traffic_ind_req, *Pme_traffic_ind_req;
11857:struct me_traffic_ind_req {
11863:typedef struct me_set_active_req me_set_active_req, *Pme_set_active_req;
11865:struct me_set_active_req {
11870:typedef struct me_sta_add_cfm me_sta_add_cfm, *Pme_sta_add_cfm;
11872:struct me_sta_add_cfm {
11878:typedef struct me_rc_stats_req me_rc_stats_req, *Pme_rc_stats_req;
11880:struct me_rc_stats_req {
11884:typedef struct me_tkip_mic_failure_ind me_tkip_mic_failure_ind, *Pme_tkip_mic_failure_ind;
11886:struct me_tkip_mic_failure_ind {
11901:typedef struct me_rc_set_rate_req me_rc_set_rate_req, *Pme_rc_set_rate_req;
11903:struct me_rc_set_rate_req {
11909:typedef struct me_sta_add_req me_sta_add_req, *Pme_sta_add_req;
11911:struct me_sta_add_req {
11933:typedef struct me_config_req me_config_req, *Pme_config_req;
11935:struct me_config_req {
11947:typedef longlong __int64_t;
11949:typedef __int64_t int64_t;
11951:typedef int __intptr_t;
11953:typedef __intptr_t intptr_t;
11955:typedef struct wifi_mgmr wifi_mgmr, *Pwifi_mgmr;
11957:typedef struct wifi_mgmr wifi_mgmr_t;
11959:typedef struct wlan_netif wlan_netif, *Pwlan_netif;
11961:typedef enum WIFI_MGMR_CONNECTION_STATUS {
11969:typedef enum WIFI_MGMR_CONNECTION_STATUS WIFI_MGMR_CONNECTION_STATUS_T;
11971:typedef struct wifi_mgmr_profile wifi_mgmr_profile, *Pwifi_mgmr_profile;
11973:typedef struct wifi_mgmr_profile wifi_mgmr_profile_t;
11975:typedef struct wifi_mgmr_scan_item wifi_mgmr_scan_item, *Pwifi_mgmr_scan_item;
11977:typedef struct wifi_mgmr_scan_item wifi_mgmr_scan_item_t;
11979:typedef StaticMessageBuffer_t os_messagequeue_t;
11981:typedef struct wifi_mgmr_connect_ind_stat_info wifi_mgmr_connect_ind_stat_info, *Pwifi_mgmr_connect_ind_stat_info;
11983:typedef struct wifi_mgmr_connect_ind_stat_info wifi_mgmr_connect_ind_stat_info_t;
11985:typedef struct anon_struct.conflict156399_for_ipv4 anon_struct.conflict156399_for_ipv4, *Panon_struct.conflict156399_for_ipv4;
11987:typedef union anon_union.conflict1563f9_for_field_5 anon_union.conflict1563f9_for_field_5, *Panon_union.conflict1563f9_for_field_5;
11989:typedef struct anon_struct.conflict1563e2 anon_struct.conflict1563e2, *Panon_struct.conflict1563e2;
11991:struct wifi_mgmr_connect_ind_stat_info {
12002:struct wifi_mgmr_profile {
12027:struct anon_struct.conflict1563e2 {
12031:struct anon_struct.conflict156399_for_ipv4 {
12039:union anon_union.conflict1563f9_for_field_5 {
12043:struct wlan_netif {
12056:struct wifi_mgmr_scan_item {
12077:struct wifi_mgmr {
12108:typedef enum EVENT_TYPE {
12114:typedef union anon_union.conflict1563f9 anon_union.conflict1563f9, *Panon_union.conflict1563f9;
12116:union anon_union.conflict1563f9 {
12120:typedef struct wifi_mgmr_sta_basic_info wifi_mgmr_sta_basic_info, *Pwifi_mgmr_sta_basic_info;
12122:typedef struct wifi_mgmr_sta_basic_info wifi_mgmr_sta_basic_info_t;
12124:struct wifi_mgmr_sta_basic_info {
12137:typedef struct wifi_mgmr_cfg_element_msg wifi_mgmr_cfg_element_msg, *Pwifi_mgmr_cfg_element_msg;
12139:struct wifi_mgmr_cfg_element_msg {
12148:typedef enum WIFI_MGMR_EVENT {
12182:typedef struct wifi_mgmr_msg wifi_mgmr_msg, *Pwifi_mgmr_msg;
12184:typedef enum WIFI_MGMR_EVENT WIFI_MGMR_EVENT_T;
12186:struct wifi_mgmr_msg {
12194:typedef struct anon_struct.conflict156399 anon_struct.conflict156399, *Panon_struct.conflict156399;
12196:struct anon_struct.conflict156399 {
12204:typedef struct wifi_mgmr_ipgot_msg wifi_mgmr_ipgot_msg, *Pwifi_mgmr_ipgot_msg;
12206:struct wifi_mgmr_ipgot_msg {
12214:typedef struct wifi_mgmr_ap_msg wifi_mgmr_ap_msg, *Pwifi_mgmr_ap_msg;
12216:struct wifi_mgmr_ap_msg {
12227:typedef struct wifi_mgmr_msg wifi_mgmr_msg_t;
12229:typedef struct wifi_mgmr_ap_msg wifi_mgmr_ap_msg_t;
12231:typedef struct wifi_mgmr_cfg_element_msg wifi_mgmr_cfg_element_msg_t;
12233:typedef struct wifi_mgmr_ipgot_msg wifi_mgmr_ipgot_msg_t;
12235:typedef struct mm_bcn_env_tag mm_bcn_env_tag, *Pmm_bcn_env_tag;
12237:struct mm_bcn_env_tag {
12248:typedef struct loop_evt_handler_holder loop_evt_handler_holder, *Ploop_evt_handler_holder;
12250:typedef struct led_trigger_ctx led_trigger_ctx, *Pled_trigger_ctx;
12252:struct loop_evt_handler_holder {
12257:struct led_trigger_ctx {
12262:typedef struct led_trigger_item led_trigger_item, *Pled_trigger_item;
12264:struct led_trigger_item {
12273:typedef union anon_union.conflict311 anon_union.conflict311, *Panon_union.conflict311;
12275:union anon_union.conflict311 {
12280:typedef struct rijndael_ctx rijndael_ctx, *Prijndael_ctx;
12282:typedef uint u32;
12284:struct rijndael_ctx {
12290:typedef struct rf_para_flash_tag rf_para_flash_tag, *Prf_para_flash_tag;
12292:typedef struct rf_para_flash_tag rf_para_flash_t;
12294:struct rf_para_flash_tag {
12306:typedef struct anon_struct.conflict34e5c anon_struct.conflict34e5c, *Panon_struct.conflict34e5c;
12308:typedef struct rf_calib1_tag rf_calib1_tag, *Prf_calib1_tag;
12310:typedef struct rf_calib2_tag rf_calib2_tag, *Prf_calib2_tag;
12312:typedef struct rf_calib3_tag rf_calib3_tag, *Prf_calib3_tag;
12314:typedef struct rf_calib4_tag rf_calib4_tag, *Prf_calib4_tag;
12316:struct rf_calib3_tag {
12326:struct rf_calib2_tag {
12331:struct rf_calib4_tag {
12341:struct rf_calib1_tag {
12368:struct anon_struct.conflict34e5c {
12378:typedef struct rf_calib_data_tag rf_calib_data_tag, *Prf_calib_data_tag;
12380:struct rf_calib_data_tag {
12390:typedef struct mbedtls_pem_context mbedtls_pem_context, *Pmbedtls_pem_context;
12392:struct mbedtls_pem_context {
12398:typedef struct rxl_cntrl_env_tag rxl_cntrl_env_tag, *Prxl_cntrl_env_tag;
12400:struct rxl_cntrl_env_tag {
12408:typedef struct jsmn_parser jsmn_parser, *Pjsmn_parser;
12410:struct jsmn_parser {
12416:typedef struct jsmntok_t jsmntok_t, *Pjsmntok_t;
12418:typedef enum jsmntype_t {
12426:struct jsmntok_t {
12436:typedef enum jsmnerr {
12442:typedef void * MessageBufferHandle_t;
12444:typedef enum hostapd_state_tag {
12449:typedef void (* tcpip_init_done_fn)(void *);
12451:typedef struct _gpio_ctx_desc _gpio_ctx_desc, *P_gpio_ctx_desc;
12453:typedef struct _gpio_ctx_desc gpio_ctx_t;
12455:struct _gpio_ctx_desc {
12465:typedef struct gpio_feature_config gpio_feature_config, *Pgpio_feature_config;
12467:struct gpio_feature_config {
12476:typedef struct GLB_GPIO_Cfg_Type GLB_GPIO_Cfg_Type, *PGLB_GPIO_Cfg_Type;
12478:struct GLB_GPIO_Cfg_Type {
12487:typedef enum GLB_GPIO_FUNC_Type {
12500:typedef enum GLB_GPIO_Type {
12527:typedef struct txl_buffer_list_tag txl_buffer_list_tag, *Ptxl_buffer_list_tag;
12529:struct txl_buffer_list_tag {
12534:typedef struct txl_buffer_hw_desc_tag txl_buffer_hw_desc_tag, *Ptxl_buffer_hw_desc_tag;
12536:struct txl_buffer_hw_desc_tag {
12541:typedef union anon_union.conflictbf1b anon_union.conflictbf1b, *Panon_union.conflictbf1b;
12543:union anon_union.conflictbf1b {
12548:typedef struct txl_buffer_env_tag txl_buffer_env_tag, *Ptxl_buffer_env_tag;
12550:typedef struct txl_buffer_idx_tag txl_buffer_idx_tag, *Ptxl_buffer_idx_tag;
12552:struct txl_buffer_idx_tag {
12567:struct txl_buffer_env_tag {
12572:typedef struct oid_sig_alg_t oid_sig_alg_t, *Poid_sig_alg_t;
12574:struct oid_sig_alg_t {
12582:typedef struct oid_cipher_alg_t oid_cipher_alg_t, *Poid_cipher_alg_t;
12584:struct oid_cipher_alg_t {
12592:typedef struct oid_x520_attr_t oid_x520_attr_t, *Poid_x520_attr_t;
12594:struct oid_x520_attr_t {
12599:typedef struct oid_x509_ext_t oid_x509_ext_t, *Poid_x509_ext_t;
12601:struct oid_x509_ext_t {
12606:typedef struct oid_md_alg_t oid_md_alg_t, *Poid_md_alg_t;
12608:struct oid_md_alg_t {
12616:typedef struct oid_ecp_grp_t oid_ecp_grp_t, *Poid_ecp_grp_t;
12618:struct oid_ecp_grp_t {
12626:typedef struct oid_pk_alg_t oid_pk_alg_t, *Poid_pk_alg_t;
12628:struct oid_pk_alg_t {
12636:typedef enum riscv_code_model {
12642:typedef enum riscv_abi_type {
12652:typedef enum riscv_microarchitecture_type {
12657:typedef struct PDS_CTL2_Type PDS_CTL2_Type, *PPDS_CTL2_Type;
12659:struct PDS_CTL2_Type {
12682:typedef enum PDS_PLL_CLK_Type {
12694:typedef struct PDS_DEFAULT_LV_CFG_Type PDS_DEFAULT_LV_CFG_Type, *PPDS_DEFAULT_LV_CFG_Type;
12696:typedef struct PDS_CTL_Type PDS_CTL_Type, *PPDS_CTL_Type;
12698:typedef struct PDS_CTL3_Type PDS_CTL3_Type, *PPDS_CTL3_Type;
12700:typedef struct PDS_CTL4_Type PDS_CTL4_Type, *PPDS_CTL4_Type;
12702:struct PDS_CTL3_Type {
12722:struct PDS_CTL4_Type {
12740:struct PDS_CTL_Type {
12768:struct PDS_DEFAULT_LV_CFG_Type {
12775:typedef enum PDS_PLL_XTAL_Type {
12785:typedef struct PDS_RAM_CFG_Type PDS_RAM_CFG_Type, *PPDS_RAM_CFG_Type;
12787:struct PDS_RAM_CFG_Type {
12799:typedef struct x509_crt_verify_string x509_crt_verify_string, *Px509_crt_verify_string;
12801:struct x509_crt_verify_string {
12806:typedef uintptr_t insn_t;
12808:typedef struct cfg_element_entry cfg_element_entry, *Pcfg_element_entry;
12810:struct cfg_element_entry {
12821:typedef void * bl_mtd_handle_t;
12823:typedef struct bl_mtd_info_t bl_mtd_info_t, *Pbl_mtd_info_t;
12825:struct bl_mtd_info_t {
12832:typedef struct bl_txhdr bl_txhdr, *Pbl_txhdr;
12834:typedef union bl_hw_txstatus bl_hw_txstatus, *Pbl_hw_txstatus;
12836:typedef struct anon_struct.conflict14eb3b anon_struct.conflict14eb3b, *Panon_struct.conflict14eb3b;
12838:struct anon_struct.conflict14eb3b {
12845:union bl_hw_txstatus {
12850:struct bl_txhdr {
12857:typedef enum lwip_pollscan_opts {
12863:typedef union sockaddr_aligned sockaddr_aligned, *Psockaddr_aligned;
12865:typedef struct sockaddr sockaddr, *Psockaddr;
12867:typedef struct sockaddr_in sockaddr_in, *Psockaddr_in;
12869:typedef u8_t sa_family_t;
12871:struct sockaddr {
12877:struct sockaddr_in {
12885:union sockaddr_aligned {
12890:typedef struct lwip_socket_multicast_pair lwip_socket_multicast_pair, *Plwip_socket_multicast_pair;
12892:struct lwip_socket_multicast_pair {
12898:typedef struct key_MgtMaterial_t key_MgtMaterial_t, *Pkey_MgtMaterial_t;
12900:typedef union anon_union.conflictdf11_for_keyEncypt anon_union.conflictdf11_for_keyEncypt, *Panon_union.conflictdf11_for_keyEncypt;
12902:typedef struct key_Type_TKIP_t key_Type_TKIP_t, *Pkey_Type_TKIP_t;
12904:typedef struct key_Type_AES_t key_Type_AES_t, *Pkey_Type_AES_t;
12906:typedef struct key_Type_WEP_t key_Type_WEP_t, *Pkey_Type_WEP_t;
12908:typedef struct key_Type_WAPI_t key_Type_WAPI_t, *Pkey_Type_WAPI_t;
12910:typedef struct key_Type_AES_CMAC_t key_Type_AES_CMAC_t, *Pkey_Type_AES_CMAC_t;
12912:struct key_Type_AES_t {
12916:struct key_Type_TKIP_t {
12922:struct key_Type_WEP_t {
12928:struct key_Type_WAPI_t {
12936:struct key_Type_AES_CMAC_t {
12942:union anon_union.conflictdf11_for_keyEncypt {
12950:struct key_MgtMaterial_t {
12957:typedef union anon_union.conflictdf11 anon_union.conflictdf11, *Panon_union.conflictdf11;
12959:union anon_union.conflictdf11 {
12967:typedef uint hashval_t;
12969:typedef struct scanu_raw_send_cfm scanu_raw_send_cfm, *Pscanu_raw_send_cfm;
12971:struct scanu_raw_send_cfm {
12975:typedef struct scanu_raw_send_req scanu_raw_send_req, *Pscanu_raw_send_req;
12977:struct scanu_raw_send_req {
12982:typedef struct scanu_start_cfm scanu_start_cfm, *Pscanu_start_cfm;
12984:struct scanu_start_cfm {
12988:typedef struct notifier_block notifier_block, *Pnotifier_block;
12990:struct notifier_block {
12996:typedef struct rd_env_tag rd_env_tag, *Prd_env_tag;
12998:struct rd_env_tag {
13002:typedef struct Bl_SHA1_CTX Bl_SHA1_CTX, *PBl_SHA1_CTX;
13004:struct Bl_SHA1_CTX {
13015:typedef struct mbedtls_sha1_context mbedtls_sha1_context, *Pmbedtls_sha1_context;
13017:struct mbedtls_sha1_context {
13023:typedef struct tcpip_callback_msg tcpip_callback_msg, *Ptcpip_callback_msg;
13025:struct tcpip_callback_msg {
13028:typedef union anon_union.conflict202275_for_msg anon_union.conflict202275_for_msg, *Panon_union.conflict202275_for_msg;
13030:union anon_union.conflict202275_for_msg {
13041:typedef union anon_union.conflict anon_union.conflict, *Panon_union.conflict;
13043:union anon_union.conflict {
13054:typedef struct ip_mreq ip_mreq, *Pip_mreq;
13056:struct ip_mreq {
13061:typedef struct msghdr msghdr, *Pmsghdr;
13063:typedef struct iovec iovec, *Piovec;
13065:struct msghdr {
13075:struct iovec {
13080:typedef struct ifreq ifreq, *Pifreq;
13082:struct ifreq {
13086:typedef struct sockaddr_storage sockaddr_storage, *Psockaddr_storage;
13088:struct sockaddr_storage {
13095:typedef TimerHandle_t timer_cb_arg_t;
13097:typedef enum GLB_DIG_CLK_Type {
13102:typedef enum BMX_BUS_ERR_Type {
13107:typedef enum GLB_SPI_PAD_ACT_AS_Type {
13112:typedef enum GLB_SFLASH_CLK_Type {
13121:typedef enum GLB_EM_Type {
13127:typedef enum BMX_ERR_INT_Type {
13132:typedef struct BMX_Cfg_Type BMX_Cfg_Type, *PBMX_Cfg_Type;
13134:typedef enum BMX_ARB_Type {
13140:struct BMX_Cfg_Type {
13146:typedef enum GLB_PLL_XTAL_Type {
13156:typedef enum GLB_SYS_CLK_Type {
13165:typedef enum GLB_BT_BANDWIDTH_Type {
13170:typedef enum BMX_TO_INT_Type {
13175:typedef enum GLB_GPIO_INT_TRIG_Type {
13182:typedef enum GLB_DAC_CLK_Type {
13187:typedef enum GLB_IR_CLK_SRC_Type {
13191:typedef enum GLB_DMA_CLK_ID_Type {
13198:typedef enum GLB_ADC_CLK_Type {
13203:typedef enum GLB_GPIO_INT_CONTROL_Type {
13208:typedef enum GLB_MTIMER_CLK_Type {
13213:typedef enum GLB_GPIO_REAL_MODE_Type {
13221:typedef enum GLB_PKA_CLK_Type {
13226:typedef enum GLB_UART_SIG_FUN_Type {
13237:typedef enum GLB_UART_SIG_Type {
13248:typedef enum GLB_PLL_CLK_Type {
13260:typedef enum GLB_ROOT_CLK_Type {
13266:typedef struct mm_env_tag mm_env_tag, *Pmm_env_tag;
13268:struct mm_env_tag {
13283:typedef enum mm_features {
13311:typedef int32_t mbedtls_mpi_sint;
13313:typedef uint64_t mbedtls_t_udbl;
13315:typedef struct phy_env_tag phy_env_tag, *Pphy_env_tag;
13317:typedef struct phy_bl602_cfg_tag phy_bl602_cfg_tag, *Pphy_bl602_cfg_tag;
13319:struct phy_bl602_cfg_tag {
13323:struct phy_env_tag {
13332:typedef struct lwip_cyclic_timer lwip_cyclic_timer, *Plwip_cyclic_timer;
13334:typedef void (* lwip_cyclic_timer_handler)(void);
13336:struct lwip_cyclic_timer {
13341:typedef struct sys_timeo sys_timeo, *Psys_timeo;
13343:struct sys_timeo {
13350:typedef enum raw_input_state {
13356:typedef enum raw_input_state raw_input_state_t;
13358:typedef enum memp_t {
13377:typedef struct bl_mtd_handle_priv bl_mtd_handle_priv, *Pbl_mtd_handle_priv;
13379:struct bl_mtd_handle_priv {
13387:typedef struct bl_mtd_handle_priv * bl_mtd_handle_priv_t;
13389:typedef enum LOG_BUF_OUT_DATA_TYPE {
13395:typedef enum LOG_BUF_OUT_DATA_TYPE LOG_BUF_OUT_DATA_TYPE_T;
13397:typedef int __gcc_CMPtype;
13399:typedef TickType_t EventBits_t;
13401:typedef struct EventGroupDef_t EventGroupDef_t, *PEventGroupDef_t;
13403:typedef struct EventGroupDef_t * EventGroupHandle_t;
13405:struct EventGroupDef_t {
13415:typedef struct gethostbyname_r_helper gethostbyname_r_helper, *Pgethostbyname_r_helper;
13417:struct gethostbyname_r_helper {
13423:typedef ulonglong uintmax_t;
13425:typedef longlong intmax_t;
13427:typedef struct addrinfo addrinfo, *Paddrinfo;
13429:struct addrinfo {
13440:typedef struct hostent hostent, *Phostent;
13442:struct hostent {
13450:typedef struct EventGroupDef_t EventGroup_t;
13452:typedef struct Ring_Buffer_Type Ring_Buffer_Type, *PRing_Buffer_Type;
13454:struct Ring_Buffer_Type {
13469:typedef enum anon_enum_8.conflictcde {
14154:typedef union anon_union.conflictc3d7 anon_union.conflictc3d7, *Panon_union.conflictc3d7;
14156:union anon_union.conflictc3d7 {
14160:typedef long __int32_t;
14162:typedef uint __uintptr_t;
14164:typedef uchar __uint8_t;
14166:typedef char __int8_t;
14168:typedef struct udp_hdr udp_hdr, *Pudp_hdr;
14170:struct udp_hdr {
14177:typedef struct bl_env_tag bl_env_tag, *Pbl_env_tag;
14179:struct bl_env_tag {
14187:typedef union anon_union.conflict9f1c anon_union.conflict9f1c, *Panon_union.conflict9f1c;
14189:union anon_union.conflict9f1c {
14194:typedef union anon_union.conflict9ef7 anon_union.conflict9ef7, *Panon_union.conflict9ef7;
14196:union anon_union.conflict9ef7 {
14201:typedef union anon_union.conflict9f41 anon_union.conflict9f41, *Panon_union.conflict9f41;
14203:union anon_union.conflict9f41 {
14208:typedef enum PtTable_ID_Type {
14214:typedef enum PtTable_Entry_Type {
14220:typedef enum PtTable_Error_Type {
14232:typedef struct t_hdr t_hdr, *Pt_hdr;
14234:struct t_hdr {
14242:typedef struct ping_var ping_var, *Pping_var;
14244:struct ping_var {
14260:typedef struct SubscriptionRecord_t SubscriptionRecord_t, *PSubscriptionRecord_t;
14262:struct SubscriptionRecord_t {
14269:typedef struct ToBeReceivedAckRecord_t ToBeReceivedAckRecord_t, *PToBeReceivedAckRecord_t;
14271:struct ToBeReceivedAckRecord_t {
14285:typedef struct JsonTokenTable_t JsonTokenTable_t, *PJsonTokenTable_t;
14287:struct JsonTokenTable_t {
14297:typedef enum ShadowAckTopicTypes_t {
14303:typedef enum _blog_leve {
14313:typedef enum _blog_leve blog_level_t;
14315:typedef struct _blog_info _blog_info, *P_blog_info;
14317:typedef struct _blog_info blog_info_t;
14319:struct _blog_info {
14324:typedef enum Elf_ProgramHeaderType_RISCV {
14338:typedef struct Elf32_Shdr Elf32_Shdr, *PElf32_Shdr;
14340:typedef enum Elf_SectionHeaderType_RISCV {
14372:struct Elf32_Shdr {
14385:typedef struct Elf32_Sym Elf32_Sym, *PElf32_Sym;
14387:struct Elf32_Sym {
14396:typedef struct Elf32_Phdr Elf32_Phdr, *PElf32_Phdr;
14398:struct Elf32_Phdr {
14409:typedef struct Elf32_Ehdr Elf32_Ehdr, *PElf32_Ehdr;
14411:struct Elf32_Ehdr {
14440:void bl602_start(void)
14491:err_t cb_httpc_headers_done_fn
14505:void cb_httpc_result(void *arg,httpc_result_t httpc_result,u32_t rx_content_len,u32_t srv_res,
14517:err_t cb_altcp_recv_fn(void *arg,altcp_pcb *conn,pbuf *p,err_t err)
14538:void cmd_stack_wifi(char *buf,int len,int argc,char **argv)
14561:void cmd_exception_illegal_ins(char *buf,int len,int argc,char **argv)
14571:void cmd_exception_store(char *buf,int len,int argc,char **argv)
14581:void cmd_exception_l_illegal(char *buf,int len,int argc,char **argv)
14591:void cmd_exception_load(char *buf,int len,int argc,char **argv)
14601:void cmd_dma(void)
14646:int cmd_cks(void)
15031:int cmd_aes(void)
15057:int cmd_trng(void)
15074:int cmd_sha(void)
15089:void cmd_wifi(void)
15146:int cmd_pka(void)
15160:void cmd_aws(char *buf,int len,int argc,char **argv)
15170:void proc_hellow_entry(void *pvParameters)
15182:uchar char_to_hex(char asccode)
15205:void cmd_httpc_test(char *buf,int len,int argc,char **argv)
15226:int get_dts_addr(char *name)
15247:int client_demo(void)
15336:int http_test_cmd(void)
15426:void aos_loop_proc(void *pvParameters)
15498:void vApplicationStackOverflowHook(TaskHandle_t xTask,char *pcTaskName)
15510:void vApplicationMallocFailedHook(void)
15524:void vApplicationIdleHook(void)
15535:int check_dts_config(char *ssid,char *password)
15558:void _connect_wifi(undefined4 param_1)
15716:void event_cb_wifi_event(input_event_t *event,void *private_data)
15879:void vApplicationGetIdleTaskMemory
15893:void vApplicationGetTimerTaskMemory
15909:void vAssertCalled(void)
15923:void bfl_main(void)
15988:void ShadowUpdateStatusCallback
16022:void windowActuate_Callback(char *pJsonString,uint32_t JsonStringDataLen,jsonStruct_t *pContext)
16040:void aws_main_entry(void *param)
16322:void cmd_coex_dump(char *buf,int len,int argc,char **argv)
16333:int codex_debug_cli_init(void)
16344:void mm_rx_filter_set(void)
16354:int element_notify_status_enabled
16366:void blmac_ap_setf(uint8_t ap)
16378:uchar ascii_to_hex(char asccode)
16401:undefined4 element_notify_time_last_received_set(void)
16412:void blmac_encr_cntrl_pack
16444:undefined4 element_notify_keepalive_received(void)
16459:uint32_t hal_machw_rx_duration(rx_hd *rhd,uint16_t len)
16473:void mm_env_max_ampdu_duration_set(void)
16499:void mm_env_init(void)
16515:void mm_init(void)
16539:void mm_active(void)
16550:void mm_reset(void)
16572:void mm_tbtt_evt(int dummy)
16611:uint8_t mm_sec_machwaddr_wr(uint8_t sta_idx,uint8_t inst_nbr)
16637:void mm_sec_keydump(void)
16696:uint8_t mm_sec_machwkey_wr(mm_key_add_req *param)
16749:void mm_sec_machwkey_del(uint8_t hw_key_idx)
16783:void mm_sec_machwaddr_del(uint8_t sta_idx)
16801:void mm_hw_idle_evt(int dummy)
16814:void mm_hw_info_set(mac_addr *mac_addr)
16834:void mm_hw_ap_info_set(void)
16850:void mm_hw_ap_info_reset(void)
16864:void mm_back_to_host_idle(void)
16886:void mm_force_idle_req(void)
16902:uint8_t mm_sta_add(mm_sta_add_req *param,uint8_t *sta_idx,uint8_t *hw_sta_idx)
17023:void mm_sta_del(uint8_t sta_idx)
17075:void mm_cfg_element_keepalive_timestamp_update(void)
17086:void mm_send_connection_loss_ind(vif_info_tag *p_vif_entry)
17100:void mm_ap_probe_cfm(void *env,uint32_t status)
17118:void mm_check_rssi(vif_info_tag *vif_entry,int8_t rssi)
17186:void mm_send_csa_traffic_ind(uint8_t vif_index,_Bool enable)
17203:_Bool mm_check_beacon(rx_hd *rhd,vif_info_tag *vif_entry,sta_info_tag *p_sta_entry,uint32_t *tim)
17300:void mm_sta_tbtt(void *env)
17350:uint16_t mm_get_rsn_wpa_ie(uint8_t sta_id,uint8_t *wpa_ie)
17365:void mm_tim_update_proceed(mm_tim_update_req *param)
17480:void mm_bcn_init(void)
17493:void mm_bcn_init_vif(vif_info_tag *vif_entry)
17549:void mm_tim_update(mm_tim_update_req *param)
17566:void mm_bcn_transmit(void)
17681:void mm_bcn_updated(void *env,int dma_queue)
17746:void mm_bcn_update(mm_bcn_change_req *param)
17762:void mm_bcn_transmitted(void *env,uint32_t status)
17791:void mm_bcn_change(mm_bcn_change_req *param)
17810:void mm_timer_hw_set(mm_timer_tag *timer)
17829:_Bool cmp_abs_time(co_list_hdr *timerA,co_list_hdr *timerB)
17838:void mm_timer_init(void)
17850:void mm_timer_set(mm_timer_tag *timer,uint32_t value)
17882:void mm_timer_clear(mm_timer_tag *timer)
17900:void mm_timer_schedule(int dummy)
17931:void ps_uapsd_timer_handle(void *env)
17973:void blmac_pwr_mgt_setf(uint8_t pwrmgt)
17987:void ps_dpsm_update(_Bool pause)
18032:uint8_t ps_send_pspoll(vif_info_tag *vif_entry)
18068:void ps_init(void)
18081:void ps_set_mode(uint8_t mode,ke_task_id_t taskid)
18140:void ps_enable_cfm(void *env,uint32_t status)
18191:void ps_disable_cfm(void *env,uint32_t status)
18229:uint8_t ps_polling_frame(vif_info_tag *vif_entry)
18264:void ps_check_beacon(uint32_t tim,uint16_t len,vif_info_tag *vif_entry)
18336:void ps_check_frame(uint8_t *frame,uint32_t statinfo,vif_info_tag *vif_entry)
18409:void ps_check_tx_frame(uint8_t staid,uint8_t tid)
18439:void ps_uapsd_set(vif_info_tag *vif_entry,uint8_t hw_queue,_Bool uapsd)
18465:void ps_traffic_status_update(uint8_t vif_index,uint8_t new_status)
18508:void mm_ps_change_ind(uint8_t sta_idx,uint8_t ps_state)
18525:void rxl_mpdu_transfer(rx_swdesc *swdesc)
18558:void rxl_init(void)
18571:void rxl_cntrl_dump(void)
18592:void rxl_timer_int_handler(void)
18647:void rxl_timeout_int_handler(void)
18657:void rxl_dma_int_handler(void)
18669:void rxl_dma_evt(int dummy)
18680:void rxl_frame_release(rx_swdesc *swdesc)
18692:void rxl_mpdu_free(rx_swdesc *swdesc)
18727:void rxl_cntrl_evt(int dummy)
18920:void bl60x_firmwre_mpdu_free(void *swdesc_ptr)
18936:void rxl_reset(void)
18948:void rxl_hwdesc_dump(void)
18999:void rxl_hwdesc_init(int init)
19127:void rxl_hd_append(rx_dmadesc *desc)
19158:void rxl_pd_append(rx_pbd *first,rx_pbd *last,rx_pbd *spare)
19201:void scan_search_ds(void)
19211:void scan_init(void)
19230:void scan_set_channel_request(void)
19267:void dma_cb(void *env,int dma_queue)
19278:void scan_ie_download(scan_start_req *param)
19292:void scan_probe_req_tx(void)
19361:void scan_send_cancel_cfm(uint8_t status,ke_task_id_t dest_id)
19375:void sta_mgmt_entry_init(sta_info_tag *sta_entry)
19399:void sta_mgmt_init(void)
19433:uint8_t sta_mgmt_register(mm_sta_add_req *param,uint8_t *sta_idx)
19511:void sta_mgmt_unregister(uint8_t sta_idx)
19528:void sta_mgmt_add_key(mm_key_add_req *param,uint8_t hw_key_idx)
19567:void sta_mgmt_del_key(sta_info_tag *sta)
19579:int sta_mgmt_send_postponed_frame(vif_info_tag *p_vif_entry,sta_info_tag *p_sta_entry,int limit)
19631:void td_timer_end(void *env)
19681:void td_reset(uint8_t vif_index)
19704:void td_init(void)
19718:void td_start(uint8_t vif_index)
19740:void td_pck_ind(uint8_t vif_index,uint8_t sta_index,_Bool rx)
19760:void td_pck_ps_ind(uint8_t vif_index,_Bool rx)
19780:void bl_tpc_update_power_table(int8_t *power_table)
19805:void bl_tpc_power_table_get(int8_t *power_table_config)
19822:void bl_tpc_update_power_rate_11b(int8_t *power_rate_table)
19842:void bl_tpc_update_power_rate_11g(int8_t *power_rate_table)
19863:void bl_tpc_update_power_rate_11n(int8_t *power_rate_table)
19886:void tpc_update_tx_power(int8_t pwr)
19905:void tpc_update_vif_tx_power(vif_info_tag *vif,int8_t *pwr,uint8_t *idx)
19948:uint8_t tpc_get_vif_tx_power_vs_rate(uint32_t rate_config)
19972:void tpc_update_frame_tx_power(vif_info_tag *vif,txl_frame_desc_tag *frame)
19988:void txl_int_fake_transfer(txdesc *txdesc,uint8_t access_category)
20013:void blmac_abs_timer_set(int reg_idx,uint32_t value)
20026:void txl_machdr_format(uint32_t machdrptr)
20043:void txl_cntrl_init(void)
20073:_Bool txl_cntrl_tx_check(vif_info_tag *p_vif_entry)
20091:void txl_cntrl_halt_ac(uint8_t access_category)
20140:void txl_cntrl_flush_ac(uint8_t access_category,uint32_t status)
20163:void txl_cntrl_clear_bcn_ac(void)
20174:void txl_cntrl_clear_all_ac(void)
20193:void txl_cntrl_inc_pck_cnt(void)
20205:void txl_payload_handle(void)
20222:void txl_payload_handle_backup(void)
20402:_Bool txl_cntrl_push_int(txdesc *txdesc,uint8_t access_category)
20447:_Bool txl_cntrl_push_int_force(txdesc *txdesc,uint8_t access_category)
20466:_Bool txl_cntrl_push(txdesc *txdesc,uint8_t access_category)
20514:void txl_transmit_trigger(void)
20582:void txl_reset(void)
20635:void txl_cntrl_env_dump(void)
20671:void txl_frame_init_desc(txl_frame_desc_tag *frame,txl_buffer_tag *buffer,tx_hw_desc *hwdesc,
20693:void txl_frame_init(_Bool reset)
20777:txl_frame_desc_tag * txl_frame_get(int type,int len)
20849:_Bool txl_frame_push(txl_frame_desc_tag *frame,uint8_t ac)
20873:_Bool txl_frame_push_force(txl_frame_desc_tag *frame,uint8_t ac)
20897:void txl_frame_cfm(txdesc *txdesc)
20908:void txl_frame_release(txdesc *txdesc,_Bool postponed)
20932:void txl_frame_evt(int dummy)
20957:uint8_t txl_frame_send_null_frame(uint8_t sta_idx,cfm_func_ptr *cfm,void *env)
21005:uint8_t txl_frame_send_qosnull_frame(uint8_t sta_idx,uint16_t qos,cfm_func_ptr *cfm,void *env)
21063:uint8_t txl_frame_send_eapol_frame
21299:void txl_frame_dump(void)
21322:void txl_hwdesc_init(void)
21331:void txl_hwdesc_reset(void)
21340:void vif_mgmt_bcn_to_evt(void *env)
21354:void vif_mgmt_init(void)
21382:uint8_t vif_mgmt_register(mac_addr *mac_addr,uint8_t vif_type,_Bool p2p,uint8_t *vif_idx)
21449:void vif_mgmt_unregister(uint8_t vif_idx)
21493:void vif_mgmt_add_key(mm_key_add_req *param,uint8_t hw_key_idx)
21534:void vif_mgmt_del_key(vif_info_tag *vif,uint8_t keyid)
21564:void vif_mgmt_send_postponed_frame(vif_info_tag *p_vif_entry)
21582:void vif_mgmt_reset(void)
21600:void vif_mgmt_bcn_to_prog(vif_info_tag *p_vif_entry)
21610:void vif_mgmt_bcn_recv(vif_info_tag *p_vif_entry)
21628:void vif_mgmt_set_ap_bcn_int(vif_info_tag *p_vif_entry,uint16_t bcn_int)
21667:void vif_mgmt_switch_channel(vif_info_tag *p_vif_entry)
21735:vif_info_tag * vif_mgmt_get_first_ap_inf(void)
21754:void me_init(void)
21769:scan_chan_tag * me_freq_to_chan_ptr(uint8_t band,uint16_t freq)
21806:void michael_block(mic_calc *mic_calc_ptr,uint32_t block)
21828:void me_mic_init(mic_calc *mic_calc_ptr,uint32_t *mic_key_ptr,mac_addr *da,mac_addr *sa,uint8_t tid)
21862:void me_mic_calc(mic_calc *mic_calc_ptr,uint32_t start_ptr,uint32_t data_len)
21940:void me_mic_end(mic_calc *mic_calc_ptr)
21957:_Bool me_set_sta_ht_vht_param(sta_info_tag *sta,mac_bss_info *bss)
21993:uint8_t me_11n_nss_max(uint8_t *mcs_set)
22013:uint8_t me_legacy_ridx_min(uint16_t rate_map)
22033:uint8_t me_legacy_ridx_max(uint16_t rate_map)
22058:uint8_t me_rate_translate(uint8_t rate)
22129:void me_get_basic_rates(mac_rateset *rateset,mac_rateset *basic_ratest)
22151:uint16_t me_legacy_rate_bitfield_build(mac_rateset *rateset,_Bool basic_only)
22180:uint16_t me_build_capability(uint8_t vif_idx)
22204:void me_init_bcmc_rate(sta_info_tag *sta_entry)
22233:void me_tx_cfm_singleton(txdesc *txdesc)
22259:void me_check_rc(uint8_t sta_idx,_Bool *tx_ampdu)
22426:txl_buffer_control * me_update_buffer_control(sta_info_tag *sta_info)
22537:void me_init_rate(sta_info_tag *sta_entry)
22548:void me_bw_check(uint32_t ht_op_addr,uint32_t vht_op_addr,mac_bss_info *bss)
22576:void me_beacon_check(uint8_t vif_idx,uint16_t length,uint32_t bcn_addr)
22667:void me_sta_bw_nss_max_upd(uint8_t sta_idx,uint8_t bw,uint8_t nss)
22718:uint8_t me_add_chan_ctx(uint8_t *p_chan_idx,scan_chan_tag *p_chan,uint32_t center_freq1,
22739:uint8_t rc_get_nss(uint16_t rate_config)
22754:uint8_t rc_get_mcs_index(uint16_t rate_config)
22777:uint16_t rc_set_previous_mcs_index(rc_sta_stats *rc_ss,uint16_t rate_config)
22808:uint16_t rc_set_next_mcs_index(rc_sta_stats *rc_ss,uint16_t rate_config)
22844:_Bool is_cck_group(uint16_t rate_config)
22861:void rc_update_retry_chain(rc_sta_stats *rc_ss,uint32_t *cur_tp)
22971:uint16_t rc_get_lowest_rate_config(rc_sta_stats *rc_ss)
22999:void rc_sort_samples_tp(rc_sta_stats *rc_ss,uint32_t *cur_tp)
23042:uint16_t rc_get_initial_rate_config(rc_sta_stats *rc_ss)
23073:void rc_calc_prob_ewma(rc_rate_stats *rc_rs)
23109:_Bool rc_check_valid_rate(rc_sta_stats *rc_ss,uint16_t rate_config)
23138:uint16_t rc_new_random_rate(rc_sta_stats *rc_ss)
23211:void rc_update_counters(uint8_t sta_idx,uint32_t attempts,uint32_t failures,_Bool tx_ampdu,
23283:uint32_t rc_get_duration(uint16_t rate_config)
23320:void rc_update_bw_nss_max(uint8_t sta_idx,uint8_t bw_max,uint8_t nss_max)
23403:void rc_init_bcmc_rate(sta_info_tag *sta_entry,uint8_t basic_rate_idx)
23426:_Bool rc_check_fixed_rate_config(rc_sta_stats *rc_ss,uint16_t fixed_rate_config)
23482:uint32_t rc_calc_tp(rc_sta_stats *rc_ss,uint8_t sample_idx)
23515:_Bool rc_update_stats(rc_sta_stats *rc_ss,_Bool init)
23743:void rc_init(sta_info_tag *sta_entry)
23991:void rc_check(uint8_t sta_idx,_Bool *tx_ampdu)
24153:uint8_t rxu_cntrl_machdr_len_get(uint16_t frame_cntl)
24174:_Bool rxu_cntrl_protected_handle(uint8_t *frame,uint32_t statinfo)
24231:void rxu_mpdu_upload_and_indicate(rx_swdesc *p_rx_swdesc)
24281:_Bool rxu_mgt_frame_check(rx_swdesc *swdesc,uint8_t sta_idx)
24542:void rxu_cntrl_init(void)
24559:_Bool rxu_cntrl_frame_handle(rx_swdesc *swdesc)
24936:void rxu_cntrl_monitor_pm(mac_addr *addr)
24953:uint8_t rxu_cntrl_get_pm(void)
24963:void rxu_cntrl_evt(int dummy)
24980:void rxu_swdesc_upload_evt(int arg)
25038:void scanu_confirm(uint8_t status)
25067:void scanu_raw_send_cfm(uint8_t status,ke_task_id_t dst_id)
25082:void scanu_init(void)
25097:mac_scan_result * scanu_find_result(mac_addr *bssid_ptr,_Bool allocate)
25134:int scanu_frame_handler(rxu_mgt_ind *frame)
25476:mac_scan_result * scanu_search_by_bssid(mac_addr *bssid)
25488:mac_scan_result * scanu_search_by_ssid(mac_ssid *ssid,int *idx)
25526:void scanu_rm_exist_ssid(mac_ssid *ssid,int index)
25549:void scanu_scan_next(void)
25714:void scanu_dma_cb(void)
25879:void scanu_start(void)
25908:uint16_t txl_get_seq_ctrl(void)
25918:void sm_delete_resources(vif_info_tag *vif)
25954:void sm_frame_tx_cfm_handler(void *env,uint32_t status)
25971:void sm_init(void)
25982:void sm_get_bss_params(mac_addr **bssid,scan_chan_tag **chan)
26046:void sm_scan_bss(mac_addr *bssid,scan_chan_tag *chan_1)
26109:void sm_join_bss(mac_addr *bssid,scan_chan_tag *chan,_Bool passive)
26140:uint8_t sm_add_chan_ctx(uint8_t *p_chan_idx)
26163:void sm_send_next_bss_param(void)
26179:void sm_set_bss_param(void)
26248:void sm_disconnect_process(vif_info_tag *vif,uint16_t reason)
26267:void sm_deauth_cfm(void *env,uint32_t status)
26277:void sm_disconnect(uint8_t vif_index,uint16_t reason_code)
26334:void sm_connect_ind(uint16_t status)
26403:void sm_supplicant_deauth_cfm(void *env,uint32_t status)
26416:void sm_auth_send(uint16_t auth_seq,uint32_t *challenge)
26483:void sm_assoc_req_send(void)
26558:void sm_assoc_done(uint16_t aid)
26577:void sm_auth_handler(rxu_mgt_ind *param)
26629:void sm_assoc_rsp_handler(rxu_mgt_ind *param)
26687:int sm_deauth_handler(rxu_mgt_ind *param)
26726:void sm_handle_supplicant_result(uint8_t sta_id,uint16_t reason_code)
26795:uint32_t txu_cntrl_sec_hdr_append(txdesc *txdesc,uint32_t buf,_Bool umac_pol)
26858:int txu_cntrl_sechdr_len_compute(txdesc *txdesc,int *tail_len)
26927:void txu_cntrl_frame_build(txdesc *txdesc,uint32_t buf)
27073:_Bool txu_cntrl_push(txdesc *txdesc,uint8_t access_category)
27174:void txu_cntrl_tkip_mic_append(txdesc *txdesc,uint8_t ac)
27261:void txu_cntrl_cfm(txdesc *txdesc)
27296:void txu_cntrl_protect_mgmt_frame(txdesc *txdesc,uint32_t frame,uint16_t hdr_len)
27324:int _aid_list_delete(uint8_t *mac)
27352:void apm_sta_delete(uint8_t sta_idx,uint8_t *mac)
27374:void apm_tx_cfm_handler(void *env,uint32_t status)
27397:void apm_init(void)
27410:void apm_start_cfm(uint8_t status)
27458:void apm_send_next_bss_param(void)
27474:void apm_set_bss_param(void)
27519:void apm_stop(vif_info_tag *vif)
27550:_Bool apm_tx_int_ps_check(txdesc *txdesc)
27574:void apm_tx_int_ps_postpone(txdesc *txdesc,sta_info_tag *sta)
27618:txdesc * apm_tx_int_ps_get_postpone(vif_info_tag *vif,sta_info_tag *sta,int *stop)
27700:void apm_tx_int_ps_clear(vif_info_tag *vif,uint8_t sta_idx)
27734:void apm_sta_fw_delete(uint8_t sta_idx)
27746:void apm_sta_add(uint8_t sta_idx)
27771:void apm_send_mlme(vif_info_tag *vif,uint16_t fctl,mac_addr *ra,cfm_func_ptr *cfm_func,void *env,
27847:_Bool apm_embedded_enabled(vif_info_tag *vif)
27866:void apm_bcn_set(void)
27900:void apm_probe_req_handler(rxu_mgt_ind *param)
27961:void apm_auth_handler(rxu_mgt_ind *param)
27988:void apm_assoc_req_handler(rxu_mgt_ind *param,_Bool is_reassoc)
28173:fail:
28186:void apm_deauth_handler(rxu_mgt_ind *param)
28200:void apm_disassoc_handler(rxu_mgt_ind *param)
28219:void apm_beacon_handler(rxu_mgt_ind *param)
28228:void apm_sta_remove(uint8_t vif_idx,uint8_t sta_idx)
28244:char * cfg_api_element_dump(void *val,CFG_ELEMENT_TYPE type,char *strs)
28339:int cfg_api_element_general_set(cfg_element_entry *entry,void *arg1,void *arg2)
28388:int cfg_api_element_general_get(cfg_element_entry *entry,void *arg1,void *arg2)
28397:int cfg_api_element_set(uint32_t task,uint32_t element,uint32_t type,void *arg1,void *arg2)
28420:void co_list_init(co_list *list)
28431:void co_list_push_back(co_list *list,co_list_hdr *list_hdr)
28451:void co_list_push_front(co_list *list,co_list_hdr *list_hdr)
28468:co_list_hdr * co_list_pop_front(co_list *list)
28485:void co_list_extract(co_list *list,co_list_hdr *list_hdr)
28520:uint32_t co_list_cnt(co_list *list)
28540:void co_list_insert(co_list *list,co_list_hdr *element,
28575:void co_list_insert_after(co_list *list,co_list_hdr *prev_element,co_list_hdr *element)
28607:void co_list_remove(co_list *list,co_list_hdr *prev_element,co_list_hdr *element)
28639:uint32_t co_crc32(uint32_t addr,uint32_t len,uint32_t crc)
28657:void ke_evt_set(evt_field_t event)
28667:void ke_evt_clear(evt_field_t event)
28677:void bl_event_handle(int param)
28688:void bl_fw_statistic_dump(int param)
28706:void bl60x_fw_dump_statistic(int forced)
28721:void ke_evt_schedule(void)
28741:void ke_init(void)
28758:mblock_free * ke_mem_init(void)
28769:void * ke_malloc(uint32_t size)
28806:void ke_free(void *mem_ptr)
28863:void * ke_msg_alloc(ke_msg_id_t id,ke_task_id_t dest_id,ke_task_id_t src_id,uint16_t param_len)
28885:void ke_msg_send(void *param_ptr)
28907:void ke_msg_send_basic(ke_msg_id_t id,ke_task_id_t dest_id,ke_task_id_t src_id)
28920:void ke_msg_forward_and_change_id
28934:void ke_msg_free(void *mem_ptr)
28995:_Bool cmp_dest_id(co_list_hdr *msg,uint32_t dest_id)
29004:_Bool ke_task_local(ke_task_id_t id)
29018:ke_msg_func_t * ke_handler_search(ke_msg_id_t msg_id,ke_state_handler *state_handler)
29048:void ke_state_set(ke_task_id_t id,ke_state_t state_id)
29091:ke_state_t ke_state_get(ke_task_id_t id)
29118:void ke_task_schedule(int dummy)
29182:int ke_msg_discard(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id)
29191:int ke_msg_save(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id)
29202:void ke_timer_hw_set(ke_timer *timer)
29221:_Bool cmp_abs_time(co_list_hdr *timerA,co_list_hdr *timerB)
29231:_Bool cmp_timer_id(co_list_hdr *timer,uint32_t timer_task)
29246:void ke_timer_set(ke_msg_id_t timer_id,ke_task_id_t task_id,uint32_t delay)
29305:void ke_timer_clear(ke_msg_id_t timer_id,ke_task_id_t task_id)
29346:void ke_timer_schedule(int dummy)
29375:void bl60x_current_time_us(longlong *time_now)
29389:uint32_t mac_ie_find(uint32_t addr,uint16_t buflen,uint8_t ie_id)
29411:uint32_t mac_vsie_find(uint32_t addr,uint16_t buflen,uint8_t *oui,uint8_t ouilen)
29450:BufferDesc_t *
29451:GetTxEAPOLBuffer(cm_ConnectionInfo_t *connPtr,EAPOL_KeyMsg_Tx_t **ppTxEapol,BufferDesc_t *pBufDesc)
29481:void UpdateEAPOLWcbLenAndTransmit(BufferDesc_t *pBufDesc,UINT16 frameLen)
29501:BOOLEAN keyMgmtProcessMsgExt(keyMgmtInfoSta_t *pKeyMgmtInfoSta,EAPOL_KeyMsg_t *pKeyMsg)
29514:void KeyMgmtInitSta(cm_ConnectionInfo_t *connPtr)
29528:void keyMgmtSta_StartSession(cm_ConnectionInfo_t *connPtr,CHAR *pBssid,UINT8 *pStaAddr)
29548:void init_customApp_mibs(supplicantData_t *suppData)
29565:UINT8 supplicantIsEnabled(void *connectionPtr)
29584:void supplicantInitSession
29609:void supplicantDisable(cm_ConnectionInfo_t *connPtr)
29634:void supplicantEnable(void *connectionPtr,int security_mode,void *mcstCipher,void *ucstCipher,
29684:UINT16 keyMgmtFormatWpaRsnIe
29703:Status_e GeneratePWKMsg2(BufferDesc_t *pEAPoLBufDesc,UINT8 *pSNonce,UINT8 *pEAPOLMICKey,
29749:BOOLEAN KeyMgmtStaHsk_Recvd_PWKMsg1
29807:void supplicantInit(supplicantData_t *suppData)
29827:void allocSupplicantData(void *connectionPtr)
29850:UINT16 keyMgmtGetKeySize(cm_ConnectionInfo_t *connPtr,UINT8 isPairwise)
29866:uint8_t add_key_to_mac(cm_ConnectionInfo_t *connPtr,UINT8 pairwise)
29954:BufferReturnNotify_t * keyMgmtKeyGroupTxDone(void)
29983:Status_e GenerateGrpMsg2(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta)
30018:EAPOL_KeyMsg_t * KeyMgmtStaHsk_Recvd_GrpMsg1(BufferDesc_t *pEAPoLBufDesc)
30046:uint8_t add_mfp_key_to_mac(cm_ConnectionInfo_t *connPtr,UINT8 pairwise)
30086:void keyMgmtPlumbPairwiseKey(cm_ConnectionInfo_t *connPtr)
30109:BufferReturnNotify_t * keyMgmtKeyPairwiseTxDone(void)
30128:Status_e GeneratePWKMsg4(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta,
30176:EAPOL_KeyMsg_t * KeyMgmtStaHsk_Recvd_PWKMsg3(BufferDesc_t *pEAPoLBufDesc)
30204:void ProcessKeyMgmtDataSta(BufferDesc_t *pBufDesc,IEEEtypes_MacAddr_t *sa,IEEEtypes_MacAddr_t *da)
30231:UINT8 ProcessEAPoLPkt(BufferDesc_t *bufDesc,IEEEtypes_MacAddr_t *sa,IEEEtypes_MacAddr_t *da)
30258:uchar process_rsn_ie(uint8_t *rsn_ie,Cipher_t *mcstCipher,Cipher_t *ucstCipher,
30370:uchar process_wpa_ie(uint8_t *wpa_ie,Cipher_t *mcstCipher,Cipher_t *ucstCipher)
30435:void keyMgmtStaRsnSecuredTimeoutHandler(void *env)
30451:void supplicantGenerateRand(UINT8 *dataOut,UINT32 length)
30463:void ComputeEAPOL_MIC(EAPOL_KeyMsg_t *pKeyMsg,UINT16 data_length,UINT8 *MIC_Key,UINT8 MIC_Key_length
30504:UINT16 keyMgmtGetKeySize_internal(RSNConfig_t *pRsnConfig,UINT8 isPairwise)
30536:int isApReplayCounterFresh(keyMgmtInfoSta_t *pKeyMgmtInfoSta,UINT8 *pRxReplayCount)
30572:void updateApReplayCounter(keyMgmtInfoSta_t *pKeyMgmtStaInfo,UINT8 *pRxReplayCount)
30601:void formEAPOLEthHdr(EAPOL_KeyMsg_Tx_t *pTxEapol,IEEEtypes_MacAddr_t *da,IEEEtypes_MacAddr_t *sa)
30618:BOOLEAN IsEAPOL_MICValid(EAPOL_KeyMsg_t *pKeyMsg,UINT8 *pMICKey)
30646:UINT16 KeyMgmtSta_PopulateEAPOLLengthMic
30678:KDE_t * parseKeyKDE(IEEEtypes_InfoElementHdr_t *pIe)
30697:KDE_t * parseKeyKDE_DataType(UINT8 *pData,SINT32 dataLen,IEEEtypes_KDEDataType_e KDEDataType)
30731:KDE_t * parseKeyDataGTK(UINT8 *pKey,UINT16 len,KeyData_t *pGRKey)
30757:void KeyMgmtSta_ApplyKEK(EAPOL_KeyMsg_t *pKeyMsg,KeyData_t *pGRKey,UINT8 *EAPOL_Encr_Key)
30797:BOOLEAN KeyMgmtSta_IsRxEAPOLValid(keyMgmtInfoSta_t *pKeyMgmtInfoSta,EAPOL_KeyMsg_t *pKeyMsg)
30824:void KeyMgmtSta_PrepareEAPOLFrame
30872:BOOLEAN supplicantAkmIsWpaWpa2(AkmSuite_t *pAkm)
30895:BOOLEAN supplicantAkmIsWpa2(AkmSuite_t *pAkm)
30913:BOOLEAN supplicantAkmIsWpaWpa2Psk(AkmSuite_t *pAkm)
30937:BOOLEAN supplicantAkmUsesKdf(AkmSuite_t *pAkm)
30956:void supplicantConstructContext
30991:void KeyMgmt_DerivePTK(IEEEtypes_MacAddr_t *pAddr1,IEEEtypes_MacAddr_t *pAddr2,UINT8 *pNonce1,
31015:void KeyMgmtSta_DeriveKeys
31044:void SetEAPOLKeyDescTypeVersion
31063:EAPOL_KeyMsg_t *
31064:GetKeyMsgNonceFromEAPOL(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta)
31091:EAPOL_KeyMsg_t *
31092:ProcessRxEAPOL_PwkMsg3(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta)
31124:EAPOL_KeyMsg_t *
31125:ProcessRxEAPOL_GrpMsg1(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta)
31171:void KeyMgmtResetCounter(keyMgmtInfoSta_t *pKeyMgmtInfo)
31188:void keyMgmtSta_StartSession_internal(keyMgmtInfoSta_t *pKeyMgmtInfoSta,UINT32 expiry)
31207:void KeyMgmtSta_InitSession(keyMgmtInfoSta_t *pKeyMgmtInfoSta)
31226:void set_psk(char *pSsid,UINT8 ssidLen,char *phrase)
31244:void remove_psk(char *pSsid,UINT8 ssidLen)
31256:void bl_sha256_crypto_kdf
31295:UINT8 * pmkCacheFindPSK(UINT8 *pSsid,UINT8 ssidLen)
31324:void pmkCacheSetPassphrase(UINT8 *pSsid,UINT8 ssidLen,UINT8 *pPassphrase,UINT8 PassphraseLen)
31346:void pmkCacheInit(void)
31362:void pmkCacheRomInit(void)
31378:pmkElement_t * pmkCacheNewElement(void)
31414:void pmkCacheUpdateReplacementRank(pmkElement_t *pPMKElement)
31448:pmkElement_t * pmkCacheFindPSKElement(UINT8 *pSsid,UINT8 ssidLen)
31479:void pmkCacheAddPSK(UINT8 *pSsid,UINT8 ssidLen,UINT8 *pPSK,UINT8 pPSKLen)
31505:void pmkCacheDeletePSK(UINT8 *pSsid,UINT8 ssidLen)
31525:UINT8 pmkCacheGetHexNibble(UINT8 nibble)
31552:void pmkCacheGeneratePSK(UINT8 *pSsid,UINT8 ssidLen,UINT8 *pPassphrase,UINT8 PassphraseLen,
31588:void prepare_key(uchar *key_data_ptr,int key_data_len,rc4_key *key)
31625:void rc4(uchar *buffer_ptr,int buffer_len,int skip,rc4_key *key)
31666:void RC4_Encrypt(uchar *Encr_Key,uchar *IV,ushort iv_length,uchar *Data,ushort data_length,
31691:int sha256_compress(sha256_state *md,UINT8 *msgBuf,UINT8 *pScratchMem)
31772:void sha256_init(sha256_state *md)
31792:void sha256_vector(size_t num_elem,UINT8 **addr,size_t *len,UINT8 *mac,UINT8 *pScratchMem)
31902:void hmac_sha256_vector(UINT8 *key,size_t key_len,size_t num_elem,UINT8 **addr,size_t *len,
31973:void KeyMgmtInit(cm_ConnectionInfo_t *connPtr)
31997:BufferDesc_t *
31998:PrepDefaultEapolMsg(cm_ConnectionInfo_t *connPtr,EAPOL_KeyMsg_Tx_t **pTxEapolPtr,
32032:Status_e GeneratePWKMsg1(cm_ConnectionInfo_t *connPtr,BufferDesc_t *pBufDesc)
32072:Status_e GeneratePWKMsg3(cm_ConnectionInfo_t *connPtr,BufferDesc_t *pBufDesc)
32133:Status_e ProcessPWKMsg4(BufferDesc_t *pBufDesc)
32171:Status_e GenerateApEapolMsg(cm_ConnectionInfo_t *connPtr,keyMgmtState_e msgState,
32221:Status_e ProcessPWKMsg2(BufferDesc_t *pBufDesc)
32258:BOOLEAN SendEAPOLMsgUsingBufDesc(cm_ConnectionInfo_t *connPtr,BufferDesc_t *pBufDesc)
32279:Status_e ProcessKeyMgmtDataAp(BufferDesc_t *pBufDesc)
32320:void InitStaKeyInfo(void *pConn,SecurityMode_t *secType,Cipher_t *pwCipher,UINT16 staRsnCap,
32338:void RemoveAPKeyInfo(void *pConn)
32352:void InitGroupKey(cm_ConnectionInfo_t *connPtr)
32383:void GenerateGTK_internal(KeyData_t *grpKeyData,UINT8 *nonce,IEEEtypes_Addr_t *StaMacAddr)
32411:void PopulateKeyMsg(EAPOL_KeyMsg_Tx_t *tx_eapol_ptr,Cipher_t *Cipher,UINT16 Type,UINT32 *replay_cnt,
32475:void prepareKDE(EAPOL_KeyMsg_Tx_t *tx_eapol_ptr,KeyData_t *grKey,Cipher_t *cipher)
32524:BOOLEAN Encrypt_keyData(EAPOL_KeyMsg_Tx_t *tx_eapol_ptr,UINT8 *EAPOL_Encr_Key,Cipher_t *cipher)
32570:void KeyMgmtAp_DerivePTK(UINT8 *pPMK,IEEEtypes_MacAddr_t *da,IEEEtypes_MacAddr_t *sa,UINT8 *ANonce,
32588:BOOLEAN KeyData_CopyWPAWP2(EAPOL_KeyMsg_Tx_t *pTxEAPOL,void *pIe)
32607:BOOLEAN KeyData_UpdateKeyMaterial
32625:void ROM_InitGTK(KeyData_t *grpKeyData,UINT8 *nonce,IEEEtypes_Addr_t *StaMacAddr)
32637:void InitKeyMgmtInfo(apKeyMgmtInfoStaRom_t *pKeyMgmtInfo,SecurityMode_t *secType,Cipher_t *pwCipher,
32654:apInfo_t * cm_GetApInfo(cm_ConnectionInfo_t *connPtr)
32670:apSpecificData_t * cm_GetApData(cm_ConnectionInfo_t *connPtr)
32686:Status_e cm_AllocAPResources(cm_ConnectionInfo_t *connPtr)
32712:Status_e cm_AllocResources(cm_ConnectionInfo_t *connPtr)
32728:cm_ConnectionInfo_t *
32729:cm_InitConnection(UINT8 conType,UINT8 bssType,UINT8 bssNum,IEEEtypes_MacAddr_t *bssId,
32767:void cm_DeleteConnection(cm_ConnectionInfo_t *connPtr)
32788:void cm_SetPeerAddr(cm_ConnectionInfo_t *connPtr,IEEEtypes_MacAddr_t *bssId,
32806:void cm_SetComData(cm_ConnectionInfo_t *connPtr,char *ssid)
32829:void assert_rec(char *condition,char *file,int line)
32848:void assert_err(char *condition,char *file,int line)
32858:void assert_warn(char *condition,char *file,int line)
32869:void coex_dump_pta(void)
32880:void coex_dump_wifi(void)
32889:void coex_wifi_rf_forece_enable(int enable)
32904:void coex_wifi_pti_forece_enable(int enable)
32925:void coex_wifi_pta_forece_enable(int enable)
32959:void wifi_main(void *param)
33010:void ipc_emb_notify(void)
33034:void ipc_emb_wait(void)
33047:void ipc_emb_init(void)
33067:void ipc_emb_tx_irq(void)
33086:void ipc_emb_tx_evt(int queue_idx)
33137:void ipc_emb_cfmback_irq(void)
33163:void ipc_emb_txcfm_ind(uint32_t queue_bits)
33175:void ipc_emb_msg_irq(void)
33190:void ipc_emb_msg_evt(int dummy)
33241:void ipc_emb_msg_dma_int_handler(void)
33252:void ipc_emb_dbg_dma_int_handler(void)
33263:void ipc_emb_dump(void)
33272:void rf_set_channel(uint8_t bandwidth,uint16_t channel_freq)
33284:void rf_dump_status(void)
33295:void mdm_txcbwmax_setf(uint8_t txcbwmax)
33310:void phy_config_rxgain(int offset)
33335:void agc_config(void)
33371:void mdm_reset(void)
33381:void phy_powroffset_set(int8_t *power_offset)
33403:void phy_hw_set_channel(uint8_t band,uint16_t freq,uint16_t freq1,uint8_t chantype)
33461:void phy_get_channel(phy_channel_info *info,uint8_t index)
33473:void phy_set_channel(uint8_t band,uint8_t type,uint16_t prim20_freq,uint16_t center1_freq,
33497:void phy_get_version(uint32_t *version_1,uint32_t *version_2)
33510:_Bool phy_vht_supported(void)
33527:void phy_init(phy_cfg_tag *config)
33620:uint8_t phy_get_nss(void)
33631:uint8_t phy_get_ntx(void)
33640:void phy_stop(void)
33651:_Bool phy_ldpc_tx_supported(void)
33660:uint8_t phy_get_mac_freq(void)
33669:void phy_get_rf_gain_idx(int8_t *power,uint8_t *idx)
33682:void phy_get_rf_gain_capab(int8_t *max,int8_t *min)
33697:void mpif_clk_init(void)
33706:void phy_mdm_isr(void)
33717:void phy_rc_isr(void)
33733:void pa_init(void)
33768:void pa_input(uint8_t id,rx_hd *rhd)
33809:void pa_adapt(uint8_t id)
33949:uint8_t hal_get_capcode(void)
33960:void hal_set_capcode(uint32_t capcode)
33970:_Bool hal_get_temperature(int16_t *temperature)
33980:void hal_set_temperature(int16_t temperature)
33990:void trpc_update_power(int8_t (*power_rate_table) [8])
34018:void trpc_power_get(int8_t *power_rate_table)
34028:void trpc_update_power_11b(int8_t *power_rate_table)
34048:void trpc_update_power_11g(int8_t *power_rate_table)
34069:void trpc_update_power_11n(int8_t *power_rate_table)
34090:void trpc_init(void)
34108:int8_t trpc_get_rf_max_power(void)
34117:int8_t trpc_get_rf_min_power(void)
34126:uint8_t trpc_get_power_idx(uint8_t formatmod,uint8_t mcs,int8_t pwr_dbm)
34187:uint8_t trpc_get_default_power_idx(uint8_t formatmod,uint8_t mcs)
34216:void trpc_update_vs_channel(int8_t channel_MHz)
34233:void trpc_update_vs_temperature(int8_t temperature)
34249:void phy_tcal_reset(void)
34265:void phy_tcal_start(void)
34275:void phy_tcal_txpwr(int16_t curr_temperature)
34290:void phy_tcal_handle(void)
34333:void phy_tcal_callback(int16_t temperature)
34350:void rf_fsm_ctrl_en_setf(uint32_t x)
34362:void rf_fsm_st_dbg_en_setf(uint32_t x)
34374:void rf_tx_dvga_gain_qdb_gc3_setf(uint32_t x)
34386:void rf_tx_dvga_gain_qdb_gc2_setf(uint32_t x)
34398:void rf_tx_dvga_gain_qdb_gc1_setf(uint32_t x)
34410:void rf_tx_dvga_gain_qdb_gc0_setf(uint32_t x)
34422:void rf_tx_dvga_gain_qdb_gc7_setf(uint32_t x)
34434:void rf_tx_dvga_gain_qdb_gc6_setf(uint32_t x)
34446:void rf_tx_dvga_gain_qdb_gc5_setf(uint32_t x)
34458:void rf_tx_dvga_gain_qdb_gc4_setf(uint32_t x)
34470:void rf_tx_dvga_gain_qdb_gc11_setf(uint32_t x)
34482:void rf_tx_dvga_gain_qdb_gc10_setf(uint32_t x)
34494:void rf_tx_dvga_gain_qdb_gc9_setf(uint32_t x)
34506:void rf_tx_dvga_gain_qdb_gc8_setf(uint32_t x)
34518:void rf_tx_dvga_gain_qdb_gc15_setf(uint32_t x)
34530:void rf_tx_dvga_gain_qdb_gc14_setf(uint32_t x)
34542:void rf_tx_dvga_gain_qdb_gc13_setf(uint32_t x)
34554:void rf_tx_dvga_gain_qdb_gc12_setf(uint32_t x)
34564:void wait_us(uint32_t us)
34582:void _print_channel_info(void)
34605:void rfc_init(uint32_t xtalfreq_hz)
34760:void rfc_rxdfe_set_notch0(uint8_t en,uint8_t alpha,int8_t nrmfc)
34773:void rfc_config_channel(uint32_t channel_freq)
34819:void rfc_coex_force_to(uint32_t force_enable,uint32_t bbmode)
34834:uint32_t rfc_get_power_level(uint32_t formatmod,int32_t power)
34850:void rfc_apply_tx_dvga(int8_t *dvga_qdb)
34878:void rfc_apply_tx_power_offset(uint8_t channel,int8_t *power_offset)
34942:void rf_pri_set_gain_table_regs(void)
34986:void rf_pri_manu_pu(uint32_t mode)
35027:void rf_pri_save_state_for_cal(void)
35064:void rf_pri_restore_state_for_cal(void)
35101:void rf_pri_singen_start(void)
35113:uint32_t rf_pri_pm_pwr(void)
35132:void rf_pri_start_txdfe(void)
35144:int32_t rf_pri_pm_pwr_avg(uint32_t iq,uint32_t acc_len)
35165:void rf_pri_txcal_config_hw(void)
35220:uint16_t rf_pri_fcal_meas(uint32_t cw)
35236:void rf_pri_rccal_config(uint32_t rbb_fc)
35248:void rf_pri_rccal_config(uint32_t iq,uint32_t rbb_fc)
35265:void rf_pri_txcal_config(uint32_t param_ind,int32_t val)
35304:int32_t rf_pri_txcal_search_core
35373:void rf_pri_singen_config(uint32_t fcw)
35387:uint32_t rf_pri_rccal_iq(uint32_t iq)
35462:void rf_pri_config_channel(void)
35492:uint32_t rf_pri_roscal_iq(uint32_t iq)
35547:void rf_pri_chipv(uint8_t chipv)
35665:void rf_pri_update_tx_power_offset(uint8_t channel,int8_t *power_offset)
35689:void rf_pri_get_notch_param(uint32_t chanfreq_MHz,uint8_t *ncf_on,int32_t *ncf_freq_Hz)
35710:void rf_pri_update_param(uint32_t chanfreq_MHz)
35847:void rf_pri_xtalfreq(uint32_t xtalfreq)
36216:uint32_t rf_pri_get_vco_freq_cw(uint32_t chanfreq_MHz)
36233:uint32_t rf_pri_get_vco_idac_cw(uint32_t chanfreq_MHz)
36250:int32_t rf_pri_get_txgain_max(void)
36259:int32_t rf_pri_get_txgain_min(void)
36268:uint32_t rf_pri_get_txgain_index(int32_t pwr,uint32_t mode)
36293:void rf_pri_query_txgain_table(uint32_t index,uint32_t *rfg_index,uint32_t *dg)
36307:void rf_pri_update_dvga_os(int8_t dvga_os)
36328:void rf_pri_tx_gain_comp(int32_t Tsens)
36417:void rf_pri_txcal(void)
36517:void rf_pri_roscal(void)
36570:void rf_pri_rccal(void)
36654:void rf_pri_lo_acal(void)
36706:void rf_pri_fcal(void)
36808:void rf_pri_full_cal(void)
36828:void rf_pri_restore_cal_reg(void)
36861:void rf_pri_init(uint8_t reset,uint8_t chipv)
36908:void rf_pri_update_power_offset(int32_t *power_offset)
36927:int phyif_utils_decode(phyif_utils_recvtable_t *vec,int8_t *ppm)
36953:void sysctrl_init(void)
36964:void intc_spurious(void)
36974:void intc_enable_irq(int index)
36984:void intc_init(void)
37016:void mac_irq(void)
37037:void bl_irq_handler(void)
37051:void blmac_pwr_mgt_setf(uint8_t pwrmgt)
37070:chan_ctxt_tag * chan_get_next_chan(void)
37136:void chan_conn_less_delay_prog(void)
37147:void chan_upd_nb_rem_slots(uint32_t current_time)
37168:_Bool chan_tbtt_detect_conflict(void)
37185:void chan_tbtt_insert(chan_tbtt_tag *p_tbtt_entry)
37268:void chan_upd_ctxt_status(chan_ctxt_tag *p_chan_entry,uint8_t next_status)
37323:void chan_switch_start(chan_ctxt_tag *p_chan_entry)
37352:void chan_conn_less_delay_evt(void *env)
37388:void chan_tbtt_switch_evt(void *env)
37425:void chan_tbtt_schedule(chan_tbtt_tag *p_tbtt_entry)
37472:void chan_cde_evt(void *env)
37561:void chan_pre_switch_channel(void)
37662:void chan_goto_idle_cb(void)
37711:void chan_tx_cfm(void *dummy,uint32_t status)
37732:void chan_ctxt_op_evt(void *env)
37804:void chan_init(void)
37840:void chan_scan_req(uint8_t band,uint16_t freq,int8_t pwr,uint32_t duration_us,uint8_t vif_index)
37874:uint8_t chan_roc_req(mm_remain_on_channel_req *req,ke_task_id_t taskid)
37955:uint8_t chan_ctxt_add(mm_chan_ctxt_add_req *p_add_req,uint8_t *idx)
37995:void chan_ctxt_del(uint8_t chan_idx)
38018:void chan_ctxt_update(mm_chan_ctxt_update_req *p_upd_req)
38047:void chan_tbtt_switch_update(vif_info_tag *p_vif_entry,uint32_t tbtt_time)
38068:void chan_bcn_to_evt(vif_info_tag *p_vif_entry)
38110:void chan_bcn_detect_start(vif_info_tag *p_vif_entry)
38142:_Bool chan_is_on_channel(vif_info_tag *p_vif_entry)
38163:_Bool chan_is_tx_allowed(vif_info_tag *p_vif_entry)
38181:_Bool chan_is_on_operational_channel(vif_info_tag *p_vif_entry)
38196:void chan_update_tx_power(chan_ctxt_tag *p_chan_entry)
38238:void chan_ctxt_link(uint8_t vif_idx,uint8_t chan_idx)
38285:void chan_ctxt_unlink(uint8_t vif_idx)
38345:void hal_dma_init(void)
38358:void hal_dma_push(hal_dma_desc_tag *desc,int type)
38392:void hal_dma_evt(int dma_queue)
38418:uint8_t blmac_soft_reset_getf(void)
38435:void blmac_wt_2_crypt_clk_ratio_setf(uint8_t wt2cryptclkratio)
38449:void blmac_rx_flow_cntrl_en_setf(void)
38461:void blmac_key_sto_ram_reset_setf(void)
38473:void hal_machw_idle_req(void)
38494:void hal_machw_stop(void)
38512:void hal_machw_init(void)
38615:void hal_machw_disable_int(void)
38628:void hal_machw_reset(void)
38655:uint8_t hal_machw_search_addr(mac_addr *addr)
38667:void hal_machw_monitor_mode(void)
38683:_Bool hal_machw_sleep_check(void)
38710:void hal_machw_gen_handler(void)
38866:void hal_mib_dump(void)
38878:int mm_monitor_channel_req_handler
38914:int mm_monitor_enable_req_handler
38946:int mm_cfg_rssi_req_handler
38967:int mm_set_ps_options_req_handler
38987:int mm_tim_update_req_handler
38998:int mm_bcn_change_req_handler
39009:int mm_remain_on_channel_req_handler
39034:int mm_sta_del_req_handler
39046:int mm_sta_add_req_handler
39065:int mm_key_del_req_handler
39080:int mm_key_add_req_handler
39107:int mm_set_power_req_handler
39129:int mm_set_idle_req_handler
39177:int mm_reset_req_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id)
39194:int mm_version_req_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id)
39212:int mm_start_req_handler
39240:int mm_set_ps_mode_req_handler
39267:int mm_force_idle_req_handler
39299:int mm_hw_config_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id)
39549:int bl60x_edca_get(int ac,uint8_t *aifs,uint8_t *cwmin,uint8_t *cwmax,uint16_t *txop)
39586:void bl_init(void)
39607:void bl_reset_evt(int dummy)
39624:int bl_sleep(void)
39665:uint32_t bl_nap_calculate(void)
39695:void rx_swdesc_init(void)
39717:int scan_cancel_req_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id)
39736:int scan_start_req_handler
39771:int mm_scan_channel_end_ind_handler
39807:int mm_scan_channel_start_ind_handler
39834:void txl_buffer_reinit(void)
39847:void txl_buffer_init(void)
39911:void txl_buffer_reset(void)
39922:txl_buffer_tag * txl_buffer_alloc(txdesc *txdesc,uint8_t access_category,uint8_t user_idx)
39965:void txl_buffer_update_thd(txdesc *txdesc)
40017:void txl_cfm_init(void)
40032:void txl_cfm_push(txdesc *txdesc,uint32_t status,uint8_t access_category)
40047:void txl_cfm_evt(int access_category)
40071:void txl_cfm_flush(uint8_t access_category,co_list *list,uint32_t status)
40108:void txl_cfm_dma_int_handler(void)
40119:void txl_cfm_dump(void)
40143:void bam_init(void)
40154:void bam_send_air_action_frame
40255:int rxu_mgt_ind_handler(ke_msg_id_t msgid,rxu_mgt_ind *param,ke_task_id_t dest_id,
40304:void co_pack8p(uint32_t dst,uint8_t *src,uint32_t len)
40324:int phy_freq_to_channel(uint8_t band,uint16_t freq)
40361:uint16_t phy_channel_to_freq(uint8_t band,int channel)
40391:uint32_t me_add_ie_ssid(uint32_t *frame_addr,uint8_t ssid_len,uint8_t *p_ssid)
40410:uint32_t me_add_ie_supp_rates(uint32_t *frame_addr,mac_rateset *p_rateset)
40436:uint32_t me_add_ie_ext_supp_rates(uint32_t *frame_addr,mac_rateset *p_rateset)
40456:uint32_t me_add_ie_ds(uint32_t *frame_addr,uint8_t channel)
40469:uint32_t me_add_ie_erp(uint32_t *frame_addr,uint8_t erp_info)
40482:uint32_t me_add_ie_rsn(uint32_t *frame_addr,uint8_t enc_type)
40568:uint32_t me_add_ie_wpa(uint32_t *frame_addr,uint8_t enc_type)
40622:uint32_t me_add_ie_tim(uint32_t *frame_addr,uint8_t dtim_period)
40635:uint32_t me_add_ie_ht_capa(uint32_t *frame_addr)
40663:uint32_t me_add_ie_ht_oper(uint32_t *frame_addr,vif_info_tag *p_vif_entry)
40696:uint16_t me_build_authenticate
40730:uint16_t me_build_deauthenticate(uint32_t frame,uint16_t reason_code)
40743:uint16_t me_build_associate_req
40908:uint16_t me_build_add_ba_req(uint32_t frame,bam_env_tag *bam_env)
40933:uint16_t me_build_add_ba_rsp(uint32_t frame,bam_env_tag *bam_env,uint16_t param,uint8_t dialog_token
40960:uint16_t me_build_del_ba(uint32_t frame,bam_env_tag *bam_env,uint16_t reason_code)
40981:void me_extract_rate_set(uint32_t buffer,uint16_t buflen,mac_rateset *mac_rate_set_ptr)
41028:void me_extract_power_constraint(uint32_t buffer,uint16_t buflen,mac_bss_info *bss)
41046:void me_extract_country_reg(uint32_t buffer,uint16_t buflen,mac_bss_info *bss)
41089:void me_extract_mobility_domain(uint32_t buffer,uint16_t buflen,mac_bss_info *bss)
41109:int me_extract_csa(uint32_t buffer,uint16_t buflen,uint8_t *mode,mm_chan_ctxt_add_req *chan_desc)
41196:uint16_t me_build_beacon(uint32_t frame,uint8_t vif_idx,uint16_t *tim_oft,uint8_t *tim_len,
41323:uint16_t me_build_probe_rsp(uint32_t frame,uint8_t vif_idx)
41420:uint16_t me_build_associate_rsp
41506:int me_rc_set_rate_req_handler
41540:int me_rc_stats_req_handler
41578:int me_traffic_ind_req_handler
41619:int me_sta_del_req_handler
41642:int me_set_control_port_req_handler
41669:int me_chan_config_req_handler
41681:int mm_set_ps_mode_cfm_handler
41702:int mm_set_idle_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id)
41722:int me_config_req_handler
41757:int me_set_ps_disable_req_handler
41800:int me_set_active_req_handler
41844:int me_sta_add_req_handler
41944:void cfm_raw_send(void *env,uint32_t status)
41954:int scanu_raw_send_req_handler
41987:int scanu_join_req_handler
42007:int scanu_start_req_handler
42023:int rxu_mgt_ind_handler(ke_msg_id_t msgid,rxu_mgt_ind *param,ke_task_id_t dest_id,
42036:int scan_done_ind_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id)
42047:int scan_start_cfm_handler
42062:int me_set_ps_disable_cfm_handler
42090:int mm_bss_param_setting_handler
42108:int sm_rsp_timeout_ind_handler
42127:int scanu_start_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id)
42155:int mm_connection_loss_ind_handler
42181:int scanu_join_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id)
42250:int sm_connect_req_handler
42341:int rxu_mgt_ind_handler(ke_msg_id_t msgid,rxu_mgt_ind *param,ke_task_id_t dest_id,
42381:int mm_set_vif_state_cfm_handler
42424:int me_set_active_cfm_handler
42469:int mm_sta_add_cfm_handler
42507:int sm_disconnect_req_handler
42528:int apm_sta_connect_timeout_ind_handler
42553:int rxu_mgt_ind_handler(ke_msg_id_t msgid,rxu_mgt_ind *param,ke_task_id_t dest_id,
42601:int apm_sta_add_cfm_handler
42618:int apm_sta_del_req_handler
42639:int apm_stop_cac_req_handler
42659:int apm_conf_max_sta_req_handler
42677:int apm_start_cac_req_handler
42726:int me_set_ps_disable_cfm_handler
42752:int mm_bss_param_setting_handler
42770:int mm_bcn_change_cfm_handler
42788:int apm_stop_req_handler
42822:int apm_start_req_handler
42964:int me_set_active_cfm_handler
42993:int hostapd_mgt_ind_handler
43011:void dump_cfg_entries(void)
43042:int cfg_start_req_handler
43071:void dbg_init(void)
43083:void dbg_test_print(char *fmt,...)
43113:int dbg_get_sys_stat_req_handler
43130:int dbg_mem_write_req_handler
43149:int dbg_mem_read_req_handler
43165:int dbg_set_sev_filter_req_handler
43178:int dbg_set_mod_filter_req_handler
43193:co_list_hdr *
43194:ke_queue_extract(co_list *queue,anon_subr__Bool_co_list_hdr_ptr_uint32_t *func,uint32_t arg)
43231:void bl_aes_128(UINT8 *key,UINT8 *input,UINT8 *output)
43241:void xor_128(UINT8 *a,UINT8 *b,UINT8 *out)
43263:void leftshift_onebit(UINT8 *input,UINT8 *output)
43288:void generate_subkey(UINT8 *key,UINT8 *K1,UINT8 *K2)
43318:void padding(UINT8 *lastb,UINT8 *pad,int length)
43344:void bl_aes_cmac(UINT8 *key,UINT8 *input,int length,UINT8 *mac)
43398:int BL_AES_MEMCMP(UINT8 *dst,UINT8 *src,int len)
43418:void BL_AES_MEMSET(UINT8 *dst,UINT8 val,int size)
43434:void BL_AES_MEMCPY(UINT8 *dst,UINT8 *src,int size)
43461:int BL_AesEncrypt(UINT8 *kek,UINT8 kekLen,UINT8 *data,UINT8 *ret)
43476:int BL_AesWrap(UINT8 *kek,UINT8 kekLen,UINT32 n,UINT8 *plain,UINT8 *keyIv,UINT8 *cipher)
43520:int BL_AesUnWrap(UINT8 *kek,UINT8 kekLen,UINT32 n,UINT8 *cipher,UINT8 *keyIv,UINT8 *plain)
43572:void Bl_hmac_md5(UINT8 *text_data,int text_len,UINT8 *key,int key_len,void *digest)
43621:void Bl_hmac_sha1(uchar **ppText,int *pTextLen,int textNum,uchar *key,int key_len,uchar *output,
43679:void Bl_PRF(uchar *key,int key_len,uchar *prefix,int prefix_len,uchar *data,int data_len,
43722:void wpa_MD5Transform(UINT32 *state,ulong *block)
43908:void wpa_MD5Init(Bl_MD5_CTX *context)
43923:void wpa_MD5Update(Bl_MD5_CTX *context,UINT8 *input,UINT32 inputLen)
43958:void wpa_MD5Final(uchar *digest,Bl_MD5_CTX *context)
43984:int rijndaelKeySetupEnc(u32 *rk,u8 *cipherKey,int keyBits)
44027:void rijndael_set_key(rijndael_ctx *ctx,u8 *key,int bits,int encrypt)
44093:void rijndael_decrypt(rijndael_ctx *ctx,u8 *src,u8 *dst)
44193:void rijndael_encrypt(rijndael_ctx *ctx,u8 *src,u8 *dst)
44293:void Bl_SHA1ProcessMessageBlock(Bl_SHA1_CTX *context)
44415:int Bl_SHA1Init(Bl_SHA1_CTX *context)
44436:int Bl_SHA1Final(Bl_SHA1_CTX *context,UINT8 *Message_Digest)
44513:int Bl_SHA1Update(Bl_SHA1_CTX *context,UINT8 *message_array,uint length)
44564:Status_e supplicantRestoreDefaults(void)
44579:void supplicantFuncInit(void)
44591:void ap_setpsk(cm_ConnectionInfo_t *connPtr,CHAR *ssid,CHAR *passphrase)
44614:void ap_resetConfiguration(cm_ConnectionInfo_t *connPtr)
44647:void InitializeAp(cm_ConnectionInfo_t *connPtr)
44680:int bl60x_check_mac_status(int *is_ok)
44705:void helper_record_dump(void)
44740:void helper_record_rc_rf_states(uint *param_1,uint *param_2)
44757:void helper_record_all_states(char *func_name)
44801:u32_conflict ipc_emb2app_rawstatus_get(void)
44810:void ipc_host_init(ipc_host_env_tag *env,ipc_host_cb_tag *cb,ipc_shared_env_tag *shared_env_ptr,
44837:int ipc_host_msg_push(ipc_host_env_tag *env,void *msg_buf,uint16_t len)
44860:uint32_t ipc_host_get_rawstatus(ipc_host_env_tag *env)
44872:txdesc_host * ipc_host_txdesc_get(ipc_host_env_tag *env)
44900:void ipc_host_txdesc_push(ipc_host_env_tag *env,void *host_id)
44918:void ipc_host_irq(ipc_host_env_tag *env,uint32_t status)
44984:void ipc_host_enable_irq(ipc_host_env_tag *env,uint32_t value)
44996:void ipc_host_disable_irq_e2a(void)
45006:int bl_main_disconnect(void)
45016:int bl_main_powersaving(int mode)
45028:int bl_main_denoise(int mode)
45040:int bl_main_monitor(void)
45054:int bl_main_phy_up(void)
45072:int bl_main_monitor_channel_set(int channel,int use_40MHZ)
45085:int bl_main_if_remove(uint8_t vif_index)
45100:int bl_main_raw_send(uint8_t *pkt,int len)
45112:int bl_main_rate_config(uint8_t sta_idx,uint16_t fixed_rate_cfg)
45124:int bl_main_set_country_code(char *country_code)
45135:int bl_main_get_channel_nums(void)
45144:int bl_main_if_add(int is_sta,netif *netif,uint8_t *vif_index)
45187:int bl_main_apm_start(char *ssid,char *password,int channel,uint8_t vif_index,uint8_t hidden_ssid)
45211:int bl_main_apm_stop(uint8_t vif_index)
45227:int bl_main_apm_sta_cnt_get(uint8_t *sta_cnt)
45237:int bl_main_apm_sta_info_get(wifi_apm_sta_info *apm_sta_info,uint8_t idx)
45261:int bl_main_apm_sta_delete(uint8_t sta_idx)
45287:int bl_main_apm_remove_all_sta(void)
45308:int bl_main_conf_max_sta(uint8_t max_sta_supported)
45320:int bl_main_cfg_task_req
45333:int bl_main_scan(void)
45343:int bl_cfg80211_connect(bl_hw *bl_hw,cfg80211_connect_params *sme)
45363:int bl_main_connect(uint8_t *ssid,int ssid_len,uint8_t *psk,int psk_len,uint8_t *pmk,int pmk_len,
45394:void bl_main_event_handle(void)
45405:void bl_main_lowlevel_init(void)
45415:int bl_main_rtthread_start(bl_hw **bl_hw)
45470:int bl_handle_dynparams(bl_hw *bl_hw)
45543:int bl_send_msg(bl_hw *bl_hw,void *msg_params,int reqcfm,lmac_msg_id_t reqid,void *cfm)
45606:void * bl_msg_zalloc(lmac_msg_id_t id,lmac_task_id_t dest_id,uint16_t param_len)
45632:void bl_msg_update_channel_cfg(char *code)
45664:int bl_msg_get_channel_nums(void)
45673:int bl_send_reset(bl_hw *bl_hw)
45691:int bl_send_monitor_enable(bl_hw *bl_hw,mm_monitor_cfm *cfm)
45710:int bl_send_monitor_channel_set(bl_hw *bl_hw,mm_monitor_channel_cfm *cfm,int channel,int use_40Mhz)
45753:int bl_send_version_req(bl_hw *bl_hw,mm_version_cfm *cfm)
45771:int bl_send_me_config_req(bl_hw *bl_hw)
45809:int bl_send_me_chan_config_req(bl_hw *bl_hw)
45850:int bl_send_me_rate_config_req(bl_hw *bl_hw,uchar sta_idx,uint16_t fixed_rate_cfg)
45870:int bl_send_start(bl_hw *bl_hw)
45892:int bl_send_add_if(bl_hw *bl_hw,uchar *mac,nl80211_iftype iftype,_Bool p2p,mm_add_if_cfm *cfm)
45936:int bl_send_remove_if(bl_hw *bl_hw,uchar inst_nbr)
45955:int bl_send_scanu_req(bl_hw *bl_hw)
45998:int bl_send_scanu_raw_send(bl_hw *bl_hw,uint8_t *pkt,int len)
46021:int bl_send_sm_connect_req(bl_hw *bl_hw,cfg80211_connect_params *sme,sm_connect_cfm *cfm)
46142:int bl_send_sm_disconnect_req(bl_hw *bl_hw,u16 reason)
46162:int bl_send_mm_powersaving_req(bl_hw *bl_hw,int mode)
46181:int bl_send_mm_denoise_req(bl_hw *bl_hw,int mode)
46200:int bl_send_apm_start_req
46264:int bl_send_apm_stop_req(bl_hw *bl_hw,uchar vif_idx)
46283:int bl_send_apm_sta_del_req(bl_hw *bl_hw,apm_sta_del_cfm *cfm,uchar sta_idx,uchar vif_idx)
46303:int bl_send_apm_conf_max_sta_req(bl_hw *bl_hw,uchar max_sta_supported)
46322:int bl_send_cfg_task_req
46374:int bl_platform_on(bl_hw *bl_hw)
46390:int bl_rx_chan_pre_switch_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg)
46399:int bl_rx_rssi_status_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg)
46413:int bl_rx_apm_sta_del_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg)
46431:int bl_rx_apm_sta_add_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg)
46469:void notify_event_scan_done(int join_scan)
46488:int bl_rx_scanu_join_cfm(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg)
46498:int bl_rx_scanu_start_cfm(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg)
46510:int bl_rx_chan_switch_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg)
46531:int bl_rx_sm_connect_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg)
46617:int bl_rx_sm_disconnect_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg)
46654:int bl_rx_scanu_result_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg)
46765:next:
46822:undefined4 bl_rx_mesh_path_update_ind(void)
46831:undefined4 bl_rx_mesh_proxy_update_ind(void)
46840:undefined4 bl_rx_remain_on_channel_exp_ind(void)
46849:undefined4 bl_rx_ps_change_ind(void)
46858:undefined4 bl_rx_traffic_req_ind(void)
46867:undefined4 bl_rx_csa_counter_ind(void)
46876:undefined4 bl_rx_csa_finish_ind(void)
46885:undefined4 bl_rx_csa_traffic_ind(void)
46894:undefined4 bl_rx_channel_survey_ind(void)
46903:undefined4 bl_rx_dbg_error_ind(void)
46912:undefined4 bl_rx_tdls_chan_switch_cfm(void)
46921:undefined4 bl_rx_tdls_chan_switch_ind(void)
46930:undefined4 bl_rx_tdls_chan_switch_base_ind(void)
46939:undefined4 bl_rx_tdls_peer_ps_ind(void)
46948:undefined4 bl_rx_me_tkip_mic_failure_ind(void)
46957:undefined4 bl_rx_me_tx_credits_update_ind(void)
46966:undefined4 bl_rx_mesh_path_create_cfm(void)
46975:undefined4 bl_rx_mesh_peer_update_ind(void)
46984:int bl_rx_sm_connect_ind_cb_register(void *env,wifi_event_sm_connect_ind_cb_t *cb)
46995:int bl_rx_sm_disconnect_ind_cb_register(void *env,wifi_event_sm_disconnect_ind_cb_t *cb)
47006:int bl_rx_beacon_ind_cb_register(void *env,wifi_event_beacon_ind_cb_t *cb)
47017:int bl_rx_probe_resp_ind_cb_register(void *env,wifi_event_probe_resp_ind_cb_t *cb)
47027:int bl_rx_pkt_cb_register(void *env,wifi_event_pkt_cb_t *cb)
47038:int bl_rx_pkt_cb_unregister(void *env)
47049:int bl_rx_rssi_cb_register(void *env,wifi_event_rssi_cb_t *cb)
47060:int bl_rx_event_register(void *env,wifi_event_cb_t *cb)
47071:void bl_rx_e2a_handler(void *arg)
47085:void bl_rx_pkt_cb(uint8_t *pkt,int len)
47101:void bl_tx_push(bl_hw *bl_hw,bl_txhdr *txhdr)
47131:void bl_tx_resend(void)
47154:void bl_tx_try_flush(void)
47172:int bl_txdatacfm(void *pthis,void *host_id)
47203:void bl_tx_notify(void)
47217:err_t bl_output(bl_hw *bl_hw,netif *netif,pbuf *p,int is_sta)
47314:u8 bl_radarind(void *pthis,void *hostid)
47323:u8 bl_msgackind(void *pthis,void *hostid)
47333:void bl_prim_tbtt_ind(void *pthis)
47342:void my_pbuf_free_custom(pbuf *p)
47352:undefined4 bl_dbgind(void)
47361:void bl_sec_tbtt_ind(void)
47370:void my_pbuf_free_custom_fake(void)
47381:int tcpip_stack_input(void *swdesc,uchar status,void *hwhdr,uint msdu_offset,wifi_pkt *pkt)
47544:int bl_utils_idx_lookup(bl_hw *bl_hw,uint8_t *mac)
47566:int bl_ipc_init(bl_hw *bl_hw,ipc_shared_env_tag *ipc_shared_mem)
47591:void bl_utils_dump(void)
47619:_Bool stateSnifferGuard(void *ch,event *event)
47629:_Bool stateConnectedIPYesGuard_ip_update(void *ch,event *event)
47639:void printErrMsg(void *stateData,event *event)
47649:void stateSnifferExit(void *stateData,event *event)
47659:void stateSnifferAction(void *oldStateData,event *event,void *newStateData)
47669:void stateConnectedIPNoAction_ipgot(void *oldStateData,event *event,void *newStateData)
47692:void stateGlobalEnter(void *stateData,event *event)
47702:void stateGlobalAction(void *oldStateData,event *event,void *newStateData)
47712:void stateConnectingEnter(void *stateData,event *event)
47723:_Bool stateSnifferGuard_ChannelSet(void *ch,event *event)
47740:_Bool stateIdleGuard_sniffer(void *ev,event *event)
47755:void stateConnectedIPNoExit(void *stateData,event *event)
47767:void stateDisconnect_action_idle(void *oldStateData,event *event,void *newStateData)
47781:void stateDisconnect_action_reconnect(void *oldStateData,event *event,void *newStateData)
47807:void ip_obtaining_timeout(timer_cb_arg_t data)
47819:void stateConnectedIPNoEnter(void *stateData,event *event)
47870:_Bool stateConnectedIPNoGuard_disconnect(void *ch,event *event)
47885:_Bool stateConnectedIPYesGuard_disconnect(void *ch,event *event)
47900:_Bool stateConnectedIPYesGuard_rcconfig(void *ch,event *event)
47918:void stateIdleAction_connect(void *oldStateData,event *event,void *newStateData)
47961:_Bool stateGlobal_cfg_req(void *ch,event *event)
47980:_Bool stateGlobalGuard_fw_powersaving(void *ch,event *event)
47996:_Bool stateGlobalGuard_conf_max_sta(void *ev,event *event)
48012:_Bool stateGlobalGuard_AP(void *ev,event *event)
48043:_Bool stateGlobalGuard_scan_beacon(void *ch,event *event)
48137:void __reload_tsen(timer_cb_arg_t data)
48148:void event_cb_wifi_event_mgmr(input_event_t *event,void *private_data)
48162:void trigger_auto_denoise(void *arg)
48177:void stateDisconnect_exit(void *stateData,event *event)
48196:void disconnect_retry(timer_cb_arg_t data)
48217:_Bool stateGlobalGuard_fw_disconnect(void *ch,event *event)
48233:void stateConnectedIPYes_exit(void *stateData,event *event)
48253:_Bool stateGlobalGuard_denoise(void *ev,event *event)
48288:_Bool stateIdleGuard_connect(void *ev,event *event)
48308:_Bool stateIfaceDownGuard_phyup(void *ev,event *event)
48329:_Bool stateSnifferGuard_raw_send(void *ch,event *event)
48346:_Bool stateGlobalGuard_stop(void *ev,event *event)
48372:_Bool stateGlobalGuard_enable_autoreconnect(void *ch,event *event)
48388:_Bool stateGlobalGuard_disable_autoreconnect(void *ch,event *event)
48416:void stateDisconnect_enter(void *stateData,event *event)
48458:_Bool stateGlobalGuard_fw_scan(void *ch,event *event)
48490:bool stateDisconnect_guard(uint param_1,int param_2)
48499:void stateGlobalExit(void)
48509:void stateSnifferEnter(void)
48519:bool stateConnectingGuard(uint param_1,int param_2)
48528:void stateConnectingAction_connected(void)
48538:void stateConnectingAction_disconnect(void)
48548:void stateConnectingExit(void)
48558:void stateIdleAction_sniffer(void)
48568:void stateIdleEnter(void)
48578:void stateIdleExit(void)
48588:void stateIfaceDownAction_phyup(void)
48598:void stateIfaceDownEnter(void)
48608:void stateIfaceDownExit(void)
48618:bool stateConnectedIPNoGuard(uint param_1,int param_2)
48627:void stateConnectedIPNoAction_disconnect(void)
48637:bool stateConnectedIPYesGuard(uint param_1,int param_2)
48646:void stateConnectedIPYes_action(void)
48656:void stateConnectedIPYes_enter(void *stateData,event *event)
48672:char * wifi_mgmr_auth_to_str(uint8_t auth)
48704:char * wifi_mgmr_cipher_to_str(uint8_t cipher)
48737:int wifi_mgmr_event_notify(wifi_mgmr_msg_t *msg)
48761:void wifi_mgmr_start(void)
48814:void _wifi_mgmr_entry(void *pvParameters)
48832:void wifi_mgmr_start_background(wifi_conf_t *conf)
48847:int wifi_mgmr_init(void)
48862:int wifi_mgmr_state_get_internal(int *state)
48943:void wifi_mgmr_set_connect_stat_info(wifi_event_sm_connect_ind *ind,uint8_t type_ind)
48968:int wifi_mgmr_set_country_code_internal(char *country_code)
48981:int wifi_mgmr_ap_sta_cnt_get_internal(uint8_t *sta_cnt)
48993:int wifi_mgmr_ap_sta_info_get_internal(wifi_mgmr_sta_basic_info_t *sta_info_internal,uint8_t idx)
49013:int wifi_mgmr_ap_sta_delete_internal(uint8_t sta_idx)
49023:int wifi_mgmr_scan_complete_notify(void)
49035:int wifi_mgmr_api_connect(char *ssid,char *psk,char *pmk,uint8_t *mac,uint8_t band,uint16_t freq)
49112:int wifi_mgmr_api_cfg_req
49172:int wifi_mgmr_api_ip_got(uint32_t ip,uint32_t mask,uint32_t gw,uint32_t dns1,uint32_t dns2)
49221:int wifi_mgmr_api_ip_update(void)
49250:int wifi_mgmr_api_reconnect(void)
49279:int wifi_mgmr_api_disable_autoreconnect(void)
49308:int wifi_mgmr_api_enable_autoreconnect(void)
49337:int wifi_mgmr_api_disconnect(void)
49366:int wifi_mgmr_api_rate_config(uint16_t config)
49395:int wifi_mgmr_api_conf_max_sta(uint8_t max_sta_supported)
49424:int wifi_mgmr_api_ifaceup(void)
49453:int wifi_mgmr_api_sniffer_enable(void)
49482:int wifi_mgmr_api_scan_item_beacon
49525:int wifi_mgmr_api_fw_disconnect(void)
49554:int wifi_mgmr_api_fw_tsen_reload(void)
49583:int wifi_mgmr_api_fw_scan(void)
49612:int wifi_mgmr_api_fw_powersaving(int mode)
49643:int wifi_mgmr_api_ap_start(char *ssid,char *passwd,int channel,uint8_t hidden_ssid)
49705:int wifi_mgmr_api_ap_stop(void)
49734:int wifi_mgmr_api_idle(void)
49763:int wifi_mgmr_api_denoise_enable(void)
49791:int wifi_mgmr_api_denoise_disable(void)
49819:int wifi_mgmr_api_raw_send(uint8_t *pkt,int len)
49848:int wifi_mgmr_api_set_country_code(char *country_code)
49858:void cmd_rf_dump(char *buf,int len,int argc,char **argv)
49867:void cmd_dump_reset(char *buf,int len,int argc,char **argv)
49877:void cmd_wifi_power_table_update(char *buf,int len,int argc,char **argv)
49891:void cmd_wifi_state_get(char *buf,int len,int argc,char **argv)
49949:switchD_2302724c_caseD_a:
49956:void wifi_sta_get_state_cmd(char *buf,int len,int argc,char **argv)
50049:void wifi_edca_dump_cmd(char *buf,int len,int argc,char **argv)
50090:void wifi_ap_sta_list_get_cmd(char *buf,int len,int argc,char **argv)
50157:void wifi_ap_sta_delete_cmd(char *buf,int len,int argc,char **argv)
50244:void cmd_wifi_coex_pta_force_off(char *buf,int len,int argc,char **argv)
50254:void cmd_wifi_coex_pta_force_on(char *buf,int len,int argc,char **argv)
50264:void cmd_wifi_coex_pti_force_off(char *buf,int len,int argc,char **argv)
50274:void cmd_wifi_coex_pti_force_on(char *buf,int len,int argc,char **argv)
50284:void cmd_wifi_coex_rf_force_off(char *buf,int len,int argc,char **argv)
50294:void cmd_wifi_coex_rf_force_on(char *buf,int len,int argc,char **argv)
50304:void cmd_wifi_mib(char *buf,int len,int argc,char **argv)
50315:void cmd_wifi_cfg(char *buf,int len,int argc,char **argv)
50437:void cmd_wifi_ap_stop(char *buf,int len,int argc,char **argv)
50450:void cmd_wifi_ap_start(char *buf,int len,int argc,char **argv)
50489:void wifi_sniffer_off_cmd(char *buf,int len,int argc,char **argv)
50500:void wifi_sniffer_on_cmd(char *buf,int len,int argc,char **argv)
50511:int wifi_denoise_disable_cmd(void)
50548:int wifi_denoise_enable_cmd(void)
50585:void wifi_power_saving_off_cmd(char *buf,int len,int argc,char **argv)
50595:void wifi_power_saving_on_cmd(char *buf,int len,int argc,char **argv)
50605:void wifi_rc_fixed_disable(char *buf,int len,int argc,char **argv)
50615:int wifi_disable_autoreconnect_cmd(void)
50625:int wifi_enable_autoreconnect_cmd(void)
50635:void wifi_disconnect_cmd(char *buf,int len,int argc,char **argv)
50647:int wifi_sta_ip_unset_cmd(void)
50661:void wifi_sta_ip_info(char *buf,int len,int argc,char **argv)
50708:void cmd_wifi_raw_send(char *buf,int len,int argc,char **argv)
50732:void wifi_scan_cmd(char *buf,int len,int argc,char **argv)
50742:void sniffer_cb(void *env,uint8_t *pkt,int len)
50758:void cmd_wifi_dump(char *buf,int len,int argc,char **argv)
50777:void cmd_wifi_ap_conf_max_sta(char *buf,int len,int argc,char **argv)
50796:void wifi_mon_cmd(char *buf,int len,int argc,char **argv)
50811:void wifi_rc_fixed_enable(char *buf,int len,int argc,char **argv)
50853:void wifi_connect_cmd(char *buf,int len,int argc,char **argv)
50871:void wifi_sta_ip_set_cmd(char *buf,int len,int argc,char **argv)
50925:void wifi_scan_filter_cmd(char *buf,int len,int argc,char **argv)
50939:void wifi_capcode_cmd(char *buf,int len,int argc,char **argv)
50975:int wifi_mgmr_cli_scanlist(void)
51029:int wifi_mgmr_ext_dump_needed(void)
51044:int wifi_mgmr_cli_init(void)
51053:int mac_is_unvalid(uint8_t *mac)
51072:int wifi_mgmr_psk_cal(char *password,char *ssid,int ssid_len,char *output)
51089:int wifi_mgmr_drv_init(wifi_conf_t *conf)
51104:wifi_interface_t wifi_mgmr_sta_enable(void)
51147:int wifi_mgmr_sta_disable(wifi_interface_t *interface)
51157:int wifi_mgmr_sta_ip_get(uint32_t *ip,uint32_t *gw,uint32_t *mask)
51169:int wifi_mgmr_sta_dns_get(uint32_t *dns1,uint32_t *dns2)
51184:int wifi_mgmr_sta_ip_set(uint32_t ip,uint32_t mask,uint32_t gw,uint32_t dns1,uint32_t dns2)
51201:int wifi_mgmr_sta_ip_unset(void)
51212:int wifi_mgmr_sta_disconnect(void)
51222:int wifi_mgmr_sta_powersaving(int ps)
51243:int wifi_mgmr_sta_autoconnect_enable(void)
51252:int wifi_mgmr_sta_autoconnect_disable(void)
51261:void wifi_mgmr_sta_ssid_set(char *ssid)
51279:void wifi_mgmr_sta_psk_set(char *psk)
51297:int wifi_mgmr_sta_connect
51315:wifi_interface_t wifi_mgmr_ap_enable(void)
51350:int wifi_mgmr_ap_start(wifi_interface_t *interface,char *ssid,int hidden_ssid,char *passwd,
51361:int wifi_mgmr_ap_stop(wifi_interface_t *interface)
51371:int wifi_mgmr_ap_sta_cnt_get(uint8_t *sta_cnt)
51383:int wifi_mgmr_ap_sta_info_get(wifi_sta_basic_info *sta_info,uint8_t idx)
51403:int wifi_mgmr_ap_sta_delete(uint8_t sta_idx)
51413:int wifi_mgmr_sniffer_register(void *env,sniffer_cb_t *cb)
51423:int wifi_mgmr_sniffer_unregister(void *env)
51433:int wifi_mgmr_sniffer_enable(void)
51443:int wifi_mgmr_sniffer_disable(void)
51453:int wifi_mgmr_rate_config(uint16_t config)
51490:int wifi_mgmr_conf_max_sta(uint8_t max_sta_supported)
51527:int wifi_mgmr_state_get(int *state)
51608:int wifi_mgmr_rssi_get(int *rssi)
51618:int wifi_mgmr_raw_80211_send(uint8_t *pkt,int len)
51632:int wifi_mgmr_scan(void *data,scan_complete_cb_t *cb)
51644:int wifi_mgmr_cfg_req(uint32_t ops,uint32_t task,uint32_t element,uint32_t type,uint32_t length,
51732:int wifi_mgmr_scan_filter_hidden_ssid(int filter)
51749:int wifi_mgmr_scan_complete_callback(void)
51767:char * wifi_mgmr_status_code_str(uint16_t status_code)
51782:int wifi_mgmr_profile_add(wifi_mgmr_t *mgmr,wifi_mgmr_profile_msg_t *profile_msg,int index)
51827:int wifi_mgmr_profile_get(wifi_mgmr_t *mgmr,wifi_mgmr_profile_msg_t *profile_msg)
51873:int wifi_mgmr_profile_autoreconnect_is_enabled(wifi_mgmr_t *mgmr,int index)
51882:int wifi_mgmr_profile_autoreconnect_disable(wifi_mgmr_t *mgmr,int index)
51892:int wifi_mgmr_profile_autoreconnect_enable(wifi_mgmr_t *mgmr,int index)
51902:int wifi_netif_dhcp_start(netif *netif)
51912:void cb_rssi_ind(void *env,int8_t rssi)
51922:void cb_probe_resp_ind(void *env)
51932:void cb_beacon_ind(void *env,wifi_event_beacon_ind *ind)
51946:void cb_disconnect_ind(void *env,wifi_event_sm_disconnect_ind *ind)
51980:void cb_connect_ind(void *env,wifi_event_sm_connect_ind *ind)
52010:void cb_event_ind(void *env,wifi_event *event)
52046:int wifi_mgmr_event_init(void)
52061:void cmd_mgr_print(bl_cmd_mgr *cmd_mgr)
52078:void cmd_complete(bl_cmd *cmd)
52112:int cmd_mgr_msgind(bl_cmd_mgr *cmd_mgr,ipc_e2a_msg *msg,msg_cb_fct *cb)
52151:int cmd_mgr_llind(bl_cmd_mgr *cmd_mgr,bl_cmd *cmd)
52202:int cmd_mgr_queue(bl_cmd_mgr *cmd_mgr,bl_cmd *cmd)
52285:void cmd_mgr_drain(bl_cmd_mgr *cmd_mgr)
52317:void bl_cmd_mgr_init(bl_cmd_mgr *cmd_mgr)
52338:int bl_irqs_init(bl_hw *bl_hw)
52347:void bl_irq_bottomhalf(bl_hw *bl_hw)
52381:void goToErrorState(stateMachine *fsm,event *event)
52403:void stateM_init(stateMachine *fsm,state *initialState,state *errorState)
52417:int stateM_handleEvent(stateMachine *fsm,event *event)
52485:code_r0x230290be:
52493:void netif_status_callback(netif *netif)
52528:err_t wifi_tx(netif *netif,pbuf *p)
52557:err_t bl606a0_wifi_netif_init(netif *netif)
52572:int bl606a0_wifi_init(wifi_conf_t *conf)
52598:uint32_t fdt32_ld(fdt32_t *p)
52609:int nextprop_(void *fdt,int offset)
52639:fdt_property * fdt_get_property_by_offset_(void *fdt,int offset,int *lenp)
52669:char * fdt_get_string(void *fdt,int stroffset,int *lenp)
52724:fail:
52726:joined_r0x23029498:
52736:char * fdt_get_name(void *fdt,int nodeoffset,int *len)
52764:fail:
52778:int fdt_subnode_offset_namelen(void *fdt,int offset,char *name,int namelen)
52819:int fdt_subnode_offset(void *fdt,int parentoffset,char *name)
52833:int fdt_first_property_offset(void *fdt,int nodeoffset)
52850:int fdt_next_property_offset(void *fdt,int offset)
52869:fdt_property *
52870:fdt_get_property_namelen_(void *fdt,int offset,char *name,int namelen,int *lenp,int *poffset)
52914:void * fdt_getprop_namelen(void *fdt,int nodeoffset,char *name,int namelen,int *lenp)
52939:void * fdt_getprop(void *fdt,int nodeoffset,char *name,int *lenp)
52955:int fdt_stringlist_count(void *fdt,int nodeoffset,char *property)
52987:char * fdt_stringlist_get(void *fdt,int nodeoffset,char *property,int idx,int *lenp)
53040:void blfdt(char *buf,int len,int argc,char **argv)
53051:int blfdt_cli_init(void)
53060:uint32_t fdt32_ld(fdt32_t *p)
53071:int fdt_ro_probe_(void *fdt)
53105:void * fdt_offset_ptr(void *fdt,int offset,uint len)
53143:uint32_t fdt_next_tag(void *fdt,int startoffset,int *nextoffset)
53174:switchD_23029956_caseD_2:
53195:switchD_23029956_caseD_5:
53204:int fdt_check_node_offset_(void *fdt,int offset)
53220:int fdt_check_prop_offset_(void *fdt,int offset)
53236:int fdt_next_node(void *fdt,int offset,int *depth)
53279:uint32_t fdt32_to_cpu(fdt32_t x)
53288:uint64_t fdt64_to_cpu(void)
53299:uint32_t fdt32_ld(fdt32_t *p)
53310:_Bool util_is_printable_string(void *data,int len)
53345:void utilfdt_print_data(char *data,int len)
53407:int tc_blfdtdump(void)
53594:int tc_fdt_wifi_module(void)
53935:int tc_fdt_wifi(void)
53955:void cmd_blog_info_dump(char *buf,int len,int argc,char **argv)
54021:void cmd_blog_set_level(char *buf,int len,int argc,char **argv)
54125:void blog_init(void)
54158:int ota_dump_cmd(void)
54171:void ota_tcp_cmd(char **argv)
54331:code_r0x2302b164:
54380:void ota_tcp_cmd(char *buf,int len,int argc,char **argv)
54395:int bl_sys_ota_cli_init(void)
54406:void cmd_sys_time_now(char *buf,int len,int argc,char **argv)
54428:int bl_sys_time_cli_init(void)
54437:void bl_sys_time_update(undefined4 param_1,undefined4 param_2)
54450:int bl_sys_time_get(uint64_t *epoch)
54476:int bl_sys_time_sync_state(uint32_t *xTicksToJump)
54504:cli_command * cli_command_get(int idx,int *is_static_cmd)
54535:void exit_cmd(char *buf,int len,int argc,char **argv)
54545:int cb_idnoe(void *arg,inode_t *node)
54587:void ota_cmd(char *buf,int len,int argc,char **argv)
54597:void tftp_ota_thread(void *arg)
54607:void cat_cmd(char *buf,int len,int argc,char **argv)
54635:void hexdump_cmd(char *buf,int len,int argc,char **argv)
54662:int aos_cli_init(int use_thread)
54686:void * aos_cli_event_cb_read_get(void)
54695:int cli_putstr(char *msg)
54714:void ps_cmd(char *buf,int len,int argc,char **argv)
54752:int aos_cli_printf(char *msg,...)
54797:int proc_onecmd(int argc,char **argv)
54863:void ls_cmd(char *buf,int len,int argc,char **argv)
54969:void uptime_cmd(char *buf,int len,int argc,char **argv)
55000:void reset_cmd(char *buf,int len,int argc,char **argv)
55011:void poweroff_cmd(char *buf,int len,int argc,char **argv)
55022:void reboot_cmd(char *buf,int len,int argc,char **argv)
55035:void version_cmd(char *buf,int len,int argc,char **argv)
55067:void devname_cmd(char *buf,int len,int argc,char **argv)
55077:void echo_cmd(char *buf,int len,int argc,char **argv)
55112:void mmem_cmd(char *buf,int len,int argc,char **argv)
55166:void pmem_cmd(char *buf,int len,int argc,char **argv)
55257:void help_cmd(char *buf,int len,int argc,char **argv)
55303:int cli_getchar(char *inbuf)
55330:void cli_main_input(char *buffer,int count)
55729:code_r0x2302c57c:
55738:void console_cb_read(int fd,void *param)
55764:void get_dns_request(void *arg,udp_pcb *upcb,pbuf *p,ip_addr_t *addr,u16_t port)
55850:void dns_server_init(void)
55877:EfErrCode easyflash_init(void)
55910:size_t get_status(uint8_t *status_table,size_t status_num)
55928:void update_sector_cache(uint32_t sec_addr,uint32_t empty_addr)
55972:uint32_t get_next_sector_addr(sector_meta_data_t pre_sec)
55998:_Bool gc_check_cb(sector_meta_data_t sector,void *arg1,void *arg2)
56011:void update_env_cache(char *name,size_t name_len,uint32_t addr)
56072:_Bool find_env_cb(env_node_obj_t env,void *arg1,void *arg2)
56094:_Bool sector_statistics_cb(sector_meta_data_t sector,void *arg1,void *arg2)
56118:_Bool alloc_env_cb(sector_meta_data_t sector,void *arg1,void *arg2)
56142:EfErrCode write_status(uint32_t addr,uint8_t *status_table,size_t status_num,size_t status_index)
56173:EfErrCode read_env(env_node_obj_t env)
56237:EfErrCode update_sec_status(sector_meta_data_t sector,size_t new_env_len,_Bool *is_full)
56275:EfErrCode format_sector(uint32_t addr)
56312:_Bool check_sec_hdr_cb(sector_meta_data_t sector,void *arg1,void *arg2)
56330:_Bool print_env_cb(env_node_obj_t env,void *arg1,void *arg2)
56390:uint32_t get_next_env_addr(sector_meta_data_t sector,env_node_obj_t pre_env)
56456:EfErrCode read_sector_meta_data(uint32_t addr,sector_meta_data_t sector,_Bool traversal)
56580:void sector_iterator(sector_meta_data_t sector,sector_store_status_t status,void *arg1,void *arg2,
56613:uint32_t alloc_env(sector_meta_data_t sector,size_t env_size)
56646:void gc_collect(void)
56669:uint32_t new_env(sector_meta_data_t sector,size_t env_size)
56688:_Bool check_and_recovery_gc_cb(sector_meta_data_t sector,void *arg1,void *arg2)
56703:void env_iterator(env_node_obj_t env,void *arg1,void *arg2,
56743:_Bool find_env(char *key,env_node_obj_t env)
56791:EfErrCode del_env(char *key,env_node_obj_t old_env,_Bool complete_del)
56855:EfErrCode move_env(env_node_obj_t env)
56910:__exit:
56918:_Bool check_and_recovery_env_cb(env_node_obj_t env,void *arg1,void *arg2)
56959:_Bool do_gc(sector_meta_data_t sector,void *arg1,void *arg2)
56996:EfErrCode create_env_blob(sector_meta_data_t sector,char *key,void *value,size_t len)
57091:size_t ef_get_env_blob(char *key,void *value_buf,size_t buf_len,size_t *saved_value_len)
57159:EfErrCode ef_del_env(char *key)
57194:EfErrCode ef_set_env_blob(char *key,void *value_buf,size_t buf_len)
57287:EfErrCode ef_set_env(char *key,char *value)
57301:EfErrCode ef_save_env(void)
57310:EfErrCode ef_env_set_default(void)
57357:__exit:
57365:void ef_print_env(void)
57391:EfErrCode ef_load_env(void)
57422:EfErrCode ef_env_init(ef_env *default_env,size_t default_env_size)
57465:EfErrCode ef_port_read(uint32_t addr,uint32_t *buf,size_t size)
57477:EfErrCode ef_port_write(uint32_t addr,uint32_t *buf,size_t size)
57496:void ef_port_env_lock(void)
57506:void ef_port_env_unlock(void)
57516:void ef_log_debug(char *file,long line,char *format,...)
57543:EfErrCode ef_port_erase(uint32_t addr,size_t size)
57563:void ef_log_info(char *format,...)
57598:EfErrCode ef_port_init(ef_env **default_env,size_t *default_env_size)
57627:void ef_print(char *format,...)
57660:uint32_t ef_calc_crc32(uint32_t crc,void *buf,size_t size)
57678:void psm_get_cmd(char *buf,int len,int argc,char **argv)
57687:void psm_test_cmd(char *buf,int len,int argc,char **argv)
57795:EfErrCode psm_erase_cmd(void)
57841:__exit:
57849:void psm_dump_cmd(void)
57872:void psm_unset_cmd(char *buf,int len,int argc,char **argv)
57888:void psm_set_cmd(char *buf,int len,int argc,char **argv)
57904:int easyflash_cli_init(void)
57916:EventGroupHandle_t xEventGroupCreateStatic(StaticEventGroup_t *pxEventGroupBuffer)
57935:EventBits_t
57936:xEventGroupWaitBits(EventGroupHandle_t xEventGroup,EventBits_t uxBitsToWaitFor,
58018:EventBits_t xEventGroupSetBits(EventGroupHandle_t xEventGroup,EventBits_t uxBitsToSet)
58073:void vEventGroupDelete(EventGroupHandle_t xEventGroup)
58106:void vListInitialise(List_t *pxList)
58123:void vListInitialiseItem(ListItem_t *pxItem)
58133:void vListInsertEnd(List_t *pxList,ListItem_t *pxNewListItem)
58153:void vListInsert(List_t *pxList,ListItem_t *pxNewListItem)
58182:UBaseType_t uxListRemove(ListItem_t *pxItemToRemove)
58207:BaseType_t prvCopyDataToQueue(Queue_t *pxQueue,void *pvItemToQueue,BaseType_t xPosition)
58268:void prvCopyDataFromQueue(Queue_t *pxQueue,void *pvBuffer)
58294:void prvUnlockQueue(Queue_t *pxQueue)
58346:BaseType_t xQueueGenericReset(QueueHandle_t xQueue,BaseType_t xNewQueue)
58388:QueueHandle_t
58389:xQueueGenericCreateStatic
58427:QueueHandle_t
58428:xQueueGenericCreate(UBaseType_t uxQueueLength,UBaseType_t uxItemSize,uint8_t ucQueueType)
58464:QueueHandle_t xQueueCreateCountingSemaphore(UBaseType_t uxMaxCount,UBaseType_t uxInitialCount)
58492:BaseType_t
58493:xQueueGenericSend(QueueHandle_t xQueue,void *pvItemToQueue,TickType_t xTicksToWait,
58583:QueueHandle_t xQueueCreateMutexStatic(uint8_t ucQueueType,StaticQueue_t *pxStaticQueue)
58601:BaseType_t xQueueGiveMutexRecursive(QueueHandle_t xMutex)
58630:QueueHandle_t xQueueCreateMutex(uint8_t ucQueueType)
58648:BaseType_t
58649:xQueueGenericSendFromISR
58692:BaseType_t xQueueGiveFromISR(QueueHandle_t xQueue,BaseType_t *pxHigherPriorityTaskWoken)
58734:BaseType_t xQueueReceive(QueueHandle_t xQueue,void *pvBuffer,TickType_t xTicksToWait)
58820:BaseType_t xQueueSemaphoreTake(QueueHandle_t xQueue,TickType_t xTicksToWait)
58936:BaseType_t xQueueTakeMutexRecursive(QueueHandle_t xMutex,TickType_t xTicksToWait)
58963:UBaseType_t uxQueueMessagesWaiting(QueueHandle_t xQueue)
58980:void vQueueDelete(QueueHandle_t xQueue)
59032:void vQueueAddToRegistry(QueueHandle_t xQueue,char *pcQueueName)
59058:void vQueueWaitForMessageRestricted
59083:void prvInitialiseNewStreamBuffer
59105:size_t prvWriteBytesToBuffer(StreamBuffer_t *pxStreamBuffer,uint8_t *pucData,size_t xCount)
59161:size_t prvReadBytesFromBuffer
59210:StreamBufferHandle_t
59211:xStreamBufferGenericCreate
59262:StreamBufferHandle_t
59263:xStreamBufferGenericCreateStatic
59302:void vStreamBufferDelete(StreamBufferHandle_t xStreamBuffer)
59330:size_t xStreamBufferSpacesAvailable(StreamBufferHandle_t xStreamBuffer)
59357:size_t xStreamBufferSend(StreamBufferHandle_t xStreamBuffer,void *pvTxData,size_t xDataLengthBytes,
59447:size_t xStreamBufferSendFromISR
59507:size_t xStreamBufferReceive
59596:size_t xStreamBufferReceiveFromISR
59658:BaseType_t xStreamBufferIsEmpty(StreamBufferHandle_t xStreamBuffer)
59672:void prvResetNextTaskUnblockTime(void)
59682:void prvInitialiseNewTask
59736:void prvDeleteTCB(TCB_t *pxTCB)
59764:void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait,BaseType_t xCanBlockIndefinitely)
59798:void vTaskEnterCritical(void)
59808:void vTaskExitCritical(void)
59818:void prvAddNewTaskToReadyList(TCB_t *pxNewTCB)
59874:void prvIdleTask(void *pvParameters)
59905:TaskHandle_t
59906:xTaskCreateStatic(TaskFunction_t *pxTaskCode,char *pcName,uint32_t ulStackDepth,void *pvParameters,
59940:BaseType_t
59941:xTaskCreate(TaskFunction_t *pxTaskCode,char *pcName,uint16_t usStackDepth,void *pvParameters,
59976:void vTaskDelete(TaskHandle_t xTaskToDelete)
60030:eTaskState eTaskGetState(TaskHandle_t xTask)
60077:void vTaskStartScheduler(void)
60115:void vTaskSuspendAll(void)
60125:TickType_t xTaskGetTickCount(void)
60133:BaseType_t xTaskGetTickCount2(TickType_t *ticks,BaseType_t *overflow)
60147:TickType_t xTaskGetTickCountFromISR(void)
60156:char * pcTaskGetName(TaskHandle_t xTaskToQuery)
60171:BaseType_t xTaskIncrementTick(void)
60254:BaseType_t xTaskResumeAll(void)
60320:void vTaskDelay(TickType_t xTicksToDelay)
60345:void vTaskSwitchContext(void)
60381:void vTaskPlaceOnEventList(List_t *pxEventList,TickType_t xTicksToWait)
60395:void vTaskPlaceOnUnorderedEventList
60417:void vTaskPlaceOnEventListRestricted
60435:BaseType_t xTaskRemoveFromEventList(List_t *pxEventList)
60465:void vTaskRemoveFromUnorderedEventList(ListItem_t *pxEventListItem,TickType_t xItemValue)
60495:void vTaskSetTimeOutState(TimeOut_t *pxTimeOut)
60522:void vTaskInternalSetTimeOutState(TimeOut_t *pxTimeOut)
60536:BaseType_t xTaskCheckForTimeOut(TimeOut_t *pxTimeOut,TickType_t *pxTicksToWait)
60584:void vTaskMissedYield(void)
60594:void vTaskGetInfo(TaskHandle_t xTask,TaskStatus_t *pxTaskStatus,BaseType_t xGetFreeStackSpace,
60654:UBaseType_t
60655:prvListTasksWithinSingleList(TaskStatus_t *pxTaskStatusArray,List_t *pxList,eTaskState eState)
60695:UBaseType_t
60696:uxTaskGetSystemState
60755:UBaseType_t uxTaskGetStackHighWaterMark(TaskHandle_t xTask)
60784:TaskHandle_t xTaskGetCurrentTaskHandle(void)
60793:BaseType_t xTaskGetSchedulerState(void)
60808:BaseType_t xTaskPriorityInherit(TaskHandle_t pxMutexHolder)
60847:BaseType_t xTaskPriorityDisinherit(TaskHandle_t pxMutexHolder)
60891:void vTaskPriorityDisinheritAfterTimeout
60961:void vTaskEnterCritical(void)
60975:void vTaskExitCritical(void)
60987:void vTaskList(char *pcWriteBuffer)
61038:TickType_t uxTaskResetEventItemValue(void)
61051:TaskHandle_t pvTaskIncrementMutexHeldCount(void)
61063:uint32_t ulTaskNotifyTake(BaseType_t xClearCountOnExit,TickType_t xTicksToWait)
61101:BaseType_t
61102:xTaskNotifyWait(uint32_t ulBitsToClearOnEntry,uint32_t ulBitsToClearOnExit,
61144:BaseType_t
61145:xTaskGenericNotify(TaskHandle_t xTaskToNotify,uint32_t ulValue,eNotifyAction eAction,
61206:BaseType_t
61207:xTaskGenericNotifyFromISR
61271:void vTaskNotifyGiveFromISR(TaskHandle_t xTaskToNotify,BaseType_t *pxHigherPriorityTaskWoken)
61309:BaseType_t xTaskNotifyStateClear(TaskHandle_t xTask)
61333:void prvCheckForValidListAndQueue(void)
61358:BaseType_t
61359:prvInsertTimerInActiveList
61385:BaseType_t xTimerCreateTimerTask(void)
61417:TimerHandle_t
61418:xTimerCreateStatic(char *pcTimerName,TickType_t xTimerPeriodInTicks,UBaseType_t uxAutoReload,
61451:BaseType_t
61452:xTimerGenericCommand
61488:void prvSwitchTimerLists(void)
61530:void prvTimerTask(void *pvParameters)
61653:void * pvTimerGetTimerID(TimerHandle_t xTimer)
61672:void vPortSetupTimerInterrupt(void)
61688:BaseType_t xPortStartScheduler(void)
61710:undefined8
61711:freertos_risc_v_trap_handler
61795:undefined8 xPortStartFirstTask(void)
61806:void pxPortInitialiseStack(int param_1,undefined4 param_2,undefined4 param_3)
61830:void prvInsertBlockIntoFreeList(BlockLink_t *pxBlockToInsert)
61865:void * pvPortMalloc(size_t xWantedSize)
61930:void vPortFree(void *pv)
61972:size_t xPortGetFreeHeapSize(void)
61981:void vPortDefineHeapRegions(HeapRegion_t *pxHeapRegions)
62059:void uart_generic_notify_handler(uint8_t id)
62106:void UART0_IRQHandler(void)
62116:void UART1_IRQHandler(void)
62128:int bl_uart_init(uint8_t id,uint8_t tx_pin,uint8_t rx_pin,uint8_t cts_pin,uint8_t rts_pin,
62177:int bl_uart_data_send(uint8_t id,uint8_t data)
62196:int bl_uart_data_recv(uint8_t id)
62219:int bl_uart_int_rx_enable(uint8_t id)
62232:int bl_uart_int_rx_disable(uint8_t id)
62244:int bl_uart_int_tx_enable(uint8_t id)
62254:int bl_uart_int_tx_disable(uint8_t id)
62264:int bl_uart_flush(uint8_t id)
62279:void bl_uart_getdefconfig(uint8_t id,uint8_t *parity)
62293:void bl_uart_setconfig(uint8_t id,uint32_t baudrate,UART_Parity_Type parity)
62312:void bl_uart_setbaud(uint8_t id,uint32_t baud)
62322:int bl_uart_int_enable(uint8_t id)
62351:int bl_uart_int_disable(uint8_t id)
62380:int bl_uart_int_rx_notify_register(uint8_t id,cb_uart_notify_t *cb,void *arg)
62399:int bl_uart_int_tx_notify_register(uint8_t id,cb_uart_notify_t *cb,void *arg)
62420:int bl_chip_info(char *info)
62467:int bl_chip_banner(char **banner)
62477:int bl_chip_memory_ram(int *num,uint *addr,uint *size,char (*desc) [6])
62500:void _cb_cmd(void *arg)
62525:int bl_cks_test(void)
62899:void _cb_cmd(void *arg)
62923:void bl_dma_int_process(void)
62982:int bl_dma_int_clear(int ch)
63000:void bl_dma_IRQHandler(void)
63039:void bl_dma_copy(bl_dma_item *first)
63055:int bl_dma_irq_register(int channel,void *tc_handler,void *interr_handler,void *ctx)
63132:void bl_dma_init(void)
63206:void bl_dma_test(void)
63249:void _irq_num_check(int irqnum)
63275:void bl_irq_enable(uint source)
63285:void bl_irq_disable(uint source)
63295:void bl_irq_exception_trigger(BL_IRQ_EXCEPTION_TYPE_T type,void *ptr)
63329:void bl_irq_register_with_ctx(int irqnum,void *handler,void *ctx)
63390:void bl_irq_ctx_get(int irqnum,void **ctx)
63403:void bl_irq_register(int irqnum,void *handler)
63413:void bl_irq_unregister(int irqnum,void *handler)
63442:void interrupt_entry(uint32_t mcause)
63474:void exception_entry(uint32_t mcause,uint32_t mepc,uint32_t mtval,uintptr_t *regs)
63551:void bl_irq_init(void)
63575:void _trng_trigger(void)
63591:void wait_trng4feed(void)
63623:void sec_trng_IRQHandler(uint param_1,int param_2)
63655:void bl_sec_pka_IRQHandler(void)
63666:uint32_t bl_sec_get_random_word(void)
63683:void bl_rand_stream(uint8_t *buf,int len)
63719:int bl_rand(void)
63740:int bl_sec_init(void)
63757:int bl_sec_test(void)
63774:void _dump_rsa_data(uint8_t *data,int size)
63801:void _pka_test_case_xgcd(void)
63858:void _pka_test_case2(uint8_t param_1)
63964:int bl_pka_test(void)
63978:void int_timer_cb(void)
63998:uint32_t bl_timer_now_us(void)
64011:int bl_timer_tick_enable(void)
64037:void cmd_gpio_get(char *buf,int len,int argc,char **argv)
64097:void cmd_gpio_set(char *buf,int len,int argc,char **argv)
64164:void cmd_gpio_func(char *buf,int len,int argc,char **argv)
64247:int bl_gpio_cli_init(void)
64256:int bl_efuse_read_mac(uint8_t *mac)
64266:int bl_efuse_read_mac_factory(uint8_t *mac)
64279:int bl_efuse_read_capcode(uint8_t *capcode)
64292:int bl_efuse_read_pwroft(int8_t *poweroffset)
64305:void Aes_Compare_Data(uint8_t *expected,uint8_t *input,uint32_t len)
64378:void _dump_iv_status(SEC_Eng_AES_Link_Config_Type *linkCfg)
64399:void bl_sec_aes_IRQHandler(void)
64412:void Sec_Eng_AES_Link_Case_CBC_128(SEC_ENG_AES_ID_Type aesId)
64490:void Sec_Eng_AES_Link_Case_CTR_128(SEC_ENG_AES_ID_Type aesId)
64569:void Sec_Eng_AES_Link_Case_ECB_128(SEC_ENG_AES_ID_Type aesId)
64596:int bl_sec_aes_test(void)
64623:void bl_sec_sha_IRQHandler(void)
64634:int bl_sha_mutex_take(void)
64661:int bl_sha_mutex_give(void)
64688:void bl_sha_init(bl_sha_ctx_t *ctx,bl_sha_type_t type)
64699:int bl_sha_update(bl_sha_ctx_t *ctx,uint8_t *input,uint32_t len)
64712:int bl_sha_finish(bl_sha_ctx_t *ctx,uint8_t *hash)
64725:void sha256_test_case0(void)
64777:int bl_sec_sha_test(void)
64790:int bl_wifi_clock_enable(void)
64802:int bl_wifi_enable_irq(void)
64816:int bl_wifi_sta_mac_addr_set(uint8_t *mac)
64826:int bl_wifi_ap_mac_addr_set(uint8_t *mac)
64836:int bl_wifi_mac_addr_get(uint8_t *mac)
64846:int bl_wifi_country_code_set(uint8_t country_code)
64856:int bl_wifi_ap_info_set(uint8_t *ssid,uint8_t ssid_len,uint8_t *psk,uint8_t psk_len,uint8_t chan)
64873:int bl_wifi_sta_info_set
64890:int bl_wifi_sta_info_get(bl_wifi_ap_info_t *sta_info)
64904:int cmd_timer_start(void)
64930:void cmd_wdt_disable(void)
64944:void cmd_wdt_feed(void)
64956:void cmd_wdt_init(char *buf,int len,int argc,char **argv)
64992:int bl_wdt_cli_init(void)
65001:uint32_t fdt32_to_cpu(fdt32_t x)
65010:int dev_uart_init(uint8_t id,char *path,uint32_t rx_buf_size,uint32_t tx_buf_size)
65170:int32_t hal_uart_send_trigger(uart_dev_t *uart)
65180:int32_t hal_uart_send_trigger_off(uart_dev_t *uart)
65190:int32_t hal_uart_init(uart_dev_t *uart)
65220:int32_t hal_uart_recv_II(uart_dev_t *uart,void *data,uint32_t expect_size,uint32_t *recv_size,
65241:int32_t hal_uart_send(uart_dev_t *uart,void *data,uint32_t size,uint32_t timeout)
65260:int32_t hal_uart_finalize(uart_dev_t *uart)
65274:int32_t hal_uart_notify_register(uart_dev_t *uart,hal_uart_int_t type,anon_subr_void_void_ptr *cb)
65297:int vfs_uart_init(uint32_t fdt,uint32_t dtb_uart_offset)
65673:code_r0x23035f08:
65680:int32_t hal_uart_send_flush(uart_dev_t *uart,uint32_t timeout)
65690:void hal_uart_setbaud(uart_dev_t *uart,uint32_t baud)
65700:void hal_uart_setconfig(uart_dev_t *uart,uint32_t baud,hal_uart_parity_t parity)
65712:int hal_gpio_init_from_dts(uint32_t fdt,uint32_t dtb_offset)
65935:void _dump_partition(void)
65973:int hal_boot2_update_ptable(HALPartition_Entry_Config *ptEntry_hal)
65992:uint32_t hal_boot2_get_flash_addr(void)
66001:int hal_boot2_partition_bus_addr
66084:int hal_boot2_partition_bus_addr_active(char *name,uint32_t *addr,uint32_t *size)
66112:int hal_boot2_partition_bus_addr_inactive(char *name,uint32_t *addr,uint32_t *size)
66140:int hal_boot2_partition_addr
66179:int hal_boot2_partition_addr_active(char *name,uint32_t *addr,uint32_t *size)
66207:int hal_boot2_partition_addr_inactive(char *name,uint32_t *addr,uint32_t *size)
66235:uint8_t hal_boot2_get_active_partition(void)
66244:int hal_boot2_get_active_entries(int type,HALPartition_Entry_Config *ptEntry_hal)
66259:int hal_boot2_dump(void)
66269:int hal_boot2_init(void)
66295:int hal_reboot(void)
66306:void hal_sys_reset(void)
66317:void hal_poweroff(void)
66328:void hal_sys_capcode_update(uint8_t capin,uint8_t capout)
66351:uint8_t hal_sys_capcode_get(void)
66363:uint32_t fdt32_to_cpu(fdt32_t x)
66372:uint32_t hal_board_get_factory_addr(void)
66383:int hal_board_cfg(uint8_t board_code)
67549:int bl_tsen_adc_get(int16_t *temp,uint8_t log_flag)
67618:uint64_t bl_rtc_get_counter(void)
67633:uint64_t bl_rtc_get_timestamp_ms(void)
67645:int hal_wifi_start_firmware_task(void)
67657:int bl_sys_reset_por(void)
67668:void bl_sys_reset_system(void)
67679:int bl_sys_isxipaddr(uint32_t addr)
67688:PtTable_Error_Type
67689:PtTable_Update_Entry
67755:PtTable_Error_Type
67756:PtTable_Get_Active_Entries
67790:int bl_gpio_enable_output(uint8_t pin,uint8_t pullup,uint8_t pulldown)
67818:int bl_gpio_enable_input(uint8_t pin,uint8_t pullup,uint8_t pulldown)
67846:int bl_gpio_output_set(uint8_t pin,uint8_t value)
67858:int bl_gpio_input_get(uint8_t pin,uint8_t *value)
67873:int bl_flash_erase(uint32_t addr,int len)
67889:int bl_flash_write(uint32_t addr,uint8_t *src,int len)
67905:int bl_flash_read(uint32_t addr,uint8_t *dst,int len)
67919:int bl_flash_config_update(void)
68010:void bl_wdt_feed(void)
68023:void bl_wdt_disable(void)
68034:int bl_wdt_init(int ms)
68053:err_t httpc_tcp_sent(void *arg,altcp_pcb *pcb,u16_t len)
68062:err_t httpc_get_internal_addr(httpc_state_t *req,ip_addr_t *ipaddr)
68077:err_t httpc_free_state(httpc_state_t *req)
68113:err_t httpc_close(httpc_state_t *req,httpc_result_t result,u32_t server_response,err_t err)
68134:err_t httpc_tcp_recv(void *arg,altcp_pcb *pcb,pbuf *p,err_t r)
68277:void httpc_dns_found(char *hostname,ip_addr_t *ipaddr,void *arg)
68305:err_t httpc_tcp_poll(void *arg,altcp_pcb *pcb)
68324:void httpc_tcp_err(void *arg,err_t err)
68339:err_t httpc_tcp_connected(void *arg,altcp_pcb *pcb,err_t err)
68363:int httpc_create_request_string
68411:err_t httpc_init_connection_common
68479:err_t httpc_get_file_dns(char *server_name,u16_t port,char *uri,
68530:void proc_entry_looprt(void *pvParameters)
68542:void looprt_evt_notify_async(uint task,uint32_t evt_map)
68552:void looprt_evt_status_dump(void)
68562:void looprt_evt_schedule(int task,uint32_t evt_map,int delay_ms)
68583:int looprt_start(StackType_t *proc_stack_looprt,int stack_count,StaticTask_t *proc_task_looprt)
68598:int looprt_start_auto(void)
68612:int looprt_handler_register(loop_evt_handler *handler,int priority)
68628:int looprt_timer_register(loop_timer *timer)
68638:void cmd_looprt_test(char *buf,int len,int argc,char **argv)
68651:void cmd_looprt_test_status(char *buf,int len,int argc,char **argv)
68662:void cmd_looprt_test_evt(char *buf,int len,int argc,char **argv)
68673:void cmd_looprt_test_evt_dump(char *buf,int len,int argc,char **argv)
68684:void cmd_looprt_test_schedule_evt1(char *buf,int len,int argc,char **argv)
68695:void cmd_looprt_test_schedule_evt2(char *buf,int len,int argc,char **argv)
68706:int looprt_test_cli_init(void)
68715:void _cb_led_trigger(loop_ctx *loop,loop_timer *timer,void *arg)
68746:int _led_bloop_msg(loop_ctx *loop,loop_evt_handler *handler,loop_msg *msg)
68772:int _led_bloop_evt(loop_ctx *loop,loop_evt_handler *handler,uint32_t *bitmap_evt,
68852:int loopset_led_hook_on_looprt(void)
68869:void loopset_led_trigger(int pin,uint timeon_ms)
68912:err_t sys_mbox_new(sys_mbox_t *mbox,int size)
68929:void sys_mbox_free(sys_mbox_t *mbox)
68946:void sys_mbox_post(sys_mbox_t *mbox,void *data)
68962:err_t sys_mbox_trypost(sys_mbox_t *mbox,void *msg)
68984:u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox,void **msg,u32_t timeout)
69020:u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox,void **msg)
69037:bool sys_mbox_valid(int *param_1)
69046:void sys_mbox_set_invalid(undefined4 *param_1)
69056:err_t sys_sem_new(sys_sem_t *sem,u8_t count)
69089:u32_t sys_arch_sem_wait(sys_sem_t *sem,u32_t timeout)
69117:void sys_sem_free(sys_sem_t *sem)
69128:int sys_sem_valid(sys_sem_t *sem)
69137:void sys_sem_set_invalid(sys_sem_t *sem)
69147:void sys_init(void)
69157:err_t sys_mutex_new(sys_mutex_t *mutex)
69183:void sys_mutex_lock(sys_mutex_t *mutex)
69193:void sys_mutex_unlock(sys_mutex_t *mutex)
69203:void sys_sem_signal(sys_mutex_t *mutex)
69213:sys_thread_t sys_thread_new(char *name,lwip_thread_fn *thread,void *arg,int stacksize,int prio)
69235:sys_prot_t sys_arch_protect(void)
69245:void sys_arch_unprotect(void)
69259:TickType_t sys_now(void)
69270:hostent * lwip_gethostbyname(char *name)
69304:void lwip_freeaddrinfo(addrinfo *ai)
69327:int lwip_getaddrinfo(char *nodename,char *servname,addrinfo *hints,addrinfo **res)
69431:err_t netifapi_do_netif_add(tcpip_api_call_data *m)
69452:err_t netifapi_do_netif_set_addr(tcpip_api_call_data *m)
69463:err_t netifapi_do_netif_common(tcpip_api_call_data *m)
69482:err_t netifapi_netif_add(netif *netif,ip4_addr_t *ipaddr,ip4_addr_t *netmask,ip4_addr_t *gw,
69513:err_t netifapi_netif_set_addr(netif *netif,ip4_addr_t *ipaddr,ip4_addr_t *netmask,ip4_addr_t *gw)
69540:err_t netifapi_netif_common(netif *netif,netifapi_void_fn voidfunc,netifapi_errt_fn errtfunc)
69557:int alloc_socket(netconn *newconn,int accepted)
69592:void lwip_link_select_cb(lwip_select_cb *select_cb)
69609:void lwip_unlink_select_cb(lwip_select_cb *select_cb)
69631:int lwip_selscan(int maxfdp1,_types_fd_set *readset_in,_types_fd_set *writeset_in,
69721:ssize_t lwip_recv_tcp(lwip_sock *sock,void *mem,size_t len,int flags)
69803:int lwip_sock_make_addr(u16_t port,sockaddr *from,socklen_t *fromlen)
69830:void free_socket(lwip_sock *sock,int is_tcp)
69861:err_t lwip_recvfrom_udp_raw(lwip_sock *sock,int flags,msghdr *msg,u16_t *datagram_len)
69917:lwip_sock * get_socket(int fd)
69934:void lwip_setsockopt_callback(void *arg)
70175:switchD_2303add6_caseD_7:
70187:void event_callback(netconn *conn,netconn_evt evt,u16_t len)
70304:int lwip_accept(int s,sockaddr *addr,socklen_t *addrlen)
70385:int lwip_bind(int s,sockaddr *name,socklen_t namelen)
70424:int lwip_close(int s)
70478:int lwip_connect(int s,sockaddr *name,socklen_t namelen)
70522:int lwip_listen(int s,int backlog)
70561:ssize_t lwip_recvfrom(int s,void *mem,size_t len,int flags,sockaddr *from,socklen_t *fromlen)
70627:ssize_t lwip_read(int s,void *mem,size_t len)
70639:ssize_t lwip_recv(int s,void *mem,size_t len,int flags)
70651:ssize_t lwip_sendto(int s,void *data,size_t size,int flags,sockaddr *to,socklen_t tolen)
70729:ssize_t lwip_send(int s,void *data,size_t size,int flags)
70766:int lwip_socket(int domain,int type,int protocol)
70816:ssize_t lwip_write(int s,void *data,size_t size)
70828:int lwip_select(int maxfdp1,_types_fd_set *readset,_types_fd_set *writeset,_types_fd_set *exceptset,
70981:int lwip_shutdown(int s,int how)
71038:int lwip_setsockopt(int s,int level,int optname,void *optval,socklen_t optlen)
71082:int lwip_fcntl(int s,int cmd,int val)
71130:void tcpip_thread(void *arg)
71145:switchD_2303bc70_caseD_5:
71190:err_t tcpip_inpkt(pbuf *p,netif *inp,netif_input_fn *input_fn)
71222:err_t tcpip_input(pbuf *p,netif *inp)
71241:err_t tcpip_callback(tcpip_callback_fn function,void *ctx)
71265:err_t tcpip_try_callback(tcpip_callback_fn function,void *ctx)
71294:err_t tcpip_send_msg_wait_sem(tcpip_callback_fn fn,void *apimsg,sys_sem_t *sem)
71315:err_t tcpip_api_call(tcpip_api_call_fn *fn,tcpip_api_call_data *call)
71345:void tcpip_init(tcpip_init_done_fn initfunc,void *arg)
71359:altcp_pcb * altcp_alloc(void)
71374:void altcp_free(altcp_pcb *conn)
71396:altcp_pcb * altcp_new_ip_type(altcp_allocator_t *allocator,u8_t ip_type)
71419:altcp_pcb * altcp_new(altcp_allocator_t *allocator)
71431:void altcp_arg(altcp_pcb *conn,void *arg)
71443:void altcp_recv(altcp_pcb *conn,altcp_recv_fn *recv)
71455:void altcp_sent(altcp_pcb *conn,altcp_sent_fn *sent)
71469:void altcp_poll(altcp_pcb *conn,altcp_poll_fn *poll,u8_t interval)
71494:void altcp_err(altcp_pcb *conn,altcp_err_fn *err)
71508:void altcp_recved(altcp_pcb *conn,u16_t len)
71529:err_t altcp_connect(altcp_pcb *conn,ip_addr_t *ipaddr,u16_t port,altcp_connected_fn connected)
71552:void altcp_abort(altcp_pcb *conn)
71573:err_t altcp_close(altcp_pcb *conn)
71595:err_t altcp_write(altcp_pcb *conn,void *dataptr,u16_t len,u8_t apiflags)
71617:err_t altcp_output(altcp_pcb *conn)
71637:err_t altcp_tcp_connected(void *arg,tcp_pcb *tpcb,err_t err)
71655:err_t altcp_tcp_sent(void *arg,tcp_pcb *tpcb,u16_t len)
71673:err_t altcp_tcp_poll(void *arg,tcp_pcb *tpcb)
71691:u16_t altcp_tcp_mss(altcp_pcb *conn)
71704:u16_t altcp_tcp_sndbuf(altcp_pcb *conn)
71717:u16_t altcp_tcp_sndqueuelen(altcp_pcb *conn)
71730:void altcp_tcp_nagle_disable(altcp_pcb *conn)
71744:void altcp_tcp_nagle_enable(altcp_pcb *conn)
71758:int altcp_tcp_nagle_disabled(altcp_pcb *conn)
71771:void altcp_tcp_dealloc(altcp_pcb *conn)
71780:ip_addr_t * altcp_tcp_get_ip(altcp_pcb *conn,int local)
71793:u16_t altcp_tcp_get_port(altcp_pcb *conn,int local)
71812:void altcp_tcp_setup_callbacks(altcp_pcb *conn,tcp_pcb *tpcb)
71825:void altcp_tcp_err(void *arg,err_t err)
71843:err_t altcp_tcp_get_tcp_addrinfo(altcp_pcb *conn,int local,ip_addr_t *addr,u16_t *port)
71859:void altcp_tcp_setprio(altcp_pcb *conn,u8_t prio)
71873:err_t altcp_tcp_output(altcp_pcb *conn)
71889:err_t altcp_tcp_write(altcp_pcb *conn,void *dataptr,u16_t len,u8_t apiflags)
71905:err_t altcp_tcp_shutdown(altcp_pcb *conn,int shut_rx,int shut_tx)
71921:err_t altcp_tcp_close(altcp_pcb *conn)
71959:void altcp_tcp_abort(altcp_pcb *conn)
71973:altcp_pcb * altcp_tcp_listen(altcp_pcb *conn,u8_t backlog,err_t *err)
71993:err_t altcp_tcp_connect(altcp_pcb *conn,ip_addr_t *ipaddr,u16_t port,altcp_connected_fn connected)
72010:err_t altcp_tcp_bind(altcp_pcb *conn,ip_addr_t *ipaddr,u16_t port)
72026:void altcp_tcp_recved(altcp_pcb *conn,u16_t len)
72040:err_t altcp_tcp_recv(void *arg,tcp_pcb *tpcb,pbuf *p,err_t err)
72063:void altcp_tcp_set_poll(altcp_pcb *conn,u8_t interval)
72077:err_t altcp_tcp_accept(void *arg,tcp_pcb *new_tpcb,err_t err)
72106:altcp_pcb * altcp_tcp_new_ip_type(u8_t ip_type)
72131:u16_t lwip_htons(u16_t n)
72142:u32_t lwip_htonl(u32_t n)
72151:int lwip_strnicmp(char *str1,char *str2,size_t len)
72174:void dns_call_found(u8_t idx,ip_addr_t *addr)
72193:err_t dns_send(u8_t idx)
72260:void dns_check_entry(u8_t i)
72325:void dns_recv(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *addr,u16_t port)
72476:ignore_packet:
72485:void dns_init(void)
72501:void dns_setserver(u8_t numdns,ip_addr_t *dnsserver)
72522:ip_addr_t * dns_getserver(u8_t numdns)
72537:void dns_tmr(void)
72550:err_t dns_gethostbyname_addrtype
72634:err_t dns_gethostbyname(char *hostname,ip_addr_t *addr,dns_found_callback *found,void *callback_arg)
72646:u16_t lwip_standard_chksum(void *dataptr,int len)
72710:u16_t inet_chksum_pseudo(pbuf *p,u8_t proto,u16_t proto_len,ip4_addr_t *src,ip4_addr_t *dest)
72749:u16_t ip_chksum_pseudo(pbuf *p,u8_t proto,u16_t proto_len,ip4_addr_t *src,ip4_addr_t *dest)
72789:u16_t inet_chksum_pseudo_partial
72839:u16_t ip_chksum_pseudo_partial
72890:u16_t inet_chksum(void *dataptr,u16_t len)
72903:u16_t inet_chksum_pbuf(pbuf *p)
72932:u16_t lwip_chksum_copy(void *dst,void *src,u16_t len)
72946:void lwip_init(void)
72965:void dhcp_set_state(dhcp *dhcp,u8_t new_state)
72981:u16_t dhcp_option_short(u16_t options_out_len,u8_t *options,u16_t value)
72996:u16_t dhcp_option_long(u16_t options_out_len,u8_t *options,u32_t value)
73013:pbuf * dhcp_create_msg(netif *netif,dhcp *dhcp,u8_t message_type,u16_t *options_out_len)
73078:void dhcp_option_trailer(u16_t options_out_len,u8_t *options,pbuf *p_out)
73100:err_t dhcp_discover(netif *netif)
73152:void dhcp_check(netif *netif)
73172:void dhcp_bind(netif *netif)
73273:err_t dhcp_inc_pcb_refcount(void)
73298:u16_t dhcp_option_hostname(u16_t options_out_len,u8_t *options)
73335:err_t dhcp_reboot(netif *netif)
73399:err_t dhcp_select(netif *netif)
73477:void dhcp_dec_pcb_refcount(void)
73493:void dhcp_handle_ack(dhcp_msg *msg_in)
73546:void dhcp_recv(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *addr,u16_t port)
73596:free_pbuf_and_return:
73848:void dhcp_network_changed(netif *netif)
73884:void dhcp_arp_reply(netif *netif,ip4_addr_t *addr)
73929:err_t dhcp_renew(netif *netif)
73983:u8_t dhcp_supplied_address(netif *netif)
74006:void dhcp_release_and_stop(netif *netif)
74064:err_t dhcp_start(netif *netif)
74111:void dhcp_coarse_tmr(void)
74201:void dhcp_fine_tmr(void)
74268:void dhcp_stop(netif *netif)
74324:void etharp_free_entry(int i)
74341:s16_t etharp_find_entry(ip4_addr_t *ipaddr,u8_t flags,netif *netif)
74427:err_t etharp_raw(netif *netif,eth_addr *ethsrc_addr,eth_addr *ethdst_addr,eth_addr *hwsrc_addr,
74467:void etharp_cleanup_netif(netif *netif)
74490:void etharp_input(pbuf *p,netif *netif)
74572:err_t etharp_request(netif *netif,ip4_addr_t *ipaddr)
74585:void etharp_tmr(void)
74632:err_t etharp_output_to_arp_index(netif *netif,pbuf *q,netif_addr_idx_t arp_idx)
74668:err_t etharp_query(netif *netif,ip4_addr_t *ipaddr,pbuf *q)
74742:err_t etharp_output(netif *netif,pbuf *q,ip4_addr_t *ipaddr)
74812:void igmp_send(netif *netif,igmp_group *group,u8_t type)
74873:void igmp_delaying_member(igmp_group *group,u8_t maxresp)
74900:void igmp_init(void)
74911:err_t igmp_stop(netif *netif)
74935:void igmp_report_groups(netif *netif)
74955:igmp_group * igmp_lookfor_group(netif *ifp,ip4_addr_t *addr)
74972:igmp_group * igmp_lookup_group(netif *ifp,ip4_addr_t *addr)
75007:err_t igmp_start(netif *netif)
75034:void igmp_input(pbuf *p,netif *inp,ip4_addr_t *dest)
75117:err_t igmp_joingroup_netif(netif *netif,ip4_addr_t *groupaddr)
75157:err_t igmp_joingroup(ip4_addr_t *ifaddr,ip4_addr_t *groupaddr)
75189:err_t igmp_leavegroup_netif(netif *netif,ip4_addr_t *groupaddr)
75235:err_t igmp_leavegroup(ip4_addr_t *ifaddr,ip4_addr_t *groupaddr)
75264:void igmp_tmr(void)
75291:int ip4_input_accept(netif *netif)
75319:netif * ip4_route(ip4_addr_t *dest)
75354:err_t ip4_input(pbuf *p,netif *inp)
75509:err_t ip4_output_if_opt_src
75631:err_t ip4_output_if_opt(pbuf *p,ip4_addr_t *src,ip4_addr_t *dest,u8_t ttl,u8_t tos,u8_t proto,
75649:err_t ip4_output_if(pbuf *p,ip4_addr_t *src,ip4_addr_t *dest,u8_t ttl,u8_t tos,u8_t proto,
75664:err_t ip4_output_if_src(pbuf *p,ip4_addr_t *src,ip4_addr_t *dest,u8_t ttl,u8_t tos,u8_t proto,
75677:u8_t ip4_addr_isbroadcast_u32(u32_t addr,netif *netif)
75705:int ip4addr_aton(char *cp,ip4_addr_t *addr)
75844:u32_t ipaddr_addr(char *cp)
75863:char * ip4addr_ntoa_r(ip4_addr_t *addr,char *buf,int buflen)
75923:char * ip4addr_ntoa(ip4_addr_t *addr)
75935:void mem_init(void)
75953:void mem_free(void *rmem)
76028:void * mem_trim(void *rmem,mem_size_t new_size)
76124:void * mem_malloc(mem_size_t size_in)
76215:void * do_memp_malloc_pool(memp_desc *desc)
76243:void memp_init_pool(memp_desc *desc)
76265:void memp_init(void)
76287:void * memp_malloc(memp_t type)
76304:void memp_free(memp_t type,void *mem)
76326:err_t netif_null_output_ip4(netif *netif,pbuf *p,ip4_addr_t *ipaddr)
76335:void netif_issue_reports(netif *netif,u8_t report_type)
76361:int netif_do_set_ipaddr(netif *netif,ip4_addr_t *ipaddr,ip_addr_t *old_addr)
76389:void netif_init(void)
76398:void netif_set_ipaddr(netif *netif,ip4_addr_t *ipaddr)
76418:void netif_set_netmask(netif *netif,ip4_addr_t *netmask)
76435:void netif_set_gw(netif *netif,ip4_addr_t *gw)
76454:void netif_set_addr(netif *netif,ip4_addr_t *ipaddr,ip4_addr_t *netmask,ip4_addr_t *gw)
76489:netif * netif_add(netif *netif,ip4_addr_t *ipaddr,ip4_addr_t *netmask,ip4_addr_t *gw,void *state,
76559:void netif_set_default(netif *netif)
76569:void netif_set_up(netif *netif)
76591:void netif_set_down(netif *netif)
76620:void netif_remove(netif *netif)
76665:void netif_set_status_callback(netif *netif,netif_status_callback_fn *status_callback)
76677:void netif_set_link_up(netif *netif)
76704:void netif_set_link_down(netif *netif)
76725:netif * netif_get_by_index(u8_t idx)
76746:netif * netif_find(char *name)
76773:pbuf * pbuf_skip_const(pbuf *in,u16_t in_offset,u16_t *out_offset)
76794:void pbuf_free_ooseq_callback(void *arg)
76818:u8_t pbuf_add_header_impl(pbuf *p,size_t header_size_increment,u8_t force)
76863:pbuf * pbuf_alloc_reference(void *payload,u16_t length,pbuf_type type)
76884:pbuf * pbuf_alloced_custom(pbuf_layer l,u16_t length,pbuf_type type,pbuf_custom *p,void *payload_mem
76915:u8_t pbuf_add_header(pbuf *p,size_t header_size_increment)
76927:u8_t pbuf_remove_header(pbuf *p,size_t header_size_decrement)
76954:u8_t pbuf_header(pbuf *p,s16_t header_size_increment)
76972:u8_t pbuf_header_force(pbuf *p,s16_t header_size_increment)
76990:u8_t pbuf_free(pbuf *p)
77040:pbuf * pbuf_alloc(pbuf_layer layer,u16_t length,pbuf_type type)
77142:void pbuf_realloc(pbuf *p,u16_t new_len)
77176:pbuf * pbuf_free_header(pbuf *q,u16_t size)
77207:u16_t pbuf_clen(pbuf *p)
77223:void pbuf_ref(pbuf *p)
77239:void pbuf_cat(pbuf *h,pbuf *t)
77262:void pbuf_chain(pbuf *h,pbuf *t)
77273:err_t pbuf_copy(pbuf *p_to,pbuf *p_from)
77332:u16_t pbuf_copy_partial(pbuf *buf,void *dataptr,u16_t len,u16_t offset)
77371:err_t pbuf_take(pbuf *buf,void *dataptr,u16_t len)
77409:err_t pbuf_take_at(pbuf *buf,void *dataptr,u16_t len,u16_t offset)
77450:pbuf * pbuf_clone(pbuf_layer layer,pbuf_type type,pbuf *p)
77465:int pbuf_try_get_at(pbuf *p,u16_t offset)
77487:u8_t pbuf_get_at(pbuf *p,u16_t offset)
77502:void pbuf_put_at(pbuf *p,u16_t offset,u8_t data)
77519:u16_t pbuf_memcmp(pbuf *p,u16_t offset,void *s2,u16_t n)
77566:u16_t pbuf_memfind(pbuf *p,void *mem,u16_t mem_len,u16_t start_offset)
77593:raw_input_state_t raw_input(pbuf *p,netif *inp)
77654:err_t raw_bind(raw_pcb *pcb,ip_addr_t *ipaddr)
77670:void raw_bind_netif(raw_pcb *pcb,netif *netif)
77686:err_t raw_connect(raw_pcb *pcb,ip_addr_t *ipaddr)
77701:void raw_recv(raw_pcb *pcb,raw_recv_fn *recv,void *recv_arg)
77712:err_t raw_sendto_if_src(raw_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,netif *netif,ip_addr_t *src_ip)
77777:err_t raw_sendto(raw_pcb *pcb,pbuf *p,ip_addr_t *ipaddr)
77813:err_t raw_send(raw_pcb *pcb,pbuf *p)
77825:void raw_remove(raw_pcb *pcb)
77851:raw_pcb * raw_new(u8_t proto)
77873:raw_pcb * raw_new_ip_type(u8_t type,u8_t proto)
77885:void raw_netif_ip_addr_changed(ip_addr_t *old_addr,ip_addr_t *new_addr)
77905:raw_pcb * raw_get_pcbs(void)
77914:void stats_init(void)
77926:void stats_netstat(void *ctx)
77981:u16_t tcp_new_port(void)
77989:again:
78018:err_t tcp_close_shutdown_fin(tcp_pcb *pcb)
78062:void tcp_init(void)
78076:void tcp_free(tcp_pcb *pcb)
78086:err_t tcp_bind(tcp_pcb *pcb,ip_addr_t *ipaddr,u16_t port)
78147:void tcp_bind_netif(tcp_pcb *pcb,netif *netif)
78163:tcp_pcb * tcp_listen_with_backlog_and_err(tcp_pcb *pcb,u8_t backlog,err_t *err)
78242:u32_t tcp_update_rcv_ann_wnd(tcp_pcb *pcb)
78274:void tcp_recved(tcp_pcb *pcb,u16_t len)
78302:void tcp_seg_free(tcp_seg *seg)
78319:void tcp_segs_free(tcp_seg *seg)
78339:void tcp_setprio(tcp_pcb *pcb,u8_t prio)
78351:tcp_seg * tcp_seg_copy(tcp_seg *seg)
78367:void tcp_arg(tcp_pcb *pcb,void *arg)
78379:void tcp_recv(tcp_pcb *pcb,tcp_recv_fn *recv)
78391:void tcp_sent(tcp_pcb *pcb,tcp_sent_fn *sent)
78403:void tcp_err(tcp_pcb *pcb,tcp_err_fn *err)
78415:void tcp_accept(tcp_pcb *pcb,tcp_accept_fn accept)
78427:void tcp_poll(tcp_pcb *pcb,tcp_poll_fn *poll,u8_t interval)
78440:u32_t tcp_next_iss(tcp_pcb *pcb)
78450:u16_t tcp_eff_send_mss_netif(u16_t sendmss,netif *outif,ip_addr_t *dest)
78472:err_t tcp_connect(tcp_pcb *pcb,ip_addr_t *ipaddr,u16_t port,tcp_connected_fn connected)
78582:char * tcp_debug_state_str(tcp_state s)
78593:err_t tcp_tcp_get_tcp_addrinfo(tcp_pcb *pcb,int local,ip_addr_t *addr,u16_t *port)
78629:void tcp_free_ooseq(tcp_pcb *pcb)
78644:void tcp_pcb_purge(tcp_pcb *pcb)
78670:void tcp_pcb_remove(tcp_pcb **pcblist,tcp_pcb *pcb)
78703:void tcp_abandon(tcp_pcb *pcb,int reset)
78780:void tcp_abort(tcp_pcb *pcb)
78790:err_t tcp_accept_null(void *arg,tcp_pcb *pcb,err_t err)
78800:void tcp_netif_ip_addr_changed_pcblist(tcp_pcb *pcb_list)
78818:void tcp_netif_ip_addr_changed(ip_addr_t *old_addr,ip_addr_t *new_addr)
78845:void tcp_kill_state(tcp_state state)
78876:tcp_pcb * tcp_alloc(u8_t prio)
78975:tcp_pcb * tcp_new_ip_type(u8_t type)
78987:err_t tcp_close_shutdown(tcp_pcb *pcb,u8_t rst_on_unacked_data)
79078:err_t tcp_close(tcp_pcb *pcb)
79097:err_t tcp_recv_null(void *arg,tcp_pcb *pcb,pbuf *p,err_t err)
79124:err_t tcp_process_refused_data(tcp_pcb *pcb)
79172:void tcp_fasttmr(void)
79212:err_t tcp_shutdown(tcp_pcb *pcb,int shut_rx,int shut_tx)
79256:void tcp_slowtmr(void)
79481:void tcp_tmr(void)
79497:int tcp_get_pcbs(tcp_pcb ****list)
79507:u8_t tcp_get_next_optbyte(void)
79525:void tcp_oos_insert_segment(tcp_seg *cseg,tcp_seg *next)
79574:void tcp_parseopt(undefined2 *param_1)
79630:int tcp_input_delayed_close(tcp_pcb *pcb)
79648:tcp_seg * tcp_free_acked_segments(tcp_seg *seg_list)
79679:void tcp_receive(tcp_pcb *pcb)
80094:void tcp_input(pbuf *p,netif *inp)
80494:code_r0x2304374e:
80633:switchD_23043a08_caseD_8:
80691:aborted:
80704:void tcp_trigger_input_pcb_close(void)
80714:void tcp_seg_add_chksum(u16_t chksum,u16_t len,u16_t *seg_chksum,u8_t *seg_chksum_swapped)
80735:tcp_seg * tcp_create_segment(tcp_pcb *pcb,pbuf *p,u8_t hdrflags,u32_t seqno,u8_t optflags)
80796:pbuf * tcp_output_alloc_header_common
80842:pbuf * tcp_output_alloc_header(tcp_pcb *pcb,u16_t datalen,u32_t seqno_be)
80859:err_t tcp_output_control_segment(tcp_pcb *pcb,pbuf *p,ip_addr_t *src,ip_addr_t *dst)
80899:err_t tcp_write(tcp_pcb *pcb,void *arg,u16_t len,u8_t apiflags)
80984:memerr:
81071:err_t tcp_split_unsent_seg(tcp_pcb *pcb,u16_t split)
81201:err_t tcp_enqueue_flags(tcp_pcb *pcb,u8_t flags)
81250:err_t tcp_send_fin(tcp_pcb *pcb)
81286:err_t tcp_rexmit_rto_prepare(tcp_pcb *pcb)
81327:err_t tcp_rexmit(tcp_pcb *pcb)
81364:void tcp_rexmit_fast(tcp_pcb *pcb)
81396:void tcp_rst(tcp_pcb *pcb,u32_t seqno,u32_t ackno,ip_addr_t *param_4,ip_addr_t *remote_ip,
81416:err_t tcp_send_empty_ack(tcp_pcb *pcb)
81449:err_t tcp_output(tcp_pcb *pcb)
81483:joined_r0x23044bb0:
81659:output_done:
81669:void tcp_rexmit_rto_commit(tcp_pcb *pcb)
81682:void tcp_rexmit_rto(tcp_pcb *pcb)
81700:err_t tcp_keepalive(tcp_pcb *pcb)
81720:err_t tcp_zero_window_probe(tcp_pcb *pcb)
81775:void sys_timeout_abs(u32_t abs_time,sys_timeout_handler *handler,void *arg)
81814:void lwip_cyclic_timer(void *arg)
81836:void sys_timeout(u32_t msecs,sys_timeout_handler *handler,void *arg)
81849:void tcp_timer_needed(void)
81865:void tcpip_tcp_timer(void *arg)
81881:void sys_timeouts_init(void)
81899:void sys_untimeout(sys_timeout_handler *handler,void *arg)
81931:void sys_check_timeouts(void)
81957:u32_t sys_timeouts_sleeptime(void)
81977:void udp_init(void)
81990:void udp_input(pbuf *p,netif *inp)
82113:err_t udp_bind(udp_pcb *pcb,ip_addr_t *ipaddr,u16_t port)
82190:err_t udp_sendto_if_src_chksum
82283:err_t udp_sendto_if_chksum
82316:err_t udp_sendto_chksum(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port,u8_t have_chksum,
82359:err_t udp_send_chksum(udp_pcb *pcb,pbuf *p,u8_t have_chksum,u16_t chksum)
82375:err_t udp_sendto(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port)
82387:err_t udp_sendto_if(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port,netif *netif)
82399:err_t udp_sendto_if_src(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port,netif *netif,
82412:void udp_bind_netif(udp_pcb *pcb,netif *netif)
82428:err_t udp_connect(udp_pcb *pcb,ip_addr_t *ipaddr,u16_t port)
82466:void udp_disconnect(udp_pcb *pcb)
82484:void udp_recv(udp_pcb *pcb,udp_recv_fn *recv,void *recv_arg)
82497:void udp_remove(udp_pcb *pcb)
82527:udp_pcb * udp_new(void)
82544:udp_pcb * udp_new_ip_type(void)
82561:void udp_netif_ip_addr_changed(ip_addr_t *old_addr,ip_addr_t *new_addr)
82581:udp_pcb * udp_get_pcbs(void)
82590:err_t ethernet_input(pbuf *p,netif *netif)
82647:free_and_return:
82655:err_t ethernet_output(netif *netif,pbuf *p,eth_addr *src,eth_addr *dst,u16_t eth_type)
82685:err_t netconn_apimsg(tcpip_callback_fn_conflict *fn,api_msg *apimsg)
82703:err_t netconn_close_shutdown(netconn *conn,u8_t how)
82726:netconn * netconn_new_with_proto_and_callback(netconn_type t,u8_t proto,netconn_callback *callback)
82756:err_t netconn_prepare_delete(netconn *conn)
82776:err_t netconn_delete(netconn *conn)
82797:err_t netconn_getaddr(netconn *conn,ip_addr_t *addr,u16_t *port,u8_t local)
82823:err_t netconn_bind(netconn *conn,ip_addr_t *addr,u16_t port)
82847:err_t netconn_connect(netconn *conn,ip_addr_t *addr,u16_t port)
82871:err_t netconn_disconnect(netconn *conn)
82890:err_t netconn_listen_with_backlog(netconn *conn,u8_t backlog)
82909:err_t netconn_tcp_recvd(netconn *conn,size_t len)
82933:err_t netconn_send(netconn *conn,netbuf *buf)
82953:err_t netconn_write_vectors_partly
83032:err_t netconn_write_partly
83049:err_t netconn_err(netconn *conn)
83067:err_t netconn_accept(netconn *conn,netconn **new_conn)
83129:err_t netconn_recv_data(netconn *conn,void **new_buf,u8_t apiflags)
83202:err_t netconn_recv_udp_raw_netbuf_flags(netconn *conn,netbuf **new_buf,u8_t apiflags)
83218:err_t netconn_recv_data_tcp(netconn *conn,pbuf **new_buf,u8_t apiflags)
83282:err_t netconn_recv_tcp_pbuf_flags(netconn *conn,pbuf **new_buf,u8_t apiflags)
83298:err_t netconn_shutdown(netconn *conn,u8_t shut_rx,u8_t shut_tx)
83314:err_t netconn_join_leave_group
83344:err_t netconn_gethostbyname(char *name,ip_addr_t *addr)
83379:void lwip_netconn_do_dns_found(char *name,ip_addr_t *ipaddr,void *arg)
83396:void recv_udp(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *addr,u16_t port)
83444:void setup_tcp(netconn *conn)
83461:err_t lwip_netconn_do_connected(void *arg,tcp_pcb *pcb,err_t err)
83498:void err_tcp(void *arg,err_t err)
83559:err_t lwip_netconn_do_writemore(netconn *conn)
83703:err_t lwip_netconn_do_close_internal(netconn *conn)
83798:err_t poll_tcp(void *arg,tcp_pcb *pcb)
83824:u8_t recv_raw(void *arg,raw_pcb *pcb,pbuf *p,ip_addr_t *addr)
83870:err_t sent_tcp(void *arg,tcp_pcb *pcb,u16_t len)
83901:err_t recv_tcp(void *arg,tcp_pcb *pcb,pbuf *p,err_t err)
83947:int lwip_netconn_is_err_msg(void *msg,err_t *err)
83974:void lwip_netconn_do_newconn(void *m)
84042:netconn * netconn_alloc(netconn_type t,netconn_callback *callback)
84089:free_and_return:
84097:void netconn_free(netconn *conn)
84111:void netconn_drain(netconn *conn)
84167:err_t accept_function(void *arg,tcp_pcb *newpcb,err_t err)
84236:void lwip_netconn_do_delconn(void *m)
84307:void lwip_netconn_do_bind(void *m)
84345:void lwip_netconn_do_connect(void *m)
84420:void lwip_netconn_do_disconnect(void *m)
84439:void lwip_netconn_do_listen(void *m)
84517:void lwip_netconn_do_send(void *m)
84576:void lwip_netconn_do_recv(void *m)
84604:void lwip_netconn_do_write(void *m)
84642:void lwip_netconn_do_getaddr(void *m)
84713:void lwip_netconn_do_close(void *m)
84752:void lwip_netconn_do_join_leave_group(void *m)
84781:void lwip_netconn_do_gethostbyname(void *arg)
84803:int err_to_errno(err_t err)
84818:void netbuf_delete(netbuf *buf)
84837:void * netbuf_alloc(netbuf *buf,u16_t size)
84865:void netbuf_free(netbuf *buf)
84885:void icmp_input(pbuf *p,netif *inp)
84913:lenerr:
85012:void icmp_dest_unreach(pbuf *p,icmp_dur_type t)
85053:u8_t * dhcp_server_option_find(u8_t *buf,u16_t len,u8_t option)
85076:dhcp_client_node * dhcp_client_find_by_ip(uint8_t *ip)
85097:void dhcp_server_recv(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *recv_addr,u16_t port)
85293:err_t dhcp_server_start(netif *netif,ip4_addr_t *start,ip4_addr_t *end)
85336:err_t dhcp_server_stop(netif *netif)
85362:void dhcpd_start(netif *netif)
85408:void tcpc_entry(void *arg)
85481:void tcpclient_cmd(char *buf,int len,int argc,char **argv)
85509:int network_netutils_tcpclinet_cli_register(void)
85520:void TCP_Server(void *pvParameters)
85745:void cmd_tcp_server(char *buf,int len,int argc,char **argv)
85760:int network_netutils_tcpserver_cli_register(void)
85769:void iperf_server_udp_entry(char *name)
85785:void iperf_client_udp_entry(char *name)
85801:void iperf_server_entry(char *name)
85817:void iperf_client_tcp_entry(char *name)
85833:void iperf_server_udp(void *arg)
85876:void iperf_server_udp_recv_fn(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *addr,u16_t port)
86018:void iperf_client_udp(void *arg)
86141:void iperf_server(void *arg)
86262:void iperf_client_tcp(void *arg)
86368:void ipus_test_cmd(char *buf,int len,int argc,char **argv)
86392:void ipu_test_cmd(char *buf,int len,int argc,char **argv)
86416:void ipc_test_cmd(char *buf,int len,int argc,char **argv)
86440:void ips_test_cmd(char *buf,int len,int argc,char **argv)
86464:int network_netutils_iperf_cli_register(void)
86473:void cmd_netstat(char *buf,int len,int argc,char **argv)
86483:int network_netutils_netstat_cli_register(void)
86492:void ping_usage(void)
86502:void ping_free(void *arg)
86527:void ping_timeout(void *arg)
86614:u8_t ping_recv(void *arg,raw_pcb *pcb,pbuf *p,ip_addr_t *addr)
86679:ping_var * ping_api_init(u16_t interval,u16_t size,u32_t count,u16_t timeout,ip_addr_t *dest)
86731:void ping_cmd(char *buf,int len,int argc,char **argv)
86813:int network_netutils_ping_cli_register(void)
86822:int dirent_type(void *addr)
86845:uint32_t dirent_hardfh(void *addr)
86858:uint32_t dirent_childaddr(void *addr)
86870:uint32_t dirent_size(void *addr)
86882:int romfs_close(file_t *fp)
86893:int romfs_ioctl(file_t *fp,int cmd,ulong arg)
86917:ssize_t romfs_read(file_t *fp,char *buf,size_t length)
86950:int file_info(char *path,char **p_addr_start_input,char **p_addr_end_input)
87044:int romfs_closedir(file_t *fp,aos_dir_t *dir)
87058:off_t romfs_lseek(file_t *fp,off_t off,int whence)
87110:aos_dirent_t * romfs_readdir(file_t *fp,aos_dir_t *dir)
87177:uint32_t dirent_file(char *path,void **p_addr_start_input,void **p_addr_end_input)
87311:aos_dir_t * romfs_opendir(file_t *fp,char *path)
87365:int romfs_stat(file_t *fp,char *path,stat *st)
87429:int romfs_open(file_t *fp,char *path,int flags)
87548:int romfs_register(void)
87612:void _startup_sntp(void *arg)
87628:void cmd_sntp_date(char *buf,int len,int argc,char **argv)
87656:void cmd_sntp_time(char *buf,int len,int argc,char **argv)
87673:void cmd_sntp_start(char *buf,int len,int argc,char **argv)
87683:int sntp_cli_init(void)
87692:void sntp_retry(void *arg)
87708:void sntp_recv(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *addr,u16_t port)
87780:void sntp_send_request(ip_addr_t *server_addr)
87807:void sntp_request(void *arg)
87838:void sntp_dns_found(char *hostname,ip_addr_t *ipaddr,void *arg)
87854:void sntp_init(void)
87887:void sntp_setoperatingmode(u8_t operating_mode)
87897:int sntp_get_time(uint32_t *seconds,uint32_t *frags)
87923:void sntp_setservername(u8_t idx,char *server)
87937:char * utils_bin2hex(char *dst,void *src,size_t count)
87959:void utils_sha256_init(iot_sha256_context *ctx)
87969:void utils_sha256_free(iot_sha256_context *ctx)
87987:void utils_sha256_starts(iot_sha256_context *ctx)
88007:void utils_sha256_process(iot_sha256_context *ctx,uchar *data)
88234:void utils_sha256_update(iot_sha256_context *ctx,uchar *input,uint32_t ilen)
88273:void utils_sha256_update(iot_sha256_context *ctx,uchar *input,uint32_t ilen)
88289:void utils_sha256_finish(iot_sha256_context *ctx,uint8_t *output)
88356:void bl_printk(char *format,...)
88391:int log_buf_out(char *file,int line,void *inbuf,int len,LOG_BUF_OUT_DATA_TYPE_T type)
88503:int utils_dns_domain_get(uint8_t *records,uint8_t *buf,int *len)
88537:void utils_list_init(utils_list *list)
88548:void utils_list_push_back(utils_list *list,utils_list_hdr *list_hdr)
88565:utils_list_hdr * utils_list_pop_front(utils_list *list)
88580:void utils_hexdump(void *mem,uint len)
88630:undefined4 utils_time_date_from_epoch(uint param_1,undefined *param_2)
88691:int utils_getopt_init(getopt_env_t *env,int opterr)
88709:int utils_getopt(getopt_env_t *env,int argc,char **argv,char *optstring)
88820:void Bl_F_fast(uchar *digest,uchar *digest1,char *password,uchar *ssid,int ssidlength,int count,
88868:int utils_wifi_psk_cal_fast_bin(char *password,uchar *ssid,int ssidlength,uchar *output)
88898:int utils_memp_init(utils_memp_pool_t **pool,uint16_t node_size,uint16_t pool_cap,uint8_t align_req)
88949:int utils_memp_deinit(utils_memp_pool_t *pool)
88963:void * utils_memp_malloc(utils_memp_pool_t *pool)
88987:int utils_memp_free(utils_memp_pool_t *pool,void *node)
89011:int utils_tlv_bl_pack_auto(uint32_t *buf,int buf_sz,uint16_t type,void *arg1)
89041:int utils_tlv_bl_unpack_auto(uint32_t *buf,int buf_sz,uint16_t type,void *arg1)
89081:void utils_hmac_sha1_fast
89143:int vfs_init(void)
89164:int aos_open(char *path,int flags)
89224:int aos_close(int fd)
89255:ssize_t aos_read(int fd,void *buf,size_t nbytes)
89283:ssize_t aos_write(int fd,void *buf,size_t nbytes)
89311:int aos_ioctl(int fd,int cmd,ulong arg)
89349:off_t aos_lseek(int fd,off_t offset,int whence)
89379:int aos_stat(char *path,stat *st)
89424:aos_dir_t * aos_opendir(char *path)
89465:int aos_closedir(aos_dir_t *dir)
89499:aos_dirent_t * aos_readdir(aos_dir_t *dir)
89529:file_t * new_file(inode_t *node)
89555:void del_file(file_t *file)
89566:int get_fd(file_t *file)
89575:file_t * get_file(int fd)
89596:int inode_init(void)
89606:int inode_alloc(void)
89628:inode_t * inode_open(char *path)
89658:int inode_forearch_name(anon_subr_int_void_ptr_inode_t_ptr *cb,void *arg)
89684:void inode_ref(inode_t *node)
89694:void inode_unref(inode_t *node)
89706:int inode_reserve(char *path,inode_t **inode)
89742:int aos_register_driver(char *path,file_ops_t *ops,void *arg)
89775:int aos_register_fs(char *path,fs_ops_t *ops,void *arg)
89808:int vfs_uart_open(inode_t *inode,file_t *fp)
89845:void __uart_rx_irq(void *p_arg)
89874:void __uart_tx_irq(void *p_arg)
89902:int vfs_uart_close(file_t *fp)
89932:ssize_t vfs_uart_read(file_t *fp,void *buf,size_t nbytes)
89964:ssize_t vfs_uart_write(file_t *fp,void *buf,size_t nbytes)
89986:int vfs_uart_poll(file_t *fp,_Bool setup,poll_notify_t *notify,pollfd *fd,void *opa)
90021:int vfs_uart_sync(file_t *fp)
90049:int uart_ioctl_cmd_waimode(uart_dev_t *uart_dev,int cmd,ulong arg)
90083:int uart_ioctl_cmd_setconfig(uart_dev_t *uart_dev,ulong arg)
90103:int vfs_uart_ioctl(file_t *fp,int cmd,ulong arg)
90148:yloop_ctx_t * get_context(void)
90164:void aos_loop_set_eventfd(int fd)
90177:aos_loop_t aos_loop_init(void)
90213:int aos_poll_read_fd(int sock,aos_poll_call_t *cb,void *private_data)
90264:int aos_post_delayed_action(int ms,aos_call_t *action,void *param)
90311:void aos_loop_run(yloop_sock_t *param_1)
90396:void vfs_poll_notify(pollfd *fd,void *arg)
90406:int aos_poll(pollfd *fds,int nfds,int timeout)
90454:check_poll:
90493:int aos_fcntl(int fd,int cmd,int val)
90508:void dfl_entry(void *arg)
90525:int aos_task_new(char *name,anon_subr_void_void_ptr *fn,void *arg,int stack_size)
90563:void aos_task_exit(int code)
90573:int aos_task_key_create(aos_task_key_t *key)
90622:int aos_task_setspecific(aos_task_key_t key,void *vp)
90645:void * aos_task_getspecific(aos_task_key_t key)
90667:int aos_mutex_new(aos_mutex_t *mutex)
90680:void aos_mutex_free(aos_mutex_t *mutex)
90690:int aos_mutex_lock(aos_mutex_t *mutex,uint ms)
90704:int aos_mutex_unlock(aos_mutex_t *mutex)
90718:int aos_sem_new(aos_sem_t *sem,int count)
90731:void aos_sem_free(aos_sem_t *sem)
90745:int aos_sem_wait(aos_sem_t *sem,uint ms)
90761:void aos_sem_signal(aos_sem_t *sem)
90785:void * aos_malloc(size_t xWantedSize)
90850:void aos_free(void *pv)
90892:longlong aos_now_ms(void)
90915:int event_poll(file_t *f,_Bool setup,poll_notify_t *notify,pollfd *fd,void *opa)
90943:int event_open(inode_t *node,file_t *file)
90962:ssize_t _event_write(void *buf,size_t len,_Bool urgent)
91012:out:
91020:int event_ioctl(file_t *f,int cmd,ulong arg)
91036:ssize_t event_write(file_t *f,void *buf,size_t len)
91048:int event_close(file_t *file)
91081:ssize_t event_read(file_t *f,void *buf,size_t len)
91126:int vfs_device_init(void)
91144:void event_read_cb(int fd,void *param)
91175:int aos_event_service_init(void)
91194:int aos_post_event(uint16_t type,uint16_t code,ulong value)
91215:int aos_register_event_filter(uint16_t type,aos_event_cb *cb,void *priv)
91243:IoT_Error_t aws_iot_shadow_init(AWS_IoT_Client *pClient,ShadowInitParameters_t *pParams)
91278:IoT_Error_t aws_iot_shadow_connect(AWS_IoT_Client *pClient,ShadowConnectParameters_t *pParams)
91322:IoT_Error_t aws_iot_shadow_register_delta(AWS_IoT_Client *pMqttClient,jsonStruct_t *pStruct)
91345:IoT_Error_t aws_iot_shadow_yield(AWS_IoT_Client *pClient,uint32_t timeout)
91362:IoT_Error_t aws_iot_shadow_disconnect(AWS_IoT_Client *pClient)
91401:IoT_Error_t
91402:aws_iot_shadow_update
91432:IoT_Error_t aws_iot_shadow_set_autoreconnect_status(AWS_IoT_Client *pClient,_Bool newStatus)
91446:IoT_Error_t
91447:aws_iot_shadow_internal_action
91506:IoT_Error_t
91507:convertDataToString(char *pStringBuffer,size_t maxSizoStringBuffer,JsonPrimitiveType type,
91613:void resetClientTokenSequenceNum(void)
91623:IoT_Error_t aws_iot_shadow_init_json_document(char *pJsonDocument,size_t maxSizeOfJsonDocument)
91644:IoT_Error_t
91645:aws_iot_shadow_add_reported(char *pJsonDocument,size_t maxSizeOfJsonDocument,uint8_t count,...)
91729:int32_t FillWithClientTokenSize
91743:IoT_Error_t aws_iot_finalize_json_document(char *pJsonDocument,size_t maxSizeOfJsonDocument)
91795:_Bool isJsonValidAndParse(char *pJsonDocument,size_t jsonSize,void *pJsonHandler,
91815:_Bool isJsonKeyMatchingAndUpdateValue
91928:_Bool extractClientToken(char *pJsonDocument,size_t jsonSize,char *pExtractedClientToken,
91962:_Bool extractVersionNumber
91992:void shadow_delta_callback
92047:int16_t findIndexOfSubscriptionList(char *pTopic)
92072:void topicNameFromThingAndAction
92120:void unsubscribeFromAcceptedAndRejected(uint8_t index)
92186:void AckStatusCallback(AWS_IoT_Client *pClient,char *topicName,uint16_t topicNameLen,
92256:void initDeltaTokens(void)
92274:IoT_Error_t registerJsonTokenOnDelta(jsonStruct_t *pStruct)
92309:void initializeRecords(AWS_IoT_Client *pClient)
92334:_Bool isSubscriptionPresent(char *pThingName,ShadowActions_t action)
92374:IoT_Error_t subscribeToShadowActionAcks(char *pThingName,ShadowActions_t action,_Bool isSticky)
92479:void incrementSubscriptionCnt(char *pThingName,ShadowActions_t action,_Bool isSticky)
92508:IoT_Error_t
92509:publishToShadowAction(char *pThingName,ShadowActions_t action,char *pJsonDocumentToBeSent)
92542:_Bool getNextFreeIndexOfAckWaitList(uint8_t *pIndex)
92569:void addToAckWaitList(uint8_t indexAckWaitList,char *pThingName,ShadowActions_t action,
92592:void HandleExpiredResponseCallbacks(void)
92621:_Bool has_timer_expired(Timer *timer)
92641:void countdown_ms(Timer *timer,uint32_t timeout)
92656:uint32_t left_ms(Timer *timer)
92675:void countdown_sec(Timer *timer,uint32_t timeout)
92689:void init_timer(Timer *timer)
92701:int jsmn_parse(jsmn_parser *parser,char *js,size_t len,jsmntok_t *tokens,uint num_tokens)
92910:found:
92954:void jsmn_init(jsmn_parser *parser)
92966:int8_t jsoneq(char *json,jsmntok_t *tok,char *s)
92991:IoT_Error_t parseUnsignedInteger32Value(uint32_t *i,char *jsonString,jsmntok_t *token)
93014:IoT_Error_t parseUnsignedInteger16Value(uint16_t *i,char *jsonString,jsmntok_t *token)
93037:IoT_Error_t parseUnsignedInteger8Value(uint8_t *i,char *jsonString,jsmntok_t *token)
93065:IoT_Error_t parseInteger32Value(int32_t *i,char *jsonString,jsmntok_t *token)
93086:IoT_Error_t parseInteger16Value(int16_t *i,char *jsonString,jsmntok_t *token)
93112:IoT_Error_t parseInteger8Value(int8_t *i,char *jsonString,jsmntok_t *token)
93138:IoT_Error_t parseFloatValue(float *f,char *jsonString,jsmntok_t *token)
93159:IoT_Error_t parseDoubleValue(double *d,char *jsonString,jsmntok_t *token)
93180:IoT_Error_t parseBooleanValue(_Bool *b,char *jsonString,jsmntok_t *token)
93208:IoT_Error_t parseStringValue(char *buf,size_t bufLen,char *jsonString,jsmntok_t *token)
93232:ClientState aws_iot_mqtt_get_client_state(AWS_IoT_Client *pClient)
93245:IoT_Error_t aws_iot_mqtt_client_lock_mutex(AWS_IoT_Client *pClient,IoT_Mutex_t *pMutex)
93266:IoT_Error_t aws_iot_mqtt_client_unlock_mutex(AWS_IoT_Client *pClient,IoT_Mutex_t *pMutex)
93282:IoT_Error_t
93283:aws_iot_mqtt_set_client_state
93321:IoT_Error_t
93322:aws_iot_mqtt_set_connect_params
93367:IoT_Error_t aws_iot_mqtt_init(AWS_IoT_Client *pClient,IoT_Client_Init_Params *pInitParams)
93461:uint16_t aws_iot_mqtt_get_next_packet_id(AWS_IoT_Client *pClient)
93480:_Bool aws_iot_mqtt_is_client_connected(AWS_IoT_Client *pClient)
93493:IoT_Error_t aws_iot_mqtt_autoreconnect_set_status(AWS_IoT_Client *pClient,_Bool newStatus)
93507:IoT_Error_t aws_iot_mqtt_connect(AWS_IoT_Client *pClient,IoT_Client_Connect_Params *pConnectParams)
93716:IoT_Error_t _aws_iot_mqtt_internal_disconnect(AWS_IoT_Client *pClient)
93748:IoT_Error_t aws_iot_mqtt_disconnect(AWS_IoT_Client *pClient)
93787:IoT_Error_t aws_iot_mqtt_attempt_reconnect(AWS_IoT_Client *pClient)
93828:IoT_Error_t
93829:aws_iot_mqtt_internal_serialize_ack
93867:IoT_Error_t
93868:aws_iot_mqtt_internal_deserialize_publish
93937:IoT_Error_t
93938:aws_iot_mqtt_internal_deserialize_ack
93984:IoT_Error_t
93985:aws_iot_mqtt_publish
94107:IoT_Error_t
94108:_aws_iot_mqtt_deserialize_suback
94165:IoT_Error_t
94166:_aws_iot_mqtt_serialize_subscribe
94208:IoT_Error_t
94209:aws_iot_mqtt_subscribe
94325:IoT_Error_t aws_iot_mqtt_resubscribe(AWS_IoT_Client *pClient)
94432:IoT_Error_t
94433:aws_iot_mqtt_unsubscribe(AWS_IoT_Client *pClient,char *pTopicFilter,uint16_t topicFilterLen)
94550:IoT_Error_t _aws_iot_mqtt_handle_disconnect(AWS_IoT_Client *pClient)
94576:IoT_Error_t aws_iot_mqtt_yield(AWS_IoT_Client *pClient,uint32_t timeout_ms)
94755:IoT_Error_t iot_tls_is_connected(Network *pNetwork)
94766:IoT_Error_t iot_tls_connect(Network *pNetwork,TLSConnectParams *params)
95011:int _iot_tls_verify_cert(void *data,mbedtls_x509_crt *crt,int depth,uint32_t *flags)
95032:IoT_Error_t iot_tls_write(Network *pNetwork,uchar *pMsg,size_t len,Timer *timer,size_t *written_len)
95072:IoT_Error_t iot_tls_read(Network *pNetwork,uchar *pMsg,size_t len,Timer *timer,size_t *read_len)
95132:IoT_Error_t iot_tls_disconnect(Network *pNetwork)
95146:IoT_Error_t iot_tls_destroy(Network *pNetwork)
95163:IoT_Error_t
95164:iot_tls_init(Network *pNetwork,char *pRootCALocation,char *pDeviceCertLocation,
95189:IoT_Error_t aws_iot_thread_mutex_init(IoT_Mutex_t *pMutex)
95209:IoT_Error_t aws_iot_thread_mutex_lock(IoT_Mutex_t *pMutex)
95219:IoT_Error_t aws_iot_thread_mutex_trylock(IoT_Mutex_t *pMutex)
95238:IoT_Error_t aws_iot_thread_mutex_unlock(IoT_Mutex_t *pMutex)
95257:IoT_Error_t aws_iot_thread_mutex_destroy(IoT_Mutex_t *pMutex)
95269:IoT_Error_t
95270:_aws_iot_mqtt_internal_readWrapper
95301:size_t aws_iot_mqtt_internal_write_len_to_buffer(uchar *buf,uint32_t length)
95327:IoT_Error_t
95328:aws_iot_mqtt_internal_decode_remaining_length_from_buffer
95360:uint32_t aws_iot_mqtt_internal_get_final_packet_length_from_remaining_length(uint32_t rem_len)
95385:uint16_t aws_iot_mqtt_internal_read_uint16_t(uchar **pptr)
95402:void aws_iot_mqtt_internal_write_uint_16(uchar **pptr,uint16_t anInt)
95418:uchar aws_iot_mqtt_internal_read_char(uchar **pptr)
95431:void aws_iot_mqtt_internal_write_char(uchar **pptr,uchar c)
95442:void aws_iot_mqtt_internal_write_utf8_string(uchar **pptr,char *string,uint16_t stringLen)
95460:IoT_Error_t
95461:aws_iot_mqtt_internal_init_header
95492:IoT_Error_t aws_iot_mqtt_internal_send_packet(AWS_IoT_Client *pClient,size_t length,Timer *pTimer)
95538:IoT_Error_t
95539:aws_iot_mqtt_internal_cycle_read(AWS_IoT_Client *pClient,Timer *pTimer,uint8_t *pPacketType)
95771:IoT_Error_t aws_iot_mqtt_internal_flushBuffers(AWS_IoT_Client *pClient)
95783:IoT_Error_t
95784:aws_iot_mqtt_internal_wait_for_read(AWS_IoT_Client *pClient,uint8_t packetType,Timer *pTimer)
95823:IoT_Error_t
95824:aws_iot_mqtt_internal_serialize_zero
95855:size_t format_int(char *q,size_t n,uint flags,int base,int width,int prec)
96017:char * cvt(int ndigits,int *decpt,int *sign,char *buf,int eflag)
96134:char * ecvtbuf(int ndigits,int *decpt,int *sign,char *buf)
96147:char * fcvtbuf(int ndigits,int *decpt,int *sign,char *buf)
96160:char * flt(char *str,int size,int precision,char fmt,int flags)
96455:int vsnprintf(char *buffer,size_t n,char *format,va_list ap)
96490:switchD_23051c14_caseD_5:
96697:is_string:
96780:is_integer:
96811:int vsprintf(char *buffer,char *format,va_list ap)
96823:void vprint(char *fmt,va_list argp)
96848:int bl_putchar(int c)
96858:int puts(char *s)
96877:int printf(char *fmt,...)
96912:int sprintf(char *buffer,char *format,...)
96943:int snprintf(char *buffer,size_t n,char *format,...)
96971:int sscanf(char *str,char *format,...)
97002:void set_bit(ulong *bitmap,uint bit)
97012:int vsscanf(char *buffer,char *format,va_list ap)
97051:switchD_23052248_caseD_7:
97144:set_integer:
97188:scan_int:
97335:match_run:
97390:uintmax_t strntoumax(char *nptr,char **endptr,int base,size_t n)
97457:joined_r0x23052722:
97467:BL_Err_Type UART_Init(UART_ID_Type uartId,UART_CFG_Type *uartCfg)
97534:BL_Err_Type UART_FifoConfig(UART_ID_Type uartId,UART_FifoCfg_Type *fifoCfg)
97561:BL_Err_Type UART_Enable(UART_ID_Type uartId,UART_Direction_Type direct)
97580:BL_Err_Type UART_Disable(UART_ID_Type uartId,UART_Direction_Type direct)
97599:BL_Err_Type UART_SetRxTimeoutValue(UART_ID_Type uartId,uint8_t time)
97614:BL_Err_Type UART_TxFreeRun(UART_ID_Type uartId,BL_Fun_Type txFreeRun)
97635:BL_Err_Type UART_IntMask(UART_ID_Type uartId,UART_INT_Type intType,BL_Mask_Type intMask)
97667:uint8_t UART_GetTxFifoCount(UART_ID_Type uartId)
97679:BL_Err_Type UART_SendData(UART_ID_Type uartId,uint8_t *data,uint32_t len)
97714:uint8_t UART_GetRxFifoCount(UART_ID_Type uartId)
97729:void ADC_Reset(void)
97741:void ADC_Enable(void)
97753:void ADC_Disable(void)
97765:void ADC_Channel_Config(ADC_Chan_Type posCh,ADC_Chan_Type negCh,BL_Fun_Type contEn)
97785:void ADC_Start(void)
97799:void ADC_FIFO_Cfg(ADC_FIFO_Cfg_Type *fifoCfg)
97812:uint8_t ADC_Get_FIFO_Count(void)
97823:void ADC_Parse_Result(uint32_t *orgVal,uint32_t len,ADC_Result_Type *result)
97931:void ADC_Tsen_Init(ADC_TSEN_MOD_Type tsenMod)
97949:void ADC_SET_TSVBE_LOW(void)
97961:void ADC_SET_TSVBE_HIGH(void)
97974:uint32_t TSEN_Get_V_Error(void)
98018:float TSEN_Get_Temp(uint32_t tsen_offset)
98066:void ADC_Init(ADC_CFG_Type *cfg)
98101:void Sec_Eng_PKA_Write_Common_OP_First_Cfg
98124:BL_Err_Type Sec_Eng_PKA_Wait_ISR(void)
98145:BL_Err_Type Sec_Eng_SHA256_Update(SEC_Eng_SHA256_Ctx *shaCtx,uint8_t *input,uint32_t len)
98213:void Sec_Eng_SHA256_Init(SEC_Eng_SHA256_Ctx *shaCtx,SEC_ENG_SHA_ID_Type shaNo,
98234:void Sec_Eng_SHA_Start(SEC_ENG_SHA_ID_Type shaNo)
98244:BL_Err_Type
98245:Sec_Eng_SHA256_Update
98265:BL_Err_Type
98266:Sec_Eng_SHA256_Finish(SEC_Eng_SHA256_Ctx *shaCtx,SEC_ENG_SHA_ID_Type shaNo,uint8_t *hash)
98370:void Sec_Eng_SHA_Enable_Link(SEC_ENG_SHA_ID_Type shaNo)
98382:void Sec_Eng_SHA_Disable_Link(SEC_ENG_SHA_ID_Type shaNo)
98392:void Sec_Eng_SHA256_Link_Init
98411:BL_Err_Type
98412:Sec_Eng_SHA256_Link_Update
98483:BL_Err_Type
98484:Sec_Eng_SHA256_Link_Finish(SEC_Eng_SHA256_Link_Ctx *shaCtx,SEC_ENG_SHA_ID_Type shaNo,uint8_t *hash)
98558:void Sec_Eng_AES_Enable_Link(SEC_ENG_AES_ID_Type aesNo)
98570:void Sec_Eng_AES_Disable_Link(SEC_ENG_AES_ID_Type aesNo)
98582:BL_Err_Type
98583:Sec_Eng_AES_Link_Work
98624:void Sec_Eng_PKA_Reset(void)
98636:void Sec_Eng_PKA_BigEndian_Enable(void)
98648:void Sec_Eng_PKA_Clear_Int(void)
98658:void Sec_Eng_PKA_Read_Block(uint32_t *dest,uint32_t *src,uint32_t len)
98674:void Sec_Eng_PKA_Write_Block(uint32_t *dest,uint32_t *src,uint32_t len)
98694:void Sec_Eng_PKA_Write_Data
98730:void Sec_Eng_PKA_Read_Data
98766:void Sec_Eng_PKA_CREG(SEC_ENG_PKA_REG_SIZE_Type dRegType,uint8_t dRegIdx,uint8_t size,uint8_t lastOp
98788:void Sec_Eng_PKA_Move_Data
98811:void Sec_Eng_PKA_MREM(uint8_t dRegType,uint8_t dRegIdx,uint8_t s0RegType,uint8_t s0RegIdx,
98834:void Sec_Eng_PKA_MEXP(uint8_t dRegType,uint8_t dRegIdx,uint8_t s0RegType,uint8_t s0RegIdx,
98861:void Sec_Eng_PKA_LCMP(uint8_t *cout,uint8_t s0RegType,uint8_t s0RegIdx,uint8_t s1RegType,
98879:void Sec_Eng_PKA_LSUB(uint8_t dRegType,uint8_t dRegIdx,uint8_t s0RegType,uint8_t s0RegIdx,
98902:void Sec_Eng_PKA_LMUL(uint8_t dRegType,uint8_t dRegIdx,uint8_t s0RegType,uint8_t s0RegIdx,
98925:void Sec_Eng_PKA_LDIV(uint8_t dRegType,uint8_t dRegIdx,uint8_t s0RegType,uint8_t s0RegIdx,
98948:void Sec_Eng_PKA_LMUL2N(uint8_t dRegType,uint8_t dRegIdx,uint8_t s0RegType,uint8_t s0RegIdx,
98970:void SEC_Eng_IntMask(SEC_ENG_INT_Type intType,BL_Mask_Type intMask)
99048:void DMA_Enable(void)
99058:void DMA_Channel_Enable(uint8_t ch)
99072:void DMA_LLI_Init(uint8_t ch,DMA_LLI_Cfg_Type *lliCfg)
99087:void DMA_LLI_Update(uint8_t ch,uint32_t LLI)
99101:void DMA_IntMask(uint8_t ch,DMA_INT_Type intType,BL_Mask_Type intMask)
99165:void Default_Handler(void)
99177:BL_Err_Type GLB_Set_UART_CLK(uint8_t enable,HBN_UART_CLK_Type clkSel,uint8_t div)
99199:BL_Err_Type GLB_Set_ADC_CLK(uint8_t enable,GLB_ADC_CLK_Type clkSel,uint8_t div)
99221:BL_Err_Type GLB_UART_Fun_Sel(GLB_UART_SIG_Type sig,GLB_UART_SIG_FUN_Type fun)
99235:BL_Err_Type GLB_GPIO_Write(GLB_GPIO_Type gpioPin,uint32_t val)
99259:uint32_t GLB_GPIO_Read(GLB_GPIO_Type gpioPin)
99273:BL_Err_Type HBN_Set_UART_CLK_Sel(HBN_UART_CLK_Type clkSel)
99287:BL_Err_Type HBN_Get_RTC_Timer_Val(uint32_t *valLow,uint32_t *valHigh)
99299:void TIMER_SetCompValue(TIMER_Chan_Type timerCh,TIMER_Comp_ID_Type cmpNo,uint32_t val)
99316:void TIMER_SetCountMode(TIMER_Chan_Type timerCh,TIMER_CountMode_Type countMode)
99330:void TIMER_ClearIntStatus(TIMER_Chan_Type timerCh,TIMER_Comp_ID_Type cmpNo)
99346:BL_Err_Type TIMER_Init(TIMER_CFG_Type *timerCfg)
99390:void TIMER_Enable(TIMER_Chan_Type timerCh)
99402:void TIMER_Disable(TIMER_Chan_Type timerCh)
99412:void TIMER_IntMask(TIMER_Chan_Type timerCh,TIMER_INT_Type intType,BL_Mask_Type intMask)
99474:void WDT_Set_Clock(TIMER_ClkSrc_Type clkSrc,uint8_t div)
99489:void WDT_SetCompValue(uint16_t val)
99505:void WDT_ResetCounterValue(void)
99518:void WDT_Enable(void)
99532:void WDT_Disable(void)
99545:void WDT_IntMask(WDT_INT_Type intType,BL_Mask_Type intMask)
99567:uint32_t EF_Ctrl_Get_Byte_Zero_Cnt(uint8_t val)
99590:BL_Err_Type EF_Ctrl_Read_MAC_Address(uint8_t *mac)
99643:uint8_t EF_Ctrl_Is_MAC_Address_Slot_Empty(uint8_t slot,uint8_t reload)
99703:BL_Err_Type EF_Ctrl_Read_MAC_Address_Opt(uint8_t slot,uint8_t *mac,uint8_t reload)
99778:uint8_t EF_Ctrl_Is_CapCode_Slot_Empty(uint8_t slot,uint8_t reload)
99811:BL_Err_Type EF_Ctrl_Read_CapCode_Opt(uint8_t slot,uint8_t *code,uint8_t reload)
99860:uint8_t EF_Ctrl_Is_PowerOffset_Slot_Empty(uint8_t slot,uint8_t reload)
99906:BL_Err_Type EF_Ctrl_Read_PowerOffset_Opt(uint8_t slot,int8_t *pwrOffset,uint8_t reload)
99970:int8_t mfg_media_read_xtal_capcode(uint8_t *capcode,uint8_t reload)
99987:int8_t mfg_media_read_poweroffset(int8_t *pwrOffset,uint8_t reload)
100004:int8_t mfg_media_read_macaddr(uint8_t *mac,uint8_t reload)
100021:void bflb_platform_usart_dbg_send(uint8_t *data,uint32_t len)
100031:void bflb_platform_printf(char *fmt,...)
100069:undefined8 Default_Handler_Stub(undefined4 param_1)
100081:int8_t mfg_efuse_read_xtal_capcode(uint8_t *capcode,uint8_t reload)
100128:int8_t mfg_efuse_read_poweroffset(int8_t *pwrOffset,uint8_t reload)
100200:int8_t mfg_efuse_read_macaddr(uint8_t *mac,uint8_t reload)
100249:int8_t mfg_flash_read(void)
100269:int8_t mfg_flash_read_xtal_capcode(uint8_t *capcode,uint8_t reload)
100295:int8_t mfg_flash_read_poweroffset(int8_t *pwrOffset,uint8_t reload)
100348:int8_t mfg_flash_read_macaddr(uint8_t *mac,uint8_t reload)
100377:void Bl_F(uchar *digest,uchar *digest1,char *password,uchar *ssid,int ssidlength,int iterations,
100423:int Bl_PasswordHash(char *password,uchar *ssid,int ssidlength,uchar *output)
100451:int bl60x_fw_password_hash(char *password,uchar *ssid,int ssidlength,uchar *output)
100478:int bl_mtd_open(char *name,bl_mtd_handle_t *handle,uint flags)
100562:int bl_mtd_close(bl_mtd_handle_t handle)
100572:int bl_mtd_info(bl_mtd_handle_t handle,bl_mtd_info_t *info)
100585:int bl_mtd_erase(bl_mtd_handle_t handle,uint addr,uint size)
100595:int bl_mtd_erase_all(bl_mtd_handle_t handle)
100605:int bl_mtd_write(bl_mtd_handle_t handle,uint addr,uint size,uint8_t *data)
100647:int bl_mtd_read(bl_mtd_handle_t handle,uint addr,uint size,uint8_t *data)
100657:int bloop_init(loop_ctx *loop)
100681:int bloop_handler_register(loop_ctx *loop,loop_evt_handler *handler,int priority)
100695:void bloop_timer_init(loop_timer *timer,int use_auto_free)
100708:void bloop_timer_configure
100729:void bloop_timer_repeat_enable(loop_timer *timer)
100739:void bloop_timer_repeat_reconfigure(loop_timer *timer)
100757:void bloop_timer_register(loop_ctx *loop,loop_timer *timer)
100808:void bloop_wait_startup(loop_ctx *loop)
100820:void bloop_evt_set_async(loop_ctx *loop,uint evt,uint32_t evt_map)
100840:void bloop_evt_set_sync(loop_ctx *loop,uint evt,uint32_t evt_map)
100857:void bloop_evt_unset_sync(loop_ctx *loop,uint evt)
100873:int bloop_run(loop_ctx *loop)
101038:int bloop_status_dump(loop_ctx *loop)
101095:int loop_evt_entity_sys_handler(loop_ctx *loop,loop_evt_handler *handler,loop_msg *msg)
101108:int loop_evt_entity_sys_evt
101138:int * misaligned_load_trap(int *param_1,uint *param_2)
101199:code_r0x230559ca:
101244:uint misaligned_store_trap(int *param_1,uint *param_2)
101299:code_r0x23055b28:
101338:void get_f32_reg(void)
101352:void put_f32_reg(void)
101366:int backtrace_riscv(anon_subr_int_char_ptr_varargs *print_func,uintptr_t *regs)
101377:void set_if(netif *netif,char *ip_addr,char *gw_addr,char *nm_addr)
101402:int block_cipher_df(uchar *output,uchar *data,size_t data_len)
101481:int ctr_drbg_update_internal(mbedtls_ctr_drbg_context *ctx,uchar *data)
101526:void mbedtls_ctr_drbg_init(mbedtls_ctr_drbg_context *ctx)
101536:void mbedtls_ctr_drbg_free(mbedtls_ctr_drbg_context *ctx)
101557:int mbedtls_ctr_drbg_reseed(mbedtls_ctr_drbg_context *ctx,uchar *additional,size_t len)
101589:int mbedtls_ctr_drbg_seed_entropy_len
101612:int mbedtls_ctr_drbg_seed
101628:int mbedtls_ctr_drbg_random_with_add
101689:int mbedtls_ctr_drbg_random(void *p_rng,uchar *output,size_t output_len)
101701:int entropy_update(mbedtls_entropy_context *ctx,uchar source_id,uchar *data,size_t len)
101724:int entropy_gather_internal(mbedtls_entropy_context *ctx)
101766:void mbedtls_entropy_init(mbedtls_entropy_context *ctx)
101789:void mbedtls_entropy_free(mbedtls_entropy_context *ctx)
101805:int mbedtls_entropy_func(void *data,uchar *output,size_t len)
101868:int mbedtls_platform_entropy_poll(void *data,uchar *output,size_t len,size_t *olen)
101892:void mbedtls_pk_init(mbedtls_pk_context *ctx)
101905:void mbedtls_pk_free(mbedtls_pk_context *ctx)
101928:mbedtls_pk_info_t * mbedtls_pk_info_from_type(mbedtls_pk_type_t pk_type)
101944:int mbedtls_pk_setup(mbedtls_pk_context *ctx,mbedtls_pk_info_t *info)
101970:int mbedtls_pk_can_do(mbedtls_pk_context *ctx,mbedtls_pk_type_t type)
101988:int mbedtls_pk_verify(mbedtls_pk_context *ctx,mbedtls_md_type_t md_alg,uchar *hash,size_t hash_len,
102031:int mbedtls_pk_sign(mbedtls_pk_context *ctx,mbedtls_md_type_t md_alg,uchar *hash,size_t hash_len,
102079:int mbedtls_pk_decrypt(mbedtls_pk_context *ctx,uchar *input,size_t ilen,uchar *output,size_t *olen,
102111:int mbedtls_pk_encrypt(mbedtls_pk_context *ctx,uchar *input,size_t ilen,uchar *output,size_t *olen,
102141:size_t mbedtls_pk_get_bitlen(mbedtls_pk_context *ctx)
102159:int mbedtls_pk_verify_ext
102215:int mbedtls_pk_debug(mbedtls_pk_context *ctx,mbedtls_pk_debug_item *items)
102236:char * mbedtls_pk_get_name(mbedtls_pk_context *ctx)
102249:mbedtls_pk_type_t mbedtls_pk_get_type(mbedtls_pk_context *ctx)
102262:int pk_use_ecparams(mbedtls_asn1_buf *params,mbedtls_ecp_group *grp)
102291:int pk_parse_key_pkcs1_der(mbedtls_rsa_context *rsa,uchar *key,size_t keylen)
102349:int pk_parse_key_sec1_der(mbedtls_ecp_keypair *eck,uchar *key,size_t keylen)
102462:int pk_get_pk_alg(uchar **p,uchar *end,mbedtls_pk_type_t *pk_alg,mbedtls_asn1_buf *params)
102492:int pk_parse_key_pkcs8_unencrypted_der(mbedtls_pk_context *pk,uchar *key,size_t keylen)
102561:int mbedtls_pk_load_file(char *path,uchar **buf,size_t *n)
102620:int mbedtls_pk_parse_subpubkey(uchar **p,uchar *end,mbedtls_pk_context *pk)
102722:int mbedtls_pk_parse_key(mbedtls_pk_context *pk,uchar *key,size_t keylen,uchar *pwd,size_t pwdlen)
102832:int mbedtls_pk_parse_keyfile(mbedtls_pk_context *ctx,char *path,char *pwd)
102869:int rsa_can_do(mbedtls_pk_type_t type)
102884:size_t rsa_get_bitlen(void *ctx)
102893:void rsa_debug(void *ctx,mbedtls_pk_debug_item *items)
102908:int eckey_can_do(mbedtls_pk_type_t type)
102919:size_t eckey_get_bitlen(void *ctx)
102928:void eckey_debug(void *ctx,mbedtls_pk_debug_item *items)
102940:int eckeydh_can_do(mbedtls_pk_type_t type)
102951:void rsa_free_wrap(void *ctx)
102962:void * rsa_alloc_wrap(void)
102977:int rsa_check_pair_wrap(mbedtls_rsa_context *pub,mbedtls_rsa_context *prv)
102994:int rsa_encrypt_wrap(void *ctx,uchar *input,size_t ilen,uchar *output,size_t *olen,size_t osize,
103014:int rsa_decrypt_wrap(void *ctx,uchar *input,size_t ilen,uchar *output,size_t *olen,size_t osize,
103032:int rsa_sign_wrap(void *ctx,mbedtls_md_type_t md_alg,uchar *hash,size_t hash_len,uchar *sig,
103046:int rsa_verify_wrap(void *ctx,mbedtls_md_type_t md_alg,uchar *hash,size_t hash_len,uchar *sig,
103068:void eckey_free_wrap(void *ctx)
103079:void * eckey_alloc_wrap(void)
103094:int eckey_check_pair(mbedtls_ecp_keypair *pub,mbedtls_ecp_keypair *prv)
103141:void mgf_mask(uchar *dst,size_t dlen,uchar *src,size_t slen,mbedtls_md_context_t *md_ctx)
103183:void mbedtls_rsa_init(mbedtls_rsa_context *ctx,int padding,int hash_id)
103195:int mbedtls_rsa_check_pubkey(mbedtls_rsa_context *ctx)
103226:int mbedtls_rsa_check_privkey(mbedtls_rsa_context *ctx)
103323:int mbedtls_rsa_check_pub_priv(mbedtls_rsa_context *pub,mbedtls_rsa_context *prv)
103339:int mbedtls_rsa_public(mbedtls_rsa_context *ctx,uchar *input,uchar *output)
103372:int mbedtls_rsa_private(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,
103468:cleanup:
103482:int mbedtls_rsa_rsaes_oaep_encrypt
103551:int mbedtls_rsa_rsaes_pkcs1_v15_encrypt
103615:int mbedtls_rsa_pkcs1_encrypt
103639:int mbedtls_rsa_rsaes_oaep_decrypt
103735:int mbedtls_rsa_rsaes_pkcs1_v15_decrypt
103813:int mbedtls_rsa_pkcs1_decrypt
103840:int mbedtls_rsa_rsassa_pss_sign
103924:int mbedtls_rsa_rsassa_pkcs1_v15_sign
104035:int mbedtls_rsa_pkcs1_sign
104058:int mbedtls_rsa_rsassa_pss_verify_ext
104167:int mbedtls_rsa_rsassa_pss_verify
104189:int mbedtls_rsa_rsassa_pkcs1_v15_verify
104280:int mbedtls_rsa_pkcs1_verify
104303:void mbedtls_rsa_free(mbedtls_rsa_context *ctx)
104325:void mbedtls_sha256_init(mbedtls_sha256_context *ctx)
104335:void mbedtls_sha256_free(mbedtls_sha256_context *ctx)
104353:void mbedtls_sha256_clone(mbedtls_sha256_context *dst,mbedtls_sha256_context *src)
104362:void mbedtls_sha256_starts(mbedtls_sha256_context *ctx,int is224)
104397:void mbedtls_sha256_process(mbedtls_sha256_context *ctx,uchar *data)
104623:void mbedtls_sha256_update(mbedtls_sha256_context *ctx,uchar *input,size_t ilen)
104662:void mbedtls_sha256_update(mbedtls_sha256_context *ctx,uchar *input,size_t ilen)
104676:void mbedtls_sha256_finish(mbedtls_sha256_context *ctx,uchar *output)
104744:void mbedtls_sha256(uchar *input,size_t ilen,uchar *output,int is224)
104761:mbedtls_x509_crt * mbedtls_ssl_own_cert(mbedtls_ssl_context *ssl)
104777:void mbedtls_zeroize(void *v,size_t n)
104793:void ssl_swap_epochs(mbedtls_ssl_context *ssl)
104825:void ssl_calc_finished_tls_sha256(mbedtls_ssl_context *ssl,uchar *buf,int from)
104863:void ssl_calc_verify_tls_sha256(mbedtls_ssl_context *ssl,uchar *hash)
104882:void ssl_flight_free(mbedtls_ssl_flight_item *flight)
104899:int ssl_append_key_cert(mbedtls_ssl_key_cert **head,mbedtls_x509_crt *cert,mbedtls_pk_context *key)
104934:void ssl_update_checksum_start(mbedtls_ssl_context *ssl,uchar *buf,size_t len)
104944:void ssl_update_checksum_sha256(mbedtls_ssl_context *ssl,uchar *buf,size_t len)
104954:size_t mbedtls_ssl_hdr_len(void)
104969:void ssl_set_timer(mbedtls_ssl_context *ssl,uint32_t millisecs)
104986:int ssl_check_timer(mbedtls_ssl_context *ssl)
105011:int tls_prf_sha256(uchar *secret,size_t slen,char *label,uchar *random,size_t rlen,uchar *dstbuf,
105085:int mbedtls_ssl_derive_keys(mbedtls_ssl_context *ssl)
105313:int mbedtls_ssl_flush_output(mbedtls_ssl_context *ssl)
105372:void mbedtls_ssl_recv_flight_completed(mbedtls_ssl_context *ssl)
105392:void mbedtls_ssl_send_flight_completed(mbedtls_ssl_context *ssl)
105415:void mbedtls_ssl_update_handshake_status(mbedtls_ssl_context *ssl)
105433:void mbedtls_ssl_optimize_checksum
105449:void mbedtls_ssl_reset_checksum(mbedtls_ssl_context *ssl)
105459:void mbedtls_ssl_session_init(mbedtls_ssl_session *session)
105469:void mbedtls_ssl_init(mbedtls_ssl_context *ssl)
105479:void mbedtls_ssl_conf_authmode(mbedtls_ssl_config *conf,int authmode)
105490:void mbedtls_ssl_conf_verify
105503:void mbedtls_ssl_conf_rng(mbedtls_ssl_config *conf,mbedtls_ssl_recv_t *f_rng,void *p_rng)
105514:void mbedtls_ssl_set_bio(mbedtls_ssl_context *ssl,void *p_bio,mbedtls_ssl_send_t *f_send,
105528:void mbedtls_ssl_conf_read_timeout(mbedtls_ssl_config *conf,uint32_t timeout)
105538:int mbedtls_ssl_conf_own_cert
105551:void mbedtls_ssl_conf_ca_chain
105563:int mbedtls_ssl_set_hostname(mbedtls_ssl_context *ssl,char *hostname)
105596:int mbedtls_ssl_conf_alpn_protocols(mbedtls_ssl_config *conf,char **protos)
105622:uint32_t mbedtls_ssl_get_verify_result(mbedtls_ssl_context *ssl)
105639:char * mbedtls_ssl_get_ciphersuite(mbedtls_ssl_context *ssl)
105655:char * mbedtls_ssl_get_version(mbedtls_ssl_context *ssl)
105683:int mbedtls_ssl_get_record_expansion(mbedtls_ssl_context *ssl)
105722:size_t mbedtls_ssl_get_max_frag_len(mbedtls_ssl_context *ssl)
105738:mbedtls_x509_crt * mbedtls_ssl_get_peer_cert(mbedtls_ssl_context *ssl)
105752:int mbedtls_ssl_handshake_step(mbedtls_ssl_context *ssl)
105779:int mbedtls_ssl_handshake(mbedtls_ssl_context *ssl)
105804:void mbedtls_ssl_transform_free(mbedtls_ssl_transform *transform)
105822:void mbedtls_ssl_handshake_free(mbedtls_ssl_handshake_params *handshake)
105849:void ssl_handshake_wrapup_free_hs_transform(mbedtls_ssl_context *ssl)
105872:void mbedtls_ssl_session_free(mbedtls_ssl_session *session)
105891:void mbedtls_ssl_handshake_wrapup(mbedtls_ssl_context *ssl)
105929:int ssl_handshake_init(mbedtls_ssl_context *ssl)
106007:int mbedtls_ssl_setup(mbedtls_ssl_context *ssl,mbedtls_ssl_config_conflict *conf)
106059:void mbedtls_ssl_free(mbedtls_ssl_context *ssl)
106108:void mbedtls_ssl_config_init(mbedtls_ssl_config *conf)
106118:int mbedtls_ssl_config_defaults(mbedtls_ssl_config *conf,int endpoint,int transport,int preset)
106167:void mbedtls_ssl_config_free(mbedtls_ssl_config *conf)
106186:uchar mbedtls_ssl_sig_from_pk(mbedtls_pk_context *pk)
106198:mbedtls_pk_type_t mbedtls_ssl_pk_alg_from_sig(uchar sig)
106209:mbedtls_md_type_t mbedtls_ssl_md_alg_from_hash(uchar hash)
106225:uchar mbedtls_ssl_hash_from_md_alg(int md)
106238:int mbedtls_ssl_check_curve(mbedtls_ssl_context *ssl,mbedtls_ecp_group_id grp_id)
106260:int mbedtls_ssl_check_cert_usage
106304:void mbedtls_ssl_write_version(int major,int minor,int transport,uchar *ver)
106326:int mbedtls_ssl_write_record(mbedtls_ssl_context *ssl)
106605:int mbedtls_ssl_resend(mbedtls_ssl_context *ssl)
106654:int mbedtls_ssl_fetch_input(mbedtls_ssl_context *ssl,size_t nb_want)
106810:int mbedtls_ssl_prepare_handshake_record(mbedtls_ssl_context *ssl)
107044:int mbedtls_ssl_handle_message_type(mbedtls_ssl_context *ssl)
107089:int mbedtls_ssl_send_alert_message(mbedtls_ssl_context *ssl,uchar level,uchar message)
107117:int mbedtls_ssl_send_fatal_handshake_failure(mbedtls_ssl_context *ssl)
107129:int mbedtls_ssl_close_notify(mbedtls_ssl_context *ssl)
107159:int mbedtls_ssl_write_certificate(mbedtls_ssl_context *ssl)
107233:int mbedtls_ssl_write_change_cipher_spec(mbedtls_ssl_context *ssl)
107256:int mbedtls_ssl_write_finished(mbedtls_ssl_context *ssl)
107321:int mbedtls_ssl_write(mbedtls_ssl_context *ssl,uchar *buf,size_t len)
107387:void mbedtls_ssl_read_version(int *major,int *minor,int transport,uchar *ver)
107410:int mbedtls_ssl_read_record_layer(mbedtls_ssl_context *ssl)
107834:int mbedtls_ssl_read_record(mbedtls_ssl_context *ssl)
107869:int mbedtls_ssl_parse_certificate(mbedtls_ssl_context *ssl)
108070:int mbedtls_ssl_parse_change_cipher_spec(mbedtls_ssl_context *ssl)
108126:int mbedtls_ssl_parse_finished(mbedtls_ssl_context *ssl)
108197:int mbedtls_ssl_read(mbedtls_ssl_context *ssl,uchar *buf,size_t len)
108304:int mbedtls_ssl_set_calc_verify_md(mbedtls_ssl_context *ssl,int md)
108318:void mbedtls_zeroize(void *v,size_t n)
108334:int x509_memcasecmp(void *s1,void *s2,size_t len)
108358:int x509_name_cmp(mbedtls_x509_name *a,mbedtls_x509_name *b)
108392:int x509_check_wildcard(char *cn,mbedtls_x509_buf *name)
108434:int x509_profile_check_key
108464:int mbedtls_x509_crt_info(char *buf,size_t size,char *prefix,mbedtls_x509_crt *crt)
108793:int mbedtls_x509_crt_verify_info(char *buf,size_t size,char *prefix,uint32_t flags)
108827:int mbedtls_x509_crt_check_key_usage(mbedtls_x509_crt *crt,uint usage)
108844:int x509_crt_check_parent(mbedtls_x509_crt *child,mbedtls_x509_crt *parent,int top,int bottom)
108873:int x509_crt_verify_top(mbedtls_x509_crt *child,mbedtls_x509_crt *trust_ca,
108983:int x509_crt_verify_child
109085:int mbedtls_x509_crt_check_extended_key_usage
109113:int mbedtls_x509_crt_verify_with_profile
109203:void mbedtls_x509_crt_init(mbedtls_x509_crt *crt)
109213:void mbedtls_x509_crt_free(mbedtls_x509_crt *crt)
109283:int mbedtls_x509_crt_parse_der(mbedtls_x509_crt *chain,uchar *buf,size_t buflen)
109718:int mbedtls_x509_crt_parse(mbedtls_x509_crt *chain,uchar *buf,size_t buflen)
109785:int mbedtls_x509_crt_parse_file(mbedtls_x509_crt *chain,char *path)
109805:int net_would_block(void)
109822:void mbedtls_net_init(mbedtls_net_context *ctx)
109832:int mbedtls_net_connect(mbedtls_net_context *ctx,char *host,char *port,int proto)
109871:_out:
109884:int mbedtls_net_set_block(mbedtls_net_context *ctx)
109898:int mbedtls_net_recv(void *ctx,uchar *buf,size_t len)
109933:int mbedtls_net_send(void *ctx,uchar *buf,size_t len)
109970:int mbedtls_net_recv_timeout(void *ctx,uchar *buf,size_t len,uint32_t timeout)
110020:void mbedtls_net_free(mbedtls_net_context *ctx)
110034:void * mycalloc(size_t numitems,size_t size)
110047:void aes_gen_tables(void)
110155:void mbedtls_aes_init(mbedtls_aes_context *ctx)
110165:void mbedtls_aes_free(mbedtls_aes_context *ctx)
110183:int mbedtls_aes_setkey_enc(mbedtls_aes_context *ctx,uchar *key,uint keybits)
110304:int mbedtls_aes_setkey_dec(mbedtls_aes_context *ctx,uchar *key,uint keybits)
110354:void mbedtls_aes_encrypt(mbedtls_aes_context *ctx,uchar *input,uchar *output)
110469:void mbedtls_aes_decrypt(mbedtls_aes_context *ctx,uchar *input,uchar *output)
110584:int mbedtls_aes_crypt_ecb(mbedtls_aes_context *ctx,int mode,uchar *input,uchar *output)
110598:int mbedtls_aes_crypt_cbc
110657:int mbedtls_aes_crypt_cfb128
110700:int mbedtls_aes_crypt_ctr
110738:int mbedtls_asn1_get_len(uchar **p,uchar *end,size_t *len)
110800:int mbedtls_asn1_get_tag(uchar **p,uchar *end,size_t *len,int tag)
110823:int mbedtls_asn1_get_bool(uchar **p,uchar *end,int *val)
110846:int mbedtls_asn1_get_int(uchar **p,uchar *end,int *val)
110873:int mbedtls_asn1_get_mpi(uchar **p,uchar *end,mbedtls_mpi *X)
110891:int mbedtls_asn1_get_bitstring(uchar **p,uchar *end,mbedtls_asn1_bitstring *bs)
110929:int mbedtls_asn1_get_bitstring_null(uchar **p,uchar *end,size_t *len)
110948:int mbedtls_asn1_get_sequence_of(uchar **p,uchar *end,mbedtls_asn1_sequence *cur,int tag)
110996:int mbedtls_asn1_get_alg(uchar **p,uchar *end,mbedtls_asn1_buf *alg,mbedtls_asn1_buf *params)
111052:void mpi_sub_hlp(size_t n,mbedtls_mpi_uint *s,mbedtls_mpi_uint *d)
111090:void mpi_mul_hlp(size_t i,mbedtls_mpi_uint *s,mbedtls_mpi_uint *d,mbedtls_mpi_uint b)
111320:void mbedtls_mpi_init(mbedtls_mpi *X)
111334:void mbedtls_mpi_free(mbedtls_mpi *X)
111362:int mbedtls_mpi_grow(mbedtls_mpi *X,size_t nblimbs)
111402:int mbedtls_mpi_shrink(mbedtls_mpi *X,size_t nblimbs)
111449:int mbedtls_mpi_copy(mbedtls_mpi *X,mbedtls_mpi *Y)
111483:int mbedtls_mpi_safe_cond_assign(mbedtls_mpi *X,mbedtls_mpi *Y,uchar assign)
111516:int mbedtls_mpi_lset(mbedtls_mpi *X,mbedtls_mpi_sint z)
111538:int mbedtls_mpi_get_bit(mbedtls_mpi *X,size_t pos)
111551:size_t mbedtls_mpi_lsb(mbedtls_mpi *X)
111580:size_t mbedtls_mpi_bitlen(mbedtls_mpi *X)
111610:size_t mbedtls_mpi_size(mbedtls_mpi *X)
111622:int mbedtls_mpi_read_binary(mbedtls_mpi *X,uchar *buf,size_t buflen)
111655:int mbedtls_mpi_write_binary(mbedtls_mpi *X,uchar *buf,size_t buflen)
111687:int mbedtls_mpi_shift_l(mbedtls_mpi *X,size_t count)
111733:int mbedtls_mpi_shift_r(mbedtls_mpi *X,size_t count)
111791:int mbedtls_mpi_cmp_abs(mbedtls_mpi *X,mbedtls_mpi *Y)
111834:int mpi_montmul(mbedtls_mpi *A,mbedtls_mpi *B,mbedtls_mpi *N,mbedtls_mpi_uint mm,mbedtls_mpi *T)
111888:int mbedtls_mpi_cmp_mpi(mbedtls_mpi *X,mbedtls_mpi *Y)
111947:int mbedtls_mpi_cmp_int(mbedtls_mpi *X,mbedtls_mpi_sint z)
111965:int mbedtls_mpi_add_abs(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *B)
112026:int mbedtls_mpi_sub_abs(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *B)
112056:cleanup:
112064:int mbedtls_mpi_add_mpi(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *B)
112093:int mbedtls_mpi_sub_mpi(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *B)
112122:int mbedtls_mpi_sub_int(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi_sint b)
112142:int mbedtls_mpi_mul_mpi(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *B)
112181:cleanup:
112190:int mbedtls_mpi_mul_int(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi_uint b)
112207:int mbedtls_mpi_div_mpi(mbedtls_mpi *Q,mbedtls_mpi *R,mbedtls_mpi *A,mbedtls_mpi *B)
112361:code_r0x23061c8e:
112377:cleanup:
112390:int mbedtls_mpi_mod_mpi(mbedtls_mpi *R,mbedtls_mpi *A,mbedtls_mpi *B)
112424:int mbedtls_mpi_exp_mod(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *E,mbedtls_mpi *N,mbedtls_mpi *_RR
112593:cleanup:
112617:code_r0x23062194:
112634:int mbedtls_mpi_gcd(mbedtls_mpi *G,mbedtls_mpi *A,mbedtls_mpi *B)
112705:int mbedtls_mpi_fill_random
112730:int mbedtls_mpi_inv_mod(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *N)
112854:cleanup:
112871:uint mbedtls_cipher_get_block_size(mbedtls_cipher_context_t *ctx)
112885:void add_pkcs_padding(uchar *output,size_t output_len,size_t data_len)
112901:int get_pkcs_padding(uchar *input,size_t input_len,size_t *data_len)
112936:void add_zeros_padding(uchar *output,size_t output_len,size_t data_len)
112951:int get_no_padding(uchar *input,size_t input_len,size_t *data_len)
112965:int get_zeros_padding(uchar *input,size_t input_len,size_t *data_len)
112989:mbedtls_cipher_info_t * mbedtls_cipher_info_from_type(mbedtls_cipher_type_t cipher_type)
113006:mbedtls_cipher_info_t *
113007:mbedtls_cipher_info_from_values
113029:void mbedtls_cipher_init(mbedtls_cipher_context_t *ctx)
113039:void mbedtls_cipher_free(mbedtls_cipher_context_t *ctx)
113064:int mbedtls_cipher_setkey
113104:int mbedtls_cipher_set_iv(mbedtls_cipher_context_t *ctx,uchar *iv,size_t iv_len)
113137:int mbedtls_cipher_reset(mbedtls_cipher_context_t *ctx)
113152:int mbedtls_cipher_update
113267:int mbedtls_cipher_finish(mbedtls_cipher_context_t *ctx,uchar *output,size_t *olen)
113290:joined_r0x23062b46:
113341:int mbedtls_cipher_set_padding_mode(mbedtls_cipher_context_t *ctx,mbedtls_cipher_padding_t mode)
113378:int mbedtls_cipher_setup(mbedtls_cipher_context_t *ctx,mbedtls_cipher_info_t *cipher_info)
113412:int mbedtls_cipher_crypt
113433:int mbedtls_cipher_auth_encrypt
113455:int mbedtls_cipher_auth_decrypt
113482:void gcm_ctx_free(void *ctx)
113493:void * gcm_ctx_alloc(void)
113508:int gcm_aes_setkey_wrap(void *ctx,uchar *key,uint key_bitlen)
113520:void aes_ctx_free(void *ctx)
113531:void * aes_ctx_alloc(void)
113546:int aes_setkey_dec_wrap(mbedtls_aes_context *ctx,uchar *key,uint keybits)
113595:int aes_setkey_enc_wrap(mbedtls_aes_context *ctx,uchar *key,uint keybits)
113716:int aes_crypt_ctr_wrap(mbedtls_aes_context *ctx,size_t length,size_t *nc_off,uchar *nonce_counter,
113754:int aes_crypt_cfb128_wrap
113798:int aes_crypt_cbc_wrap(mbedtls_aes_context *ctx,int mode,size_t length,uchar *iv,uchar *input,
113857:int aes_crypt_ecb_wrap(mbedtls_aes_context *ctx,int mode,uchar *input,uchar *output)
113872:void debug_send_line(int level,char *file,int line,char *str)
113884:void mbedtls_debug_print_mpi
113945:void mbedtls_debug_print_msg
113978:void mbedtls_debug_print_ret
113997:void mbedtls_debug_print_buf
114057:void mbedtls_debug_print_mpi
114074:void mbedtls_debug_print_ecp
114092:void mbedtls_debug_print_ecp
114110:void mbedtls_debug_print_crt
114190:ecp_curve_type ecp_get_type(mbedtls_ecp_group *grp)
114205:int ecp_safe_invert_jac(mbedtls_ecp_group *grp,mbedtls_ecp_point *Q,uchar inv)
114227:int ecp_select_comb(mbedtls_ecp_group *grp,mbedtls_ecp_point *R,mbedtls_ecp_point *T,uchar t_len,
114257:int ecp_modp(mbedtls_mpi *N,mbedtls_ecp_group *grp)
114298:int ecp_double_jac(mbedtls_ecp_group *grp,mbedtls_ecp_point *R,mbedtls_ecp_point *P)
114436:joined_r0x2306391e:
114479:cleanup:
114490:int ecp_normalize_jac(mbedtls_ecp_group *grp,mbedtls_ecp_point *pt)
114530:int ecp_normalize_jac_many(mbedtls_ecp_group *grp,mbedtls_ecp_point **T,size_t t_len)
114607:cleanup:
114626:void mbedtls_ecp_point_init(mbedtls_ecp_point *pt)
114638:void mbedtls_ecp_point_free(mbedtls_ecp_point *pt)
114650:mbedtls_ecp_group_id * mbedtls_ecp_grp_id_list(void)
114673:void mbedtls_ecp_point_init(mbedtls_ecp_point *pt)
114687:void mbedtls_ecp_group_init(mbedtls_ecp_group *grp)
114701:void mbedtls_ecp_keypair_init(mbedtls_ecp_keypair *key)
114717:void mbedtls_ecp_point_free(mbedtls_ecp_point *pt)
114731:void mbedtls_ecp_group_free(mbedtls_ecp_group *grp)
114767:void mbedtls_ecp_keypair_free(mbedtls_ecp_keypair *key)
114783:int mbedtls_ecp_copy(mbedtls_ecp_point *P,mbedtls_ecp_point *Q)
114800:int mbedtls_ecp_group_copy(mbedtls_ecp_group *dst,mbedtls_ecp_group *src)
114812:int mbedtls_ecp_set_zero(mbedtls_ecp_point *pt)
114829:int ecp_add_mixed(mbedtls_ecp_group *grp,mbedtls_ecp_point *R,mbedtls_ecp_point *P,
114893:cleanup:
114905:joined_r0x23064178:
114938:joined_r0x23064214:
114951:joined_r0x23064250:
114997:int ecp_mul_comb(mbedtls_ecp_group *grp,mbedtls_ecp_point *R,mbedtls_mpi *m,mbedtls_ecp_point *P,
115191:cleanup:
115206:cleanup:
115236:int mbedtls_ecp_point_read_binary
115278:int mbedtls_ecp_check_pubkey(mbedtls_ecp_group *grp,mbedtls_ecp_point *pt)
115354:cleanup:
115363:int mbedtls_ecp_check_privkey(mbedtls_ecp_group *grp,mbedtls_mpi *d)
115388:int mbedtls_ecp_mul(mbedtls_ecp_group *grp,mbedtls_ecp_point *R,mbedtls_mpi *m,mbedtls_ecp_point *P,
115415:int mbedtls_ecp_check_pub_priv(mbedtls_ecp_keypair *pub,mbedtls_ecp_keypair *prv)
115462:int ecp_mod_koblitz(mbedtls_mpi *N,mbedtls_mpi_uint *Rp,size_t p_limbs)
115524:int ecp_mod_p224k1(mbedtls_mpi *N)
115536:int ecp_mod_p256k1(mbedtls_mpi *N)
115548:int mbedtls_ecp_group_load(mbedtls_ecp_group *grp,mbedtls_ecp_group_id id)
115640:void gcm_mult(mbedtls_gcm_context *ctx,uchar *x,uchar *output)
115701:void mbedtls_gcm_init(mbedtls_gcm_context *ctx)
115714:int mbedtls_gcm_setkey(mbedtls_gcm_context *ctx,mbedtls_cipher_id_t cipher,uchar *key,uint keybits)
115821:int mbedtls_gcm_starts(mbedtls_gcm_context *ctx,int mode,uchar *iv,size_t iv_len,uchar *add,
115916:int mbedtls_gcm_update(mbedtls_gcm_context *ctx,size_t length,uchar *input,uchar *output)
115993:int mbedtls_gcm_finish(mbedtls_gcm_context *ctx,uchar *tag,size_t tag_len)
116067:int mbedtls_gcm_crypt_and_tag
116090:int mbedtls_gcm_auth_decrypt
116132:void mbedtls_gcm_free(mbedtls_gcm_context *ctx)
116149:mbedtls_md_info_t * mbedtls_md_info_from_type(mbedtls_md_type_t md_type)
116165:void mbedtls_md_init(mbedtls_md_context_t *ctx)
116175:void mbedtls_md_free(mbedtls_md_context_t *ctx)
116211:int mbedtls_md_setup(mbedtls_md_context_t *ctx,mbedtls_md_info_t *md_info,int hmac)
116245:int mbedtls_md_starts(mbedtls_md_context_t *ctx)
116259:int mbedtls_md_update(mbedtls_md_context_t *ctx,uchar *input,size_t ilen)
116273:int mbedtls_md_finish(mbedtls_md_context_t *ctx,uchar *output)
116287:int mbedtls_md(mbedtls_md_info_t *md_info,uchar *input,size_t ilen,uchar *output)
116301:int mbedtls_md_hmac_starts(mbedtls_md_context_t *ctx,uchar *key,size_t keylen)
116360:int mbedtls_md_hmac_update(mbedtls_md_context_t *ctx,uchar *input,size_t ilen)
116377:int mbedtls_md_hmac_finish(mbedtls_md_context_t *ctx,uchar *output)
116405:int mbedtls_md_hmac_reset(mbedtls_md_context_t *ctx)
116430:int mbedtls_md_process(mbedtls_md_context_t *ctx,uchar *data)
116444:uchar mbedtls_md_get_size(mbedtls_md_info_t *md_info)
116457:void md5_process_wrap(mbedtls_md5_context *ctx,uchar *data)
116642:void md5_clone_wrap(mbedtls_md5_context *dst,mbedtls_md5_context *src)
116652:void md5_ctx_free(void *ctx)
116663:void * md5_ctx_alloc(void)
116678:void md5_finish_wrap(mbedtls_md5_context *ctx,uchar *output)
116719:void md5_update_wrap(mbedtls_md5_context *ctx,uchar *input,size_t ilen)
116733:void md5_starts_wrap(mbedtls_md5_context *ctx)
116748:void sha1_process_wrap(mbedtls_sha1_context *ctx,uchar *data)
117187:void sha1_clone_wrap(mbedtls_sha1_context *dst,mbedtls_sha1_context *src)
117197:void sha1_ctx_free(void *ctx)
117208:void * sha1_ctx_alloc(void)
117223:void sha1_finish_wrap(mbedtls_sha1_context *ctx,uchar *output)
117278:void sha1_update_wrap(mbedtls_sha1_context *ctx,uchar *input,size_t ilen)
117292:void sha1_starts_wrap(mbedtls_sha1_context *ctx)
117308:void sha224_process_wrap(mbedtls_sha256_context *ctx,uchar *data)
117559:void sha224_clone_wrap(mbedtls_sha256_context *dst,mbedtls_sha256_context *src)
117569:void sha224_ctx_free(void *ctx)
117580:void * sha224_ctx_alloc(void)
117595:void sha224_wrap(uchar *input,size_t ilen,uchar *output)
117605:void sha256_wrap(uchar *input,size_t ilen,uchar *output)
117615:void sha224_finish_wrap(mbedtls_sha256_context *ctx,uchar *output)
117684:void sha224_update_wrap(mbedtls_sha256_context *ctx,uchar *input,size_t ilen)
117698:void sha224_starts_wrap(void *ctx)
117708:void sha256_starts_wrap(void *ctx)
117718:oid_sig_alg_t * oid_sig_alg_from_asn1(mbedtls_asn1_buf *oid)
117743:int mbedtls_oid_get_attr_short_name(mbedtls_asn1_buf *oid,char **short_name)
117773:int mbedtls_oid_get_x509_ext_type(mbedtls_asn1_buf *oid,int *ext_type)
117803:int mbedtls_oid_get_extended_key_usage(mbedtls_asn1_buf *oid,char **description)
117830:int mbedtls_oid_get_sig_alg_desc(mbedtls_asn1_buf *oid,char **description)
117854:int mbedtls_oid_get_sig_alg
117880:int mbedtls_oid_get_pk_alg(mbedtls_asn1_buf *oid,mbedtls_pk_type_t *pk_alg)
117910:int mbedtls_oid_get_ec_grp(mbedtls_asn1_buf *oid,mbedtls_ecp_group_id *grp_id)
117940:int mbedtls_oid_get_md_alg(mbedtls_asn1_buf *oid,mbedtls_md_type_t *md_alg)
117970:int mbedtls_oid_get_oid_by_md(mbedtls_md_type_t md_alg,char **oid,size_t *olen)
117997:void pem_aes_decrypt(uchar *aes_iv,uint keylen,uchar *buf,size_t buflen,uchar *pwd,size_t pwdlen)
118058:void mbedtls_pem_init(mbedtls_pem_context *ctx)
118068:int mbedtls_pem_read_buffer
118247:void mbedtls_pem_free(mbedtls_pem_context *ctx)
118265:void mbedtls_md5_init(mbedtls_md5_context *ctx)
118275:void mbedtls_md5_free(mbedtls_md5_context *ctx)
118293:void mbedtls_md5_clone(mbedtls_md5_context *dst,mbedtls_md5_context *src)
118302:void mbedtls_md5_starts(mbedtls_md5_context *ctx)
118316:void mbedtls_md5_process(mbedtls_md5_context *ctx,uchar *data)
118500:void mbedtls_md5_update(mbedtls_md5_context *ctx,uchar *input,size_t ilen)
118539:void mbedtls_md5_update(mbedtls_md5_context *ctx,uchar *input,size_t ilen)
118553:void mbedtls_md5_finish(mbedtls_md5_context *ctx,uchar *output)
118593:void mbedtls_md5(uchar *input,size_t ilen,uchar *output)
118610:void mbedtls_sha1_init(mbedtls_sha1_context *ctx)
118620:void mbedtls_sha1_free(mbedtls_sha1_context *ctx)
118638:void mbedtls_sha1_clone(mbedtls_sha1_context *dst,mbedtls_sha1_context *src)
118647:void mbedtls_sha1_starts(mbedtls_sha1_context *ctx)
118662:void mbedtls_sha1_process(mbedtls_sha1_context *ctx,uchar *data)
119100:void mbedtls_sha1_update(mbedtls_sha1_context *ctx,uchar *input,size_t ilen)
119139:void mbedtls_sha1_update(mbedtls_sha1_context *ctx,uchar *input,size_t ilen)
119153:void mbedtls_sha1_finish(mbedtls_sha1_context *ctx,uchar *output)
119205:void mbedtls_sha1(uchar *input,size_t ilen,uchar *output)
119222:mbedtls_ssl_ciphersuite_t * mbedtls_ssl_ciphersuite_from_id(int ciphersuite)
119242:int * mbedtls_ssl_list_ciphersuites(void)
119270:char * mbedtls_ssl_get_ciphersuite_name(int ciphersuite_id)
119289:mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg(mbedtls_ssl_ciphersuite_t *info)
119312:mbedtls_pk_context * mbedtls_ssl_own_key(mbedtls_ssl_context *ssl)
119328:size_t mbedtls_ssl_hs_hdr_len(void)
119343:int mbedtls_ssl_handshake_client_step(mbedtls_ssl_context *ssl)
120091:exit:
120380:mbedtls_pk_context * mbedtls_ssl_own_key(mbedtls_ssl_context *ssl)
120398:int mbedtls_ssl_handshake_server_step(mbedtls_ssl_context *ssl)
121508:have_ciphersuite:
121602:int mbedtls_x509_get_serial(uchar **p,uchar *end,mbedtls_x509_buf *serial)
121635:int mbedtls_x509_get_alg(uchar **p,uchar *end,mbedtls_x509_buf *alg,mbedtls_x509_buf *params)
121650:int mbedtls_x509_get_name(uchar **p,uchar *end,mbedtls_x509_name *cur)
121733:int mbedtls_x509_get_sig(uchar **p,uchar *end,mbedtls_x509_buf *sig)
121764:int mbedtls_x509_get_sig_alg
121790:int mbedtls_x509_get_ext(uchar **p,uchar *end,mbedtls_x509_buf *ext,int tag)
121825:int mbedtls_x509_dn_gets(char *buf,size_t size,mbedtls_x509_name *dn)
121897:int mbedtls_x509_serial_gets(char *buf,size_t size,mbedtls_x509_buf *serial)
121940:int mbedtls_x509_sig_alg_gets
121967:int mbedtls_x509_key_size_helper(char *buf,size_t buf_size,char *name)
121986:int mbedtls_x509_time_is_past(mbedtls_x509_time *to)
121995:undefined4 mbedtls_x509_time_is_future(void)
122004:int mbedtls_base64_decode(uchar *dst,size_t dlen,size_t *olen,uchar *src,size_t slen)
122123:double modf(double __x,double *__iptr)
122170:DItype __lshrdi3(shift_count_type b)
122181:int __clzsi2(USItype x)
122201:SFtype __floatundisf(void)
122224:DItype __divdi3(void)
122237:DItype __moddi3(void)
122250:UDItype __udivdi3(void)
122263:UDItype __umoddi3(void)
122276:DFtype __adddf3(void)
122368:sub1:
122390:sub3:
122409:DFtype __divdf3(void)
122510:__gcc_CMPtype __eqdf2(void)
122549:__gcc_CMPtype __gedf2(void)
122572:code_r0x2306efb0:
122633:__gcc_CMPtype __ledf2(void)
122656:code_r0x2306f09c:
122719:DFtype __muldf3(void)
122816:DFtype __subdf3(void)
122913:sub1:
122935:sub3:
122952:SItype __fixdfsi(void)
122989:USItype __fixunsdfsi(void)
123044:DFtype __floatsidf(SItype i)
123058:DFtype __floatunsidf(USItype i)
123072:DFtype __extendsfdf2(SFtype a)
123090:SFtype __truncdfsf2(void)
123170:int atoi(char *__nptr)
123182:void _atoi_r(undefined4 *param_1,byte *param_2)
123192:undefined * __errno(void)
123201:void * memchr(void *__s,int __c,size_t __n)
123262:int memcmp(void *__s1,void *__s2,size_t __n)
123308:void * memcpy(void *__dest,void *__src,size_t __n)
123405:void * memmove(void *__dest,void *__src,size_t __n)
123486:void * memset(void *__s,int __c,size_t __n)
123537:char * strchr(char *__s,int __c)
123623:int strcmp(char *__s1,char *__s2)
123722:char * strcpy(char *__dest,char *__src)
123770:size_t strlen(char *__s)
123808:int strncmp(char *__s1,char *__s2,size_t __n)
123872:char * strncpy(char *__dest,char *__src,size_t __n)
123936:size_t strnlen(char *__string,size_t __maxlen)
123961:char * strrchr(char *__s,int __c)
123983:byte * two_way_long_needle(int param_1,int param_2,byte *param_3,byte *param_4)
124208:char * strstr(char *__haystack,char *__needle)
124338:uint _strtol_l_isra_0(undefined4 *param_1,byte *param_2,byte **param_3,uint param_4)
124447:uint _strtol_r(undefined4 *param_1,byte *param_2,byte **param_3,uint param_4)
124554:long strtol_l(char *__nptr,char **__endptr,int __base,__locale_t __loc)
124566:long strtol(char *__nptr,char **__endptr,int __base)
124578:int stat(char *__file,stat *__buf)
124590:void _stat_r(int *param_1,int param_2,undefined2 *param_3)
124608:int _stat(int param_1,undefined2 *param_2)
124627:void _conv_stat(undefined2 *param_1,undefined4 *param_2)
124685:BL_Err_Type AON_Power_On_BG(void)
124701:BL_Err_Type AON_Power_Off_BG(void)
124717:BL_Err_Type AON_Power_On_LDO11_SOC(void)
124733:BL_Err_Type AON_Power_Off_LDO11_SOC(void)
124749:BL_Err_Type AON_Power_On_LDO15_RF(void)
124765:BL_Err_Type AON_Power_Off_LDO15_RF(void)
124781:BL_Err_Type AON_Power_On_SFReg(void)
124797:BL_Err_Type AON_Power_Off_SFReg(void)
124813:BL_Err_Type AON_LowPower_Enter_PDS0(void)
124829:BL_Err_Type AON_LowPower_Exit_PDS0(void)
124845:void ASM_Delay_Us(uint32_t core,uint32_t cnt)
124859:void BL602_Delay_US(uint32_t cnt)
124873:void BL602_Delay_MS(uint32_t cnt)
124887:void * BL602_MemCpy(void *dst,void *src,uint32_t n)
124903:uint32_t * BL602_MemCpy4(uint32_t *dst,uint32_t *src,uint32_t n)
124918:void * BL602_MemCpy_Fast(void *pdst,void *psrc,uint32_t n)
124934:void * BL602_MemSet(void *s,uint8_t c,uint32_t n)
124949:uint32_t * BL602_MemSet4(uint32_t *dst,uint32_t val,uint32_t n)
124965:int BL602_MemCmp(void *s1,void *s2,uint32_t n)
124981:void EF_Ctrl_Sw_AHB_Clk_0(void)
124995:void EF_Ctrl_Program_Efuse_0(void)
125009:void EF_Ctrl_Load_Efuse_R0(void)
125023:BL_Sts_Type EF_Ctrl_Busy(void)
125039:BL_Sts_Type EF_Ctrl_AutoLoad_Done(void)
125055:void EF_Ctrl_Clear(uint32_t index,uint32_t len)
125069:BL_Err_Type GLB_SW_System_Reset(void)
125085:BL_Err_Type GLB_SW_CPU_Reset(void)
125101:BL_Err_Type GLB_SW_POR_Reset(void)
125117:BL_Err_Type GLB_Select_Internal_Flash(void)
125133:BL_Err_Type GLB_Select_External_Flash(void)
125149:BL_Err_Type GLB_Deswap_Flash_Pin(void)
125165:BL_Err_Type GLB_Swap_Flash_Pin(void)
125181:BL_Err_Type GLB_GPIO_Init(GLB_GPIO_Cfg_Type *cfg)
125197:BL_Err_Type GLB_GPIO_OUTPUT_Enable(GLB_GPIO_Type gpioPin)
125213:BL_Err_Type GLB_GPIO_OUTPUT_Disable(GLB_GPIO_Type gpioPin)
125229:BL_Err_Type GLB_GPIO_Set_HZ(GLB_GPIO_Type gpioPin)
125245:uint8_t GLB_GPIO_Get_Fun(GLB_GPIO_Type gpioPin)
125261:void HBN_Mode_Enter(HBN_APP_CFG_Type *cfg)
125275:void HBN_Power_Down_Flash(SPI_Flash_Cfg_Type *flashCfg)
125289:void HBN_Enable(uint8_t aGPIOIeCfg,HBN_LDO_LEVEL_Type ldoLevel,HBN_LEVEL_Type hbnLevel)
125303:BL_Err_Type HBN_Reset(void)
125319:BL_Err_Type HBN_Set_Ldo11_Aon_Vout(HBN_LDO_LEVEL_Type ldoLevel)
125335:BL_Err_Type HBN_Set_Ldo11_Rt_Vout(HBN_LDO_LEVEL_Type ldoLevel)
125351:BL_Err_Type HBN_Set_Ldo11_Soc_Vout(HBN_LDO_LEVEL_Type ldoLevel)
125367:BL_Err_Type HBN_Hw_Pu_Pd_Cfg(uint8_t enable)
125383:BL_Err_Type HBN_Pin_WakeUp_Mask(uint8_t maskVal)
125399:BL_Err_Type
125400:HBN_GPIO7_Dbg_Pull_Cfg(BL_Fun_Type pupdEn,BL_Fun_Type iesmtEn,BL_Fun_Type dlyEn,uint8_t dlySec)
125416:BL_Err_Type HBN_Set_Embedded_Flash_Pullup(uint8_t enable)
125432:BL_Err_Type L1C_Set_Wrap(BL_Fun_Type wrap)
125448:BL_Err_Type L1C_Set_Way_Disable(uint8_t disableVal)
125464:BL_Err_Type L1C_IROM_2T_Access_Set(uint8_t enable)
125480:BL_Err_Type PDS_Reset(void)
125496:BL_Err_Type PDS_Force_Config(PDS_CTL2_Type *cfg2,PDS_CTL3_Type *cfg3)
125512:BL_Err_Type PDS_RAM_Config(PDS_RAM_CFG_Type *ramCfg)
125528:BL_Err_Type
125529:PDS_Default_Level_Config
125546:void SEC_Eng_Turn_On_Sec_Ring(void)
125560:void SEC_Eng_Turn_Off_Sec_Ring(void)
125574:void SFlash_Init(SF_Ctrl_Cfg_Type *pSfCtrlCfg)
125588:BL_Err_Type SFlash_SetSPIMode(SF_Ctrl_Mode_Type mode)
125604:BL_Err_Type
125605:SFlash_Read_Reg(SPI_Flash_Cfg_Type *flashCfg,uint8_t regIndex,uint8_t *regValue,uint8_t regLen)
125621:BL_Err_Type
125622:SFlash_Write_Reg(SPI_Flash_Cfg_Type *flashCfg,uint8_t regIndex,uint8_t *regValue,uint8_t regLen)
125638:BL_Sts_Type SFlash_Busy(SPI_Flash_Cfg_Type *flashCfg)
125654:BL_Err_Type SFlash_Write_Enable(SPI_Flash_Cfg_Type *flashCfg)
125670:BL_Err_Type SFlash_Qspi_Enable(SPI_Flash_Cfg_Type *flashCfg)
125686:void SFlash_Volatile_Reg_Write_Enable(SPI_Flash_Cfg_Type *flashCfg)
125700:BL_Err_Type SFlash_Chip_Erase(SPI_Flash_Cfg_Type *flashCfg)
125716:BL_Err_Type SFlash_Sector_Erase(SPI_Flash_Cfg_Type *flashCfg,uint32_t secNum)
125732:BL_Err_Type SFlash_Blk32_Erase(SPI_Flash_Cfg_Type *flashCfg,uint32_t blkNum)
125748:BL_Err_Type SFlash_Blk64_Erase(SPI_Flash_Cfg_Type *flashCfg,uint32_t blkNum)
125764:BL_Err_Type SFlash_Erase(SPI_Flash_Cfg_Type *flashCfg,uint32_t startaddr,uint32_t endaddr)
125780:BL_Err_Type
125781:SFlash_Program(SPI_Flash_Cfg_Type *flashCfg,SF_Ctrl_IO_Type ioMode,uint32_t addr,uint8_t *data,
125798:void SFlash_GetUniqueId(uint8_t *data,uint8_t idLen)
125812:void SFlash_GetJedecId(SPI_Flash_Cfg_Type *flashCfg,uint8_t *data)
125826:void SFlash_GetDeviceId(uint8_t *data)
125840:void SFlash_Powerdown(void)
125854:void SFlash_Releae_Powerdown(SPI_Flash_Cfg_Type *flashCfg)
125868:void SFlash_SetBurstWrap(SPI_Flash_Cfg_Type *flashCfg)
125882:void SFlash_DisableBurstWrap(SPI_Flash_Cfg_Type *flashCfg)
125896:BL_Err_Type SFlash_Software_Reset(SPI_Flash_Cfg_Type *flashCfg)
125912:void SFlash_Reset_Continue_Read(SPI_Flash_Cfg_Type *flashCfg)
125926:BL_Err_Type
125927:SFlash_Set_IDbus_Cfg
125945:BL_Err_Type
125946:SFlash_IDbus_Read_Enable(SPI_Flash_Cfg_Type *flashCfg,SF_Ctrl_IO_Type ioMode,uint8_t contRead)
125962:BL_Err_Type SFlash_Cache_Enable_Set(uint8_t wayDisable)
125978:BL_Err_Type SFlash_Cache_Flush(void)
125994:BL_Err_Type
125995:SFlash_Cache_Read_Enable
126012:void SFlash_Cache_Hit_Count_Get(uint32_t *hitCountLow,uint32_t *hitCountHigh)
126026:uint32_t SFlash_Cache_Miss_Count_Get(void)
126042:void SFlash_Cache_Read_Disable(void)
126056:BL_Err_Type
126057:SFlash_Read(SPI_Flash_Cfg_Type *flashCfg,SF_Ctrl_IO_Type ioMode,uint8_t contRead,uint32_t addr,
126074:BL_Err_Type
126075:SFlash_Read_Reg_With_Cmd
126092:BL_Err_Type
126093:SFlash_Write_Reg_With_Cmd
126110:void SF_Cfg_Init_Ext_Flash_Gpio(uint8_t extFlashPin)
126124:void SF_Cfg_Init_Internal_Flash_Gpio(void)
126138:void SF_Cfg_Deinit_Ext_Flash_Gpio(uint8_t extFlashPin)
126152:void SF_Cfg_Restore_GPIO17_Fun(uint8_t fun)
126166:BL_Err_Type SF_Cfg_Get_Flash_Cfg_Need_Lock(uint32_t flashID,SPI_Flash_Cfg_Type *pFlashCfg)
126182:void SF_Cfg_Init_Flash_Gpio(uint8_t flashPinCfg,uint8_t restoreDefault)
126196:uint32_t SF_Cfg_Flash_Identify
126215:void SF_Ctrl_Enable(SF_Ctrl_Cfg_Type *cfg)
126229:void SF_Ctrl_Select_Pad(SF_Ctrl_Pad_Sel sel)
126243:void SF_Ctrl_Set_Owner(SF_Ctrl_Owner_Type owner)
126257:void SF_Ctrl_Disable(void)
126271:void SF_Ctrl_AES_Enable_BE(void)
126285:void SF_Ctrl_AES_Enable_LE(void)
126299:void SF_Ctrl_AES_Set_Region
126315:void SF_Ctrl_AES_Set_Key(uint8_t region,uint8_t *key,SF_Ctrl_AES_Key_Type keyType)
126329:void SF_Ctrl_AES_Set_Key_BE(uint8_t region,uint8_t *key,SF_Ctrl_AES_Key_Type keyType)
126343:void SF_Ctrl_AES_Set_IV(uint8_t region,uint8_t *iv,uint32_t addrOffset)
126357:void SF_Ctrl_AES_Set_IV_BE(uint8_t region,uint8_t *iv,uint32_t addrOffset)
126371:void SF_Ctrl_AES_Enable(void)
126385:void SF_Ctrl_AES_Disable(void)
126399:void SF_Ctrl_Set_Flash_Image_Offset(uint32_t addrOffset)
126413:uint32_t SF_Ctrl_Get_Flash_Image_Offset(void)
126429:void SF_Ctrl_Select_Clock(SF_Ctrl_Sahb_Type sahbType)
126443:void SF_Ctrl_SendCmd(SF_Ctrl_Cmd_Cfg_Type *cfg)
126457:void SF_Ctrl_Icache_Set(SF_Ctrl_Cmd_Cfg_Type *cfg,uint8_t cmdValid)
126471:void SF_Ctrl_Icache2_Set(SF_Ctrl_Cmd_Cfg_Type *cfg,uint8_t cmdValid)
126485:BL_Sts_Type SF_Ctrl_GetBusyState(void)
126501:uint8_t SF_Ctrl_Is_AES_Enable(void)
126517:uint8_t SF_Ctrl_Get_Clock_Delay(void)
126533:void SF_Ctrl_Set_Clock_Delay(uint8_t delay)
126547:BL_Err_Type XIP_SFlash_State_Save(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t *offset)
126563:BL_Err_Type XIP_SFlash_State_Restore(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t offset)
126579:BL_Err_Type
126580:XIP_SFlash_Erase_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t startaddr,uint32_t endaddr)
126596:BL_Err_Type
126597:XIP_SFlash_Write_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,uint8_t *data,uint32_t len)
126613:BL_Err_Type
126614:XIP_SFlash_Read_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,uint8_t *data,uint32_t len)
126630:BL_Err_Type XIP_SFlash_GetJedecId_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint8_t *data)
126646:BL_Err_Type XIP_SFlash_GetDeviceId_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint8_t *data)
126662:BL_Err_Type
126663:XIP_SFlash_GetUniqueId_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint8_t *data,uint8_t idLen)
126679:BL_Err_Type XIP_SFlash_Read_Via_Cache_Need_Lock(uint32_t addr,uint8_t *data,uint32_t len)
126695:int XIP_SFlash_Read_With_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,uint8_t *dst,int len)
126711:int XIP_SFlash_Write_With_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,uint8_t *src,int len)
126727:int XIP_SFlash_Erase_With_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,int len)
126743:void XIP_SFlash_Opt_Enter(uint8_t *aesEnable)
126757:void XIP_SFlash_Opt_Exit(uint8_t aesEnable)
126771:uint32_t BFLB_Soft_CRC32(void *dataIn,uint32_t len)
126787:BL_Err_Type ADC_Trim_TSEN(uint16_t *tsen_offset)
126845:BL_Err_Type ADC_Gain_Trim(void)
126886:uint8_t EF_Ctrl_Get_Trim_Parity(uint32_t val,uint8_t len)
126909:void EF_Ctrl_Read_RC32M_Trim(Efuse_Ana_RC32M_Trim_Type *trim)
126930:void EF_Ctrl_Read_RC32K_Trim(Efuse_Ana_RC32K_Trim_Type *trim)
126946:void EF_Ctrl_Read_TSEN_Trim(Efuse_TSEN_Refcode_Corner_Type *trim)
126972:void EF_Ctrl_Read_ADC_Gain_Trim(Efuse_ADC_Gain_Coeff_Type *trim)
126988:BL_Err_Type AON_Power_On_MBG(void)
127004:BL_Err_Type AON_Power_Off_MBG(void)
127020:BL_Err_Type AON_Power_On_XTAL(void)
127036:BL_Err_Type AON_Set_Xtal_CapCode(uint8_t capIn,uint8_t capOut)
127052:uint8_t AON_Get_Xtal_CapCode(void)
127068:BL_Err_Type AON_Power_Off_XTAL(void)
127084:uint8_t EF_Ctrl_Get_Trim_Parity(uint32_t val,uint8_t len)
127100:void EF_Ctrl_Read_RC32M_Trim(Efuse_Ana_RC32M_Trim_Type *trim)
127114:void EF_Ctrl_Read_RC32K_Trim(Efuse_Ana_RC32K_Trim_Type *trim)
127128:GLB_ROOT_CLK_Type GLB_Get_Root_CLK_Sel(void)
127144:BL_Err_Type GLB_Set_System_CLK_Div(uint8_t hclkDiv,uint8_t bclkDiv)
127160:uint8_t GLB_Get_BCLK_Div(void)
127176:uint8_t GLB_Get_HCLK_Div(void)
127192:BL_Err_Type Update_SystemCoreClockWith_XTAL(GLB_PLL_XTAL_Type xtalType)
127208:BL_Err_Type GLB_Set_System_CLK(GLB_PLL_XTAL_Type xtalType,GLB_SYS_CLK_Type clkFreq)
127224:BL_Err_Type System_Core_Clock_Update_From_RC32M(void)
127240:BL_Err_Type GLB_Set_SF_CLK(uint8_t enable,GLB_SFLASH_CLK_Type clkSel,uint8_t div)
127256:BL_Err_Type GLB_Set_PKA_CLK_Sel(GLB_PKA_CLK_Type clkSel)
127272:BL_Err_Type HBN_32K_Sel(HBN_32K_CLK_Type clkType)
127288:BL_Err_Type HBN_Set_ROOT_CLK_Sel(HBN_ROOT_CLK_Type rootClk)
127304:BL_Err_Type HBN_Power_On_Xtal_32K(void)
127320:BL_Err_Type HBN_Power_Off_Xtal_32K(void)
127336:BL_Err_Type HBN_Power_On_RC32K(void)
127352:BL_Err_Type HBN_Power_Off_RC32K(void)
127368:BL_Err_Type HBN_Trim_RC32K(void)
127384:BL_Err_Type PDS_Trim_RC32M(void)
127400:BL_Err_Type PDS_Select_RC32M_As_PLL_Ref(void)
127416:BL_Err_Type PDS_Select_XTAL_As_PLL_Ref(void)
127432:BL_Err_Type PDS_Power_On_PLL(PDS_PLL_XTAL_Type xtalType)
127448:BL_Err_Type PDS_Enable_PLL_All_Clks(void)
127464:BL_Err_Type PDS_Disable_PLL_All_Clks(void)
127480:BL_Err_Type PDS_Enable_PLL_Clk(PDS_PLL_CLK_Type pllClk)
127496:BL_Err_Type PDS_Disable_PLL_Clk(PDS_PLL_CLK_Type pllClk)
127512:BL_Err_Type PDS_Power_Off_PLL(void)
